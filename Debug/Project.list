
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000233c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005a044  08002520  08002520  00012520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0805c564  0805c564  0007000c  2**0
                  CONTENTS
  4 .ARM          00000000  0805c564  0805c564  0007000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0805c564  0805c564  0007000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0805c564  0805c564  0006c564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0805c568  0805c568  0006c568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0805c56c  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  0805c578  0007000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  0805c578  000700c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0007000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000065d8  00000000  00000000  00070035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000188e  00000000  00000000  0007660d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a8  00000000  00000000  00077ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005e0  00000000  00000000  00078548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e25  00000000  00000000  00078b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007d75  00000000  00000000  0009194d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090b8d  00000000  00000000  000996c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012a24f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001928  00000000  00000000  0012a2a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002508 	.word	0x08002508

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08002508 	.word	0x08002508

08000224 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	e002      	b.n	8000234 <Delay+0x10>
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	3b01      	subs	r3, #1
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d1f9      	bne.n	800022e <Delay+0xa>
 800023a:	bf00      	nop
 800023c:	bf00      	nop
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr

08000246 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000246:	b580      	push	{r7, lr}
 8000248:	b082      	sub	sp, #8
 800024a:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 800024c:	2001      	movs	r0, #1
 800024e:	f000 f829 	bl	80002a4 <LCD_BackLed_Control>
	LCD_Rst();
 8000252:	f000 f80f 	bl	8000274 <LCD_Rst>
	LCD_REG_Config();
 8000256:	f000 f85f 	bl	8000318 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800025a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000264:	22f0      	movs	r2, #240	; 0xf0
 8000266:	2100      	movs	r1, #0
 8000268:	2000      	movs	r0, #0
 800026a:	f000 f9e6 	bl	800063a <LCD_Clear>
}
 800026e:	bf00      	nop
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2102      	movs	r1, #2
 800027c:	4807      	ldr	r0, [pc, #28]	; (800029c <LCD_Rst+0x28>)
 800027e:	f001 fbf3 	bl	8001a68 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000282:	4807      	ldr	r0, [pc, #28]	; (80002a0 <LCD_Rst+0x2c>)
 8000284:	f7ff ffce 	bl	8000224 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000288:	2201      	movs	r2, #1
 800028a:	2102      	movs	r1, #2
 800028c:	4803      	ldr	r0, [pc, #12]	; (800029c <LCD_Rst+0x28>)
 800028e:	f001 fbeb 	bl	8001a68 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000292:	4803      	ldr	r0, [pc, #12]	; (80002a0 <LCD_Rst+0x2c>)
 8000294:	f7ff ffc6 	bl	8000224 <Delay>
}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	40011800 	.word	0x40011800
 80002a0:	0002bffc 	.word	0x0002bffc

080002a4 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d006      	beq.n	80002c2 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80002b4:	2200      	movs	r2, #0
 80002b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002ba:	4807      	ldr	r0, [pc, #28]	; (80002d8 <LCD_BackLed_Control+0x34>)
 80002bc:	f001 fbd4 	bl	8001a68 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80002c0:	e005      	b.n	80002ce <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80002c2:	2201      	movs	r2, #1
 80002c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002c8:	4803      	ldr	r0, [pc, #12]	; (80002d8 <LCD_BackLed_Control+0x34>)
 80002ca:	f001 fbcd 	bl	8001a68 <HAL_GPIO_WritePin>
}
 80002ce:	bf00      	nop
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40011400 	.word	0x40011400

080002dc <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002e6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80002ea:	88fb      	ldrh	r3, [r7, #6]
 80002ec:	8013      	strh	r3, [r2, #0]
}
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr

080002f8 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000302:	4a04      	ldr	r2, [pc, #16]	; (8000314 <LCD_Write_Data+0x1c>)
 8000304:	88fb      	ldrh	r3, [r7, #6]
 8000306:	8013      	strh	r3, [r2, #0]
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	60020000 	.word	0x60020000

08000318 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 800031c:	20cf      	movs	r0, #207	; 0xcf
 800031e:	f7ff ffdd 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000322:	2000      	movs	r0, #0
 8000324:	f7ff ffe8 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000328:	2081      	movs	r0, #129	; 0x81
 800032a:	f7ff ffe5 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 800032e:	2030      	movs	r0, #48	; 0x30
 8000330:	f7ff ffe2 	bl	80002f8 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000334:	20ed      	movs	r0, #237	; 0xed
 8000336:	f7ff ffd1 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 800033a:	2064      	movs	r0, #100	; 0x64
 800033c:	f7ff ffdc 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000340:	2003      	movs	r0, #3
 8000342:	f7ff ffd9 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000346:	2012      	movs	r0, #18
 8000348:	f7ff ffd6 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 800034c:	2081      	movs	r0, #129	; 0x81
 800034e:	f7ff ffd3 	bl	80002f8 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000352:	20e8      	movs	r0, #232	; 0xe8
 8000354:	f7ff ffc2 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000358:	2085      	movs	r0, #133	; 0x85
 800035a:	f7ff ffcd 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800035e:	2010      	movs	r0, #16
 8000360:	f7ff ffca 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000364:	2078      	movs	r0, #120	; 0x78
 8000366:	f7ff ffc7 	bl	80002f8 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800036a:	20cb      	movs	r0, #203	; 0xcb
 800036c:	f7ff ffb6 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000370:	2039      	movs	r0, #57	; 0x39
 8000372:	f7ff ffc1 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000376:	202c      	movs	r0, #44	; 0x2c
 8000378:	f7ff ffbe 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800037c:	2000      	movs	r0, #0
 800037e:	f7ff ffbb 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000382:	2034      	movs	r0, #52	; 0x34
 8000384:	f7ff ffb8 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000388:	2002      	movs	r0, #2
 800038a:	f7ff ffb5 	bl	80002f8 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 800038e:	20f7      	movs	r0, #247	; 0xf7
 8000390:	f7ff ffa4 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000394:	2020      	movs	r0, #32
 8000396:	f7ff ffaf 	bl	80002f8 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800039a:	20ea      	movs	r0, #234	; 0xea
 800039c:	f7ff ff9e 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80003a0:	2000      	movs	r0, #0
 80003a2:	f7ff ffa9 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80003a6:	2000      	movs	r0, #0
 80003a8:	f7ff ffa6 	bl	80002f8 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80003ac:	20b1      	movs	r0, #177	; 0xb1
 80003ae:	f7ff ff95 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80003b2:	2000      	movs	r0, #0
 80003b4:	f7ff ffa0 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80003b8:	201b      	movs	r0, #27
 80003ba:	f7ff ff9d 	bl	80002f8 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80003be:	20b6      	movs	r0, #182	; 0xb6
 80003c0:	f7ff ff8c 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80003c4:	200a      	movs	r0, #10
 80003c6:	f7ff ff97 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80003ca:	20a2      	movs	r0, #162	; 0xa2
 80003cc:	f7ff ff94 	bl	80002f8 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 80003d0:	20c0      	movs	r0, #192	; 0xc0
 80003d2:	f7ff ff83 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 80003d6:	2035      	movs	r0, #53	; 0x35
 80003d8:	f7ff ff8e 	bl	80002f8 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 80003dc:	20c1      	movs	r0, #193	; 0xc1
 80003de:	f7ff ff7d 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 80003e2:	2011      	movs	r0, #17
 80003e4:	f7ff ff88 	bl	80002f8 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 80003e8:	20c5      	movs	r0, #197	; 0xc5
 80003ea:	f7ff ff77 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 80003ee:	2045      	movs	r0, #69	; 0x45
 80003f0:	f7ff ff82 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 80003f4:	2045      	movs	r0, #69	; 0x45
 80003f6:	f7ff ff7f 	bl	80002f8 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 80003fa:	20c7      	movs	r0, #199	; 0xc7
 80003fc:	f7ff ff6e 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000400:	20a2      	movs	r0, #162	; 0xa2
 8000402:	f7ff ff79 	bl	80002f8 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000406:	20f2      	movs	r0, #242	; 0xf2
 8000408:	f7ff ff68 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800040c:	2000      	movs	r0, #0
 800040e:	f7ff ff73 	bl	80002f8 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000412:	2026      	movs	r0, #38	; 0x26
 8000414:	f7ff ff62 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000418:	2001      	movs	r0, #1
 800041a:	f7ff ff6d 	bl	80002f8 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 800041e:	20e0      	movs	r0, #224	; 0xe0
 8000420:	f7ff ff5c 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000424:	200f      	movs	r0, #15
 8000426:	f7ff ff67 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 800042a:	2026      	movs	r0, #38	; 0x26
 800042c:	f7ff ff64 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000430:	2024      	movs	r0, #36	; 0x24
 8000432:	f7ff ff61 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8000436:	200b      	movs	r0, #11
 8000438:	f7ff ff5e 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 800043c:	200e      	movs	r0, #14
 800043e:	f7ff ff5b 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000442:	2009      	movs	r0, #9
 8000444:	f7ff ff58 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000448:	2054      	movs	r0, #84	; 0x54
 800044a:	f7ff ff55 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 800044e:	20a8      	movs	r0, #168	; 0xa8
 8000450:	f7ff ff52 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000454:	2046      	movs	r0, #70	; 0x46
 8000456:	f7ff ff4f 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800045a:	200c      	movs	r0, #12
 800045c:	f7ff ff4c 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000460:	2017      	movs	r0, #23
 8000462:	f7ff ff49 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000466:	2009      	movs	r0, #9
 8000468:	f7ff ff46 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800046c:	200f      	movs	r0, #15
 800046e:	f7ff ff43 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000472:	2007      	movs	r0, #7
 8000474:	f7ff ff40 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000478:	2000      	movs	r0, #0
 800047a:	f7ff ff3d 	bl	80002f8 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 800047e:	20e1      	movs	r0, #225	; 0xe1
 8000480:	f7ff ff2c 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000484:	2000      	movs	r0, #0
 8000486:	f7ff ff37 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800048a:	2019      	movs	r0, #25
 800048c:	f7ff ff34 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000490:	201b      	movs	r0, #27
 8000492:	f7ff ff31 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000496:	2004      	movs	r0, #4
 8000498:	f7ff ff2e 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800049c:	2010      	movs	r0, #16
 800049e:	f7ff ff2b 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80004a2:	2007      	movs	r0, #7
 80004a4:	f7ff ff28 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 80004a8:	202a      	movs	r0, #42	; 0x2a
 80004aa:	f7ff ff25 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 80004ae:	2047      	movs	r0, #71	; 0x47
 80004b0:	f7ff ff22 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 80004b4:	2039      	movs	r0, #57	; 0x39
 80004b6:	f7ff ff1f 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80004ba:	2003      	movs	r0, #3
 80004bc:	f7ff ff1c 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80004c0:	2006      	movs	r0, #6
 80004c2:	f7ff ff19 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80004c6:	2006      	movs	r0, #6
 80004c8:	f7ff ff16 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 80004cc:	2030      	movs	r0, #48	; 0x30
 80004ce:	f7ff ff13 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 80004d2:	2038      	movs	r0, #56	; 0x38
 80004d4:	f7ff ff10 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80004d8:	200f      	movs	r0, #15
 80004da:	f7ff ff0d 	bl	80002f8 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 80004de:	2036      	movs	r0, #54	; 0x36
 80004e0:	f7ff fefc 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 80004e4:	20c8      	movs	r0, #200	; 0xc8
 80004e6:	f7ff ff07 	bl	80002f8 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 80004ea:	202a      	movs	r0, #42	; 0x2a
 80004ec:	f7ff fef6 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80004f0:	2000      	movs	r0, #0
 80004f2:	f7ff ff01 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80004f6:	2000      	movs	r0, #0
 80004f8:	f7ff fefe 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80004fc:	2000      	movs	r0, #0
 80004fe:	f7ff fefb 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000502:	20ef      	movs	r0, #239	; 0xef
 8000504:	f7ff fef8 	bl	80002f8 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000508:	202b      	movs	r0, #43	; 0x2b
 800050a:	f7ff fee7 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800050e:	2000      	movs	r0, #0
 8000510:	f7ff fef2 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000514:	2000      	movs	r0, #0
 8000516:	f7ff feef 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 800051a:	2001      	movs	r0, #1
 800051c:	f7ff feec 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000520:	203f      	movs	r0, #63	; 0x3f
 8000522:	f7ff fee9 	bl	80002f8 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000526:	203a      	movs	r0, #58	; 0x3a
 8000528:	f7ff fed8 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 800052c:	2055      	movs	r0, #85	; 0x55
 800052e:	f7ff fee3 	bl	80002f8 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000532:	2011      	movs	r0, #17
 8000534:	f7ff fed2 	bl	80002dc <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000538:	4803      	ldr	r0, [pc, #12]	; (8000548 <LCD_REG_Config+0x230>)
 800053a:	f7ff fe73 	bl	8000224 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 800053e:	2029      	movs	r0, #41	; 0x29
 8000540:	f7ff fecc 	bl	80002dc <LCD_Write_Cmd>
	
	
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}
 8000548:	0002bffc 	.word	0x0002bffc

0800054c <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	4604      	mov	r4, r0
 8000554:	4608      	mov	r0, r1
 8000556:	4611      	mov	r1, r2
 8000558:	461a      	mov	r2, r3
 800055a:	4623      	mov	r3, r4
 800055c:	80fb      	strh	r3, [r7, #6]
 800055e:	4603      	mov	r3, r0
 8000560:	80bb      	strh	r3, [r7, #4]
 8000562:	460b      	mov	r3, r1
 8000564:	807b      	strh	r3, [r7, #2]
 8000566:	4613      	mov	r3, r2
 8000568:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 800056a:	202a      	movs	r0, #42	; 0x2a
 800056c:	f7ff feb6 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000570:	88fb      	ldrh	r3, [r7, #6]
 8000572:	0a1b      	lsrs	r3, r3, #8
 8000574:	b29b      	uxth	r3, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff febe 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 800057c:	88fb      	ldrh	r3, [r7, #6]
 800057e:	b2db      	uxtb	r3, r3
 8000580:	b29b      	uxth	r3, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff feb8 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000588:	88fa      	ldrh	r2, [r7, #6]
 800058a:	887b      	ldrh	r3, [r7, #2]
 800058c:	4413      	add	r3, r2
 800058e:	3b01      	subs	r3, #1
 8000590:	121b      	asrs	r3, r3, #8
 8000592:	b29b      	uxth	r3, r3
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff feaf 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800059a:	88fa      	ldrh	r2, [r7, #6]
 800059c:	887b      	ldrh	r3, [r7, #2]
 800059e:	4413      	add	r3, r2
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	3b01      	subs	r3, #1
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff fea4 	bl	80002f8 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 80005b0:	202b      	movs	r0, #43	; 0x2b
 80005b2:	f7ff fe93 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 80005b6:	88bb      	ldrh	r3, [r7, #4]
 80005b8:	0a1b      	lsrs	r3, r3, #8
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe9b 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 80005c2:	88bb      	ldrh	r3, [r7, #4]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff fe95 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80005ce:	88ba      	ldrh	r2, [r7, #4]
 80005d0:	883b      	ldrh	r3, [r7, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	3b01      	subs	r3, #1
 80005d6:	121b      	asrs	r3, r3, #8
 80005d8:	b29b      	uxth	r3, r3
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff fe8c 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80005e0:	88ba      	ldrh	r2, [r7, #4]
 80005e2:	883b      	ldrh	r3, [r7, #0]
 80005e4:	4413      	add	r3, r2
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	3b01      	subs	r3, #1
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fe81 	bl	80002f8 <LCD_Write_Data>
	
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd90      	pop	{r4, r7, pc}

080005fe <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b084      	sub	sp, #16
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	460b      	mov	r3, r1
 8000608:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 800060e:	202c      	movs	r0, #44	; 0x2c
 8000610:	f7ff fe64 	bl	80002dc <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	e006      	b.n	8000628 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 800061a:	887b      	ldrh	r3, [r7, #2]
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff fe6b 	bl	80002f8 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	3301      	adds	r3, #1
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	429a      	cmp	r2, r3
 800062e:	d3f4      	bcc.n	800061a <LCD_FillColor+0x1c>
		
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 800063a:	b590      	push	{r4, r7, lr}
 800063c:	b083      	sub	sp, #12
 800063e:	af00      	add	r7, sp, #0
 8000640:	4604      	mov	r4, r0
 8000642:	4608      	mov	r0, r1
 8000644:	4611      	mov	r1, r2
 8000646:	461a      	mov	r2, r3
 8000648:	4623      	mov	r3, r4
 800064a:	80fb      	strh	r3, [r7, #6]
 800064c:	4603      	mov	r3, r0
 800064e:	80bb      	strh	r3, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	807b      	strh	r3, [r7, #2]
 8000654:	4613      	mov	r3, r2
 8000656:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000658:	883b      	ldrh	r3, [r7, #0]
 800065a:	887a      	ldrh	r2, [r7, #2]
 800065c:	88b9      	ldrh	r1, [r7, #4]
 800065e:	88f8      	ldrh	r0, [r7, #6]
 8000660:	f7ff ff74 	bl	800054c <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000664:	887b      	ldrh	r3, [r7, #2]
 8000666:	883a      	ldrh	r2, [r7, #0]
 8000668:	fb02 f303 	mul.w	r3, r2, r3
 800066c:	461a      	mov	r2, r3
 800066e:	8b3b      	ldrh	r3, [r7, #24]
 8000670:	4619      	mov	r1, r3
 8000672:	4610      	mov	r0, r2
 8000674:	f7ff ffc3 	bl	80005fe <LCD_FillColor>
	
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	bd90      	pop	{r4, r7, pc}

08000680 <LCD_DrawDot>:
}


//Task 2
void LCD_DrawDot(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usColor)	
{	
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	80fb      	strh	r3, [r7, #6]
 800068a:	460b      	mov	r3, r1
 800068c:	80bb      	strh	r3, [r7, #4]
 800068e:	4613      	mov	r3, r2
 8000690:	807b      	strh	r3, [r7, #2]
	/*
	 *  Task 2 : Implement the LCD_DrawDot to turn on a particular dot on the LCD.
	 */

	// Column address set-----------------------------------------------------------
	LCD_Write_Cmd(0x2A);
 8000692:	202a      	movs	r0, #42	; 0x2a
 8000694:	f7ff fe22 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data(usCOLUMN >> 8);
 8000698:	88fb      	ldrh	r3, [r7, #6]
 800069a:	0a1b      	lsrs	r3, r3, #8
 800069c:	b29b      	uxth	r3, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff fe2a 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data(usCOLUMN & 0xff);
 80006a4:	88fb      	ldrh	r3, [r7, #6]
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff fe24 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data(usCOLUMN >> 8);
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	0a1b      	lsrs	r3, r3, #8
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff fe1e 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data(usCOLUMN & 0xff);
 80006bc:	88fb      	ldrh	r3, [r7, #6]
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff fe18 	bl	80002f8 <LCD_Write_Data>

	// Page address set-------------------------------------------------------------
	LCD_Write_Cmd(0x2B);
 80006c8:	202b      	movs	r0, #43	; 0x2b
 80006ca:	f7ff fe07 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data(usPAGE >> 8);
 80006ce:	88bb      	ldrh	r3, [r7, #4]
 80006d0:	0a1b      	lsrs	r3, r3, #8
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff fe0f 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data(usPAGE & 0xff);
 80006da:	88bb      	ldrh	r3, [r7, #4]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	b29b      	uxth	r3, r3
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff fe09 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data(usPAGE >> 8);
 80006e6:	88bb      	ldrh	r3, [r7, #4]
 80006e8:	0a1b      	lsrs	r3, r3, #8
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff fe03 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data(usPAGE & 0xff);
 80006f2:	88bb      	ldrh	r3, [r7, #4]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff fdfd 	bl	80002f8 <LCD_Write_Data>

	// Memory write-----------------------------------------------------------------
	LCD_Write_Cmd(0x2C);
 80006fe:	202c      	movs	r0, #44	; 0x2c
 8000700:	f7ff fdec 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data(usColor);
 8000704:	887b      	ldrh	r3, [r7, #2]
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff fdf6 	bl	80002f8 <LCD_Write_Data>
		
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <movePlatform>:
void XferCpltCallback(DMA_HandleTypeDef* hdma);
uint16_t bufferSrc[] = {0xFFFF, 0xFFFE, 0xFFFD, 0xFFFC};
uint16_t bufferDest[4];

uint16_t currentPos = 0;
void movePlatform(uint16_t xPos) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	80fb      	strh	r3, [r7, #6]
//	for (int y = 0; y < 209; y++) {
//	  HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel1, (uint32_t)(&platformImg[882 * y + xPos]), (uint32_t)0x60020000, 320);
//	  HAL_Delay(1);
//	}

	if (currentPos < xPos) {
 800071e:	4b43      	ldr	r3, [pc, #268]	; (800082c <movePlatform+0x118>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	88fa      	ldrh	r2, [r7, #6]
 8000724:	429a      	cmp	r2, r3
 8000726:	d929      	bls.n	800077c <movePlatform+0x68>
		// Scrolling to the right
		uint16_t targetCol = (xPos - 1) % 320;
 8000728:	88fb      	ldrh	r3, [r7, #6]
 800072a:	1e5a      	subs	r2, r3, #1
 800072c:	4b40      	ldr	r3, [pc, #256]	; (8000830 <movePlatform+0x11c>)
 800072e:	fb83 1302 	smull	r1, r3, r3, r2
 8000732:	11d9      	asrs	r1, r3, #7
 8000734:	17d3      	asrs	r3, r2, #31
 8000736:	1ac9      	subs	r1, r1, r3
 8000738:	460b      	mov	r3, r1
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	440b      	add	r3, r1
 800073e:	019b      	lsls	r3, r3, #6
 8000740:	1ad1      	subs	r1, r2, r3
 8000742:	460b      	mov	r3, r1
 8000744:	813b      	strh	r3, [r7, #8]
		for (uint16_t row = 0; row < 209; row++) {
 8000746:	2300      	movs	r3, #0
 8000748:	81fb      	strh	r3, [r7, #14]
 800074a:	e013      	b.n	8000774 <movePlatform+0x60>
			LCD_DrawDot(targetCol, row, platformImg[882 * row + xPos + 320 - 1]);
 800074c:	89fb      	ldrh	r3, [r7, #14]
 800074e:	f240 3272 	movw	r2, #882	; 0x372
 8000752:	fb03 f202 	mul.w	r2, r3, r2
 8000756:	88fb      	ldrh	r3, [r7, #6]
 8000758:	4413      	add	r3, r2
 800075a:	f203 133f 	addw	r3, r3, #319	; 0x13f
 800075e:	4a35      	ldr	r2, [pc, #212]	; (8000834 <movePlatform+0x120>)
 8000760:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000764:	89f9      	ldrh	r1, [r7, #14]
 8000766:	893b      	ldrh	r3, [r7, #8]
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ff89 	bl	8000680 <LCD_DrawDot>
		for (uint16_t row = 0; row < 209; row++) {
 800076e:	89fb      	ldrh	r3, [r7, #14]
 8000770:	3301      	adds	r3, #1
 8000772:	81fb      	strh	r3, [r7, #14]
 8000774:	89fb      	ldrh	r3, [r7, #14]
 8000776:	2bd0      	cmp	r3, #208	; 0xd0
 8000778:	d9e8      	bls.n	800074c <movePlatform+0x38>
 800077a:	e027      	b.n	80007cc <movePlatform+0xb8>
		}
	} else if (currentPos > xPos) {
 800077c:	4b2b      	ldr	r3, [pc, #172]	; (800082c <movePlatform+0x118>)
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	88fa      	ldrh	r2, [r7, #6]
 8000782:	429a      	cmp	r2, r3
 8000784:	d24d      	bcs.n	8000822 <movePlatform+0x10e>
		// Scrolling to the left
		uint16_t targetCol = xPos % 320;
 8000786:	88fa      	ldrh	r2, [r7, #6]
 8000788:	4b2b      	ldr	r3, [pc, #172]	; (8000838 <movePlatform+0x124>)
 800078a:	fba3 1302 	umull	r1, r3, r3, r2
 800078e:	0a19      	lsrs	r1, r3, #8
 8000790:	460b      	mov	r3, r1
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	440b      	add	r3, r1
 8000796:	019b      	lsls	r3, r3, #6
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	817b      	strh	r3, [r7, #10]
		for (uint16_t row = 0; row < 209; row++) {
 800079c:	2300      	movs	r3, #0
 800079e:	81bb      	strh	r3, [r7, #12]
 80007a0:	e011      	b.n	80007c6 <movePlatform+0xb2>
			LCD_DrawDot(targetCol, row, platformImg[882 * row + xPos]);
 80007a2:	89bb      	ldrh	r3, [r7, #12]
 80007a4:	f240 3272 	movw	r2, #882	; 0x372
 80007a8:	fb03 f202 	mul.w	r2, r3, r2
 80007ac:	88fb      	ldrh	r3, [r7, #6]
 80007ae:	4413      	add	r3, r2
 80007b0:	4a20      	ldr	r2, [pc, #128]	; (8000834 <movePlatform+0x120>)
 80007b2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80007b6:	89b9      	ldrh	r1, [r7, #12]
 80007b8:	897b      	ldrh	r3, [r7, #10]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff ff60 	bl	8000680 <LCD_DrawDot>
		for (uint16_t row = 0; row < 209; row++) {
 80007c0:	89bb      	ldrh	r3, [r7, #12]
 80007c2:	3301      	adds	r3, #1
 80007c4:	81bb      	strh	r3, [r7, #12]
 80007c6:	89bb      	ldrh	r3, [r7, #12]
 80007c8:	2bd0      	cmp	r3, #208	; 0xd0
 80007ca:	d9ea      	bls.n	80007a2 <movePlatform+0x8e>
		}
	} else {
		return;
	}
	currentPos = xPos;
 80007cc:	4a17      	ldr	r2, [pc, #92]	; (800082c <movePlatform+0x118>)
 80007ce:	88fb      	ldrh	r3, [r7, #6]
 80007d0:	8013      	strh	r3, [r2, #0]


	// Vertical scroll, starting from column = xPos
	  LCD_Write_Cmd(0x33);
 80007d2:	2033      	movs	r0, #51	; 0x33
 80007d4:	f7ff fd82 	bl	80002dc <LCD_Write_Cmd>
	  LCD_Write_Data(0x00);
 80007d8:	2000      	movs	r0, #0
 80007da:	f7ff fd8d 	bl	80002f8 <LCD_Write_Data>
	  LCD_Write_Data(0x00);
 80007de:	2000      	movs	r0, #0
 80007e0:	f7ff fd8a 	bl	80002f8 <LCD_Write_Data>
	  LCD_Write_Data(0x01);
 80007e4:	2001      	movs	r0, #1
 80007e6:	f7ff fd87 	bl	80002f8 <LCD_Write_Data>
	  LCD_Write_Data(0x40);
 80007ea:	2040      	movs	r0, #64	; 0x40
 80007ec:	f7ff fd84 	bl	80002f8 <LCD_Write_Data>
	  LCD_Write_Data(0x00);
 80007f0:	2000      	movs	r0, #0
 80007f2:	f7ff fd81 	bl	80002f8 <LCD_Write_Data>
	  LCD_Write_Data(0x00);
 80007f6:	2000      	movs	r0, #0
 80007f8:	f7ff fd7e 	bl	80002f8 <LCD_Write_Data>

	  LCD_Write_Cmd(0x37);
 80007fc:	2037      	movs	r0, #55	; 0x37
 80007fe:	f7ff fd6d 	bl	80002dc <LCD_Write_Cmd>
	  LCD_Write_Data(xPos >> 8);
 8000802:	88fb      	ldrh	r3, [r7, #6]
 8000804:	0a1b      	lsrs	r3, r3, #8
 8000806:	b29b      	uxth	r3, r3
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fd75 	bl	80002f8 <LCD_Write_Data>
	  LCD_Write_Data(xPos & 0xff);
 800080e:	88fb      	ldrh	r3, [r7, #6]
 8000810:	b2db      	uxtb	r3, r3
 8000812:	b29b      	uxth	r3, r3
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fd6f 	bl	80002f8 <LCD_Write_Data>

	  HAL_Delay(50);
 800081a:	2032      	movs	r0, #50	; 0x32
 800081c:	f000 fb1e 	bl	8000e5c <HAL_Delay>
 8000820:	e000      	b.n	8000824 <movePlatform+0x110>
		return;
 8000822:	bf00      	nop
}
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200000b4 	.word	0x200000b4
 8000830:	66666667 	.word	0x66666667
 8000834:	08002530 	.word	0x08002530
 8000838:	cccccccd 	.word	0xcccccccd

0800083c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000842:	f000 faa9 	bl	8000d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000846:	f000 f85d 	bl	8000904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084a:	f000 f8e7 	bl	8000a1c <MX_GPIO_Init>
  MX_DMA_Init();
 800084e:	f000 f89f 	bl	8000990 <MX_DMA_Init>
  MX_FSMC_Init();
 8000852:	f000 f94f 	bl	8000af4 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */

  // Initialize DMA
  hdma_memtomem_dma1_channel1.XferCpltCallback = &XferCpltCallback;
 8000856:	4b27      	ldr	r3, [pc, #156]	; (80008f4 <main+0xb8>)
 8000858:	4a27      	ldr	r2, [pc, #156]	; (80008f8 <main+0xbc>)
 800085a:	629a      	str	r2, [r3, #40]	; 0x28

  LCD_INIT();
 800085c:	f7ff fcf3 	bl	8000246 <LCD_INIT>

  // Change render direction to horizontal
  LCD_Write_Cmd(0x36);
 8000860:	2036      	movs	r0, #54	; 0x36
 8000862:	f7ff fd3b 	bl	80002dc <LCD_Write_Cmd>
  LCD_Write_Data(0x68);
 8000866:	2068      	movs	r0, #104	; 0x68
 8000868:	f7ff fd46 	bl	80002f8 <LCD_Write_Data>

  LCD_OpenWindow(0, 0, 320, 240);
 800086c:	23f0      	movs	r3, #240	; 0xf0
 800086e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000872:	2100      	movs	r1, #0
 8000874:	2000      	movs	r0, #0
 8000876:	f7ff fe69 	bl	800054c <LCD_OpenWindow>
  LCD_Write_Cmd ( CMD_SetPixel );
 800087a:	202c      	movs	r0, #44	; 0x2c
 800087c:	f7ff fd2e 	bl	80002dc <LCD_Write_Cmd>

  // Platform Image
  for (int y = 0; y < 209; y++) {
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	e014      	b.n	80008b0 <main+0x74>
	  HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel1, (uint32_t)(&platformImg[882 * y]), (uint32_t)0x60020000, 320);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f240 3272 	movw	r2, #882	; 0x372
 800088c:	fb02 f303 	mul.w	r3, r2, r3
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	4a1a      	ldr	r2, [pc, #104]	; (80008fc <main+0xc0>)
 8000894:	4413      	add	r3, r2
 8000896:	4619      	mov	r1, r3
 8000898:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800089c:	4a18      	ldr	r2, [pc, #96]	; (8000900 <main+0xc4>)
 800089e:	4815      	ldr	r0, [pc, #84]	; (80008f4 <main+0xb8>)
 80008a0:	f000 fc84 	bl	80011ac <HAL_DMA_Start_IT>
	  HAL_Delay(1);
 80008a4:	2001      	movs	r0, #1
 80008a6:	f000 fad9 	bl	8000e5c <HAL_Delay>
  for (int y = 0; y < 209; y++) {
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	3301      	adds	r3, #1
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2bd0      	cmp	r3, #208	; 0xd0
 80008b4:	dde7      	ble.n	8000886 <main+0x4a>
  }

  for (uint16_t i = 0; i < 50; i++) {
 80008b6:	2300      	movs	r3, #0
 80008b8:	807b      	strh	r3, [r7, #2]
 80008ba:	e006      	b.n	80008ca <main+0x8e>
	  movePlatform(i);
 80008bc:	887b      	ldrh	r3, [r7, #2]
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff ff28 	bl	8000714 <movePlatform>
  for (uint16_t i = 0; i < 50; i++) {
 80008c4:	887b      	ldrh	r3, [r7, #2]
 80008c6:	3301      	adds	r3, #1
 80008c8:	807b      	strh	r3, [r7, #2]
 80008ca:	887b      	ldrh	r3, [r7, #2]
 80008cc:	2b31      	cmp	r3, #49	; 0x31
 80008ce:	d9f5      	bls.n	80008bc <main+0x80>
  }

  HAL_Delay(2000);
 80008d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008d4:	f000 fac2 	bl	8000e5c <HAL_Delay>

  for (uint16_t i = 49; i > 0; i--) {
 80008d8:	2331      	movs	r3, #49	; 0x31
 80008da:	803b      	strh	r3, [r7, #0]
 80008dc:	e006      	b.n	80008ec <main+0xb0>
	  movePlatform(i);
 80008de:	883b      	ldrh	r3, [r7, #0]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ff17 	bl	8000714 <movePlatform>
  for (uint16_t i = 49; i > 0; i--) {
 80008e6:	883b      	ldrh	r3, [r7, #0]
 80008e8:	3b01      	subs	r3, #1
 80008ea:	803b      	strh	r3, [r7, #0]
 80008ec:	883b      	ldrh	r3, [r7, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d1f5      	bne.n	80008de <main+0xa2>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <main+0xb6>
 80008f4:	20000028 	.word	0x20000028
 80008f8:	08000bbd 	.word	0x08000bbd
 80008fc:	08002530 	.word	0x08002530
 8000900:	60020000 	.word	0x60020000

08000904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b090      	sub	sp, #64	; 0x40
 8000908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	f107 0318 	add.w	r3, r7, #24
 800090e:	2228      	movs	r2, #40	; 0x28
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f001 fdf0 	bl	80024f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000926:	2301      	movs	r3, #1
 8000928:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800092a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800092e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000934:	2301      	movs	r3, #1
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000938:	2302      	movs	r3, #2
 800093a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800093c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000940:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000942:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000946:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000948:	f107 0318 	add.w	r3, r7, #24
 800094c:	4618      	mov	r0, r3
 800094e:	f001 f8a3 	bl	8001a98 <HAL_RCC_OscConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000958:	f000 f93a 	bl	8000bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095c:	230f      	movs	r3, #15
 800095e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000960:	2302      	movs	r3, #2
 8000962:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800096c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2102      	movs	r1, #2
 8000976:	4618      	mov	r0, r3
 8000978:	f001 fb10 	bl	8001f9c <HAL_RCC_ClockConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000982:	f000 f925 	bl	8000bd0 <Error_Handler>
  }
}
 8000986:	bf00      	nop
 8000988:	3740      	adds	r7, #64	; 0x40
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
static void MX_DMA_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000996:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <MX_DMA_Init+0x80>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	4a1d      	ldr	r2, [pc, #116]	; (8000a10 <MX_DMA_Init+0x80>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6153      	str	r3, [r2, #20]
 80009a2:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <MX_DMA_Init+0x80>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 80009ae:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <MX_DMA_Init+0x84>)
 80009b0:	4a19      	ldr	r2, [pc, #100]	; (8000a18 <MX_DMA_Init+0x88>)
 80009b2:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <MX_DMA_Init+0x84>)
 80009b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ba:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 80009bc:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <MX_DMA_Init+0x84>)
 80009be:	2240      	movs	r2, #64	; 0x40
 80009c0:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_DISABLE;
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_DMA_Init+0x84>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <MX_DMA_Init+0x84>)
 80009ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009ce:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009d0:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_DMA_Init+0x84>)
 80009d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009d6:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_DMA_Init+0x84>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_HIGH;
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <MX_DMA_Init+0x84>)
 80009e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009e4:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 80009e6:	480b      	ldr	r0, [pc, #44]	; (8000a14 <MX_DMA_Init+0x84>)
 80009e8:	f000 fb6a 	bl	80010c0 <HAL_DMA_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_DMA_Init+0x66>
  {
    Error_Handler( );
 80009f2:	f000 f8ed 	bl	8000bd0 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2100      	movs	r1, #0
 80009fa:	200b      	movs	r0, #11
 80009fc:	f000 fb29 	bl	8001052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a00:	200b      	movs	r0, #11
 8000a02:	f000 fb42 	bl	800108a <HAL_NVIC_EnableIRQ>

}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40021000 	.word	0x40021000
 8000a14:	20000028 	.word	0x20000028
 8000a18:	40020008 	.word	0x40020008

08000a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a22:	f107 0310 	add.w	r3, r7, #16
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a30:	4b2d      	ldr	r3, [pc, #180]	; (8000ae8 <MX_GPIO_Init+0xcc>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a2c      	ldr	r2, [pc, #176]	; (8000ae8 <MX_GPIO_Init+0xcc>)
 8000a36:	f043 0310 	orr.w	r3, r3, #16
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ae8 <MX_GPIO_Init+0xcc>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f003 0310 	and.w	r3, r3, #16
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a48:	4b27      	ldr	r3, [pc, #156]	; (8000ae8 <MX_GPIO_Init+0xcc>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4a26      	ldr	r2, [pc, #152]	; (8000ae8 <MX_GPIO_Init+0xcc>)
 8000a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <MX_GPIO_Init+0xcc>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a60:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <MX_GPIO_Init+0xcc>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a20      	ldr	r2, [pc, #128]	; (8000ae8 <MX_GPIO_Init+0xcc>)
 8000a66:	f043 0320 	orr.w	r3, r3, #32
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ae8 <MX_GPIO_Init+0xcc>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0320 	and.w	r3, r3, #32
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a78:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <MX_GPIO_Init+0xcc>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a1a      	ldr	r2, [pc, #104]	; (8000ae8 <MX_GPIO_Init+0xcc>)
 8000a7e:	f043 0304 	orr.w	r3, r3, #4
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <MX_GPIO_Init+0xcc>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f003 0304 	and.w	r3, r3, #4
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a96:	4815      	ldr	r0, [pc, #84]	; (8000aec <MX_GPIO_Init+0xd0>)
 8000a98:	f000 ffe6 	bl	8001a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2102      	movs	r1, #2
 8000aa0:	4813      	ldr	r0, [pc, #76]	; (8000af0 <MX_GPIO_Init+0xd4>)
 8000aa2:	f000 ffe1 	bl	8001a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab8:	f107 0310 	add.w	r3, r7, #16
 8000abc:	4619      	mov	r1, r3
 8000abe:	480b      	ldr	r0, [pc, #44]	; (8000aec <MX_GPIO_Init+0xd0>)
 8000ac0:	f000 fe3e 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ad4:	f107 0310 	add.w	r3, r7, #16
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_GPIO_Init+0xd4>)
 8000adc:	f000 fe30 	bl	8001740 <HAL_GPIO_Init>

}
 8000ae0:	bf00      	nop
 8000ae2:	3720      	adds	r7, #32
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40011400 	.word	0x40011400
 8000af0:	40011800 	.word	0x40011800

08000af4 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
 8000b08:	615a      	str	r2, [r3, #20]
 8000b0a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000b0c:	4b28      	ldr	r3, [pc, #160]	; (8000bb0 <MX_FSMC_Init+0xbc>)
 8000b0e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000b12:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000b14:	4b26      	ldr	r3, [pc, #152]	; (8000bb0 <MX_FSMC_Init+0xbc>)
 8000b16:	4a27      	ldr	r2, [pc, #156]	; (8000bb4 <MX_FSMC_Init+0xc0>)
 8000b18:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000b1a:	4b25      	ldr	r3, [pc, #148]	; (8000bb0 <MX_FSMC_Init+0xbc>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000b20:	4b23      	ldr	r3, [pc, #140]	; (8000bb0 <MX_FSMC_Init+0xbc>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000b26:	4b22      	ldr	r3, [pc, #136]	; (8000bb0 <MX_FSMC_Init+0xbc>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000b2c:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <MX_FSMC_Init+0xbc>)
 8000b2e:	2210      	movs	r2, #16
 8000b30:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000b32:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <MX_FSMC_Init+0xbc>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000b38:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <MX_FSMC_Init+0xbc>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <MX_FSMC_Init+0xbc>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000b44:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <MX_FSMC_Init+0xbc>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000b4a:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <MX_FSMC_Init+0xbc>)
 8000b4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b50:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000b52:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <MX_FSMC_Init+0xbc>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000b58:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <MX_FSMC_Init+0xbc>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000b5e:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <MX_FSMC_Init+0xbc>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <MX_FSMC_Init+0xbc>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000b6a:	230f      	movs	r3, #15
 8000b6c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000b6e:	230f      	movs	r3, #15
 8000b70:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000b72:	23ff      	movs	r3, #255	; 0xff
 8000b74:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000b76:	230f      	movs	r3, #15
 8000b78:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000b7a:	2310      	movs	r3, #16
 8000b7c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000b7e:	2311      	movs	r3, #17
 8000b80:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4808      	ldr	r0, [pc, #32]	; (8000bb0 <MX_FSMC_Init+0xbc>)
 8000b8e:	f001 fb6b 	bl	8002268 <HAL_SRAM_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8000b98:	f000 f81a 	bl	8000bd0 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <MX_FSMC_Init+0xc4>)
 8000b9e:	69db      	ldr	r3, [r3, #28]
 8000ba0:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <MX_FSMC_Init+0xc4>)
 8000ba2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ba6:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000ba8:	bf00      	nop
 8000baa:	3720      	adds	r7, #32
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	2000006c 	.word	0x2000006c
 8000bb4:	a0000104 	.word	0xa0000104
 8000bb8:	40010000 	.word	0x40010000

08000bbc <XferCpltCallback>:

/* USER CODE BEGIN 4 */

void XferCpltCallback(DMA_HandleTypeDef* hdma) {
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	__NOP();
 8000bc4:	bf00      	nop
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <Error_Handler+0x8>
	...

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <HAL_MspInit+0x5c>)
 8000be4:	699b      	ldr	r3, [r3, #24]
 8000be6:	4a14      	ldr	r2, [pc, #80]	; (8000c38 <HAL_MspInit+0x5c>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6193      	str	r3, [r2, #24]
 8000bee:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <HAL_MspInit+0x5c>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <HAL_MspInit+0x5c>)
 8000bfc:	69db      	ldr	r3, [r3, #28]
 8000bfe:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <HAL_MspInit+0x5c>)
 8000c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c04:	61d3      	str	r3, [r2, #28]
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <HAL_MspInit+0x5c>)
 8000c08:	69db      	ldr	r3, [r3, #28]
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c12:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <HAL_MspInit+0x60>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <HAL_MspInit+0x60>)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40010000 	.word	0x40010000

08000c40 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000c46:	f107 0308 	add.w	r3, r7, #8
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000c54:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <HAL_FSMC_MspInit+0x78>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d129      	bne.n	8000cb0 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8000c5c:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <HAL_FSMC_MspInit+0x78>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000c62:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <HAL_FSMC_MspInit+0x7c>)
 8000c64:	695b      	ldr	r3, [r3, #20]
 8000c66:	4a15      	ldr	r2, [pc, #84]	; (8000cbc <HAL_FSMC_MspInit+0x7c>)
 8000c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c6c:	6153      	str	r3, [r2, #20]
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <HAL_FSMC_MspInit+0x7c>)
 8000c70:	695b      	ldr	r3, [r3, #20]
 8000c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000c7a:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000c7e:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c84:	2303      	movs	r3, #3
 8000c86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c88:	f107 0308 	add.w	r3, r7, #8
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	480c      	ldr	r0, [pc, #48]	; (8000cc0 <HAL_FSMC_MspInit+0x80>)
 8000c90:	f000 fd56 	bl	8001740 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000c94:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8000c98:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca2:	f107 0308 	add.w	r3, r7, #8
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4806      	ldr	r0, [pc, #24]	; (8000cc4 <HAL_FSMC_MspInit+0x84>)
 8000caa:	f000 fd49 	bl	8001740 <HAL_GPIO_Init>
 8000cae:	e000      	b.n	8000cb2 <HAL_FSMC_MspInit+0x72>
    return;
 8000cb0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	200000b8 	.word	0x200000b8
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40011800 	.word	0x40011800
 8000cc4:	40011400 	.word	0x40011400

08000cc8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000cd0:	f7ff ffb6 	bl	8000c40 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <NMI_Handler+0x4>

08000ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <HardFault_Handler+0x4>

08000ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <MemManage_Handler+0x4>

08000cee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <BusFault_Handler+0x4>

08000cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <UsageFault_Handler+0x4>

08000cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr

08000d06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr

08000d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr

08000d1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d22:	f000 f87f 	bl	8000e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 8000d30:	4802      	ldr	r0, [pc, #8]	; (8000d3c <DMA1_Channel1_IRQHandler+0x10>)
 8000d32:	f000 fa9b 	bl	800126c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000028 	.word	0x20000028

08000d40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr

08000d4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d4c:	480c      	ldr	r0, [pc, #48]	; (8000d80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d4e:	490d      	ldr	r1, [pc, #52]	; (8000d84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d50:	4a0d      	ldr	r2, [pc, #52]	; (8000d88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d54:	e002      	b.n	8000d5c <LoopCopyDataInit>

08000d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5a:	3304      	adds	r3, #4

08000d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d60:	d3f9      	bcc.n	8000d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d64:	4c0a      	ldr	r4, [pc, #40]	; (8000d90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d68:	e001      	b.n	8000d6e <LoopFillZerobss>

08000d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d6c:	3204      	adds	r2, #4

08000d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d70:	d3fb      	bcc.n	8000d6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d72:	f7ff ffe5 	bl	8000d40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d76:	f001 fb9b 	bl	80024b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d7a:	f7ff fd5f 	bl	800083c <main>
  bx lr
 8000d7e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d88:	0805c56c 	.word	0x0805c56c
  ldr r2, =_sbss
 8000d8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d90:	200000c0 	.word	0x200000c0

08000d94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC1_2_IRQHandler>
	...

08000d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <HAL_Init+0x28>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <HAL_Init+0x28>)
 8000da2:	f043 0310 	orr.w	r3, r3, #16
 8000da6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da8:	2003      	movs	r0, #3
 8000daa:	f000 f947 	bl	800103c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dae:	200f      	movs	r0, #15
 8000db0:	f000 f808 	bl	8000dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db4:	f7ff ff12 	bl	8000bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40022000 	.word	0x40022000

08000dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_InitTick+0x54>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_InitTick+0x58>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 f95f 	bl	80010a6 <HAL_SYSTICK_Config>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e00e      	b.n	8000e10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b0f      	cmp	r3, #15
 8000df6:	d80a      	bhi.n	8000e0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	6879      	ldr	r1, [r7, #4]
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000e00:	f000 f927 	bl	8001052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e04:	4a06      	ldr	r2, [pc, #24]	; (8000e20 <HAL_InitTick+0x5c>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e000      	b.n	8000e10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	20000004 	.word	0x20000004

08000e24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <HAL_IncTick+0x1c>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <HAL_IncTick+0x20>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4413      	add	r3, r2
 8000e34:	4a03      	ldr	r2, [pc, #12]	; (8000e44 <HAL_IncTick+0x20>)
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	20000008 	.word	0x20000008
 8000e44:	200000bc 	.word	0x200000bc

08000e48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b02      	ldr	r3, [pc, #8]	; (8000e58 <HAL_GetTick+0x10>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	200000bc 	.word	0x200000bc

08000e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e64:	f7ff fff0 	bl	8000e48 <HAL_GetTick>
 8000e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e74:	d005      	beq.n	8000e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <HAL_Delay+0x44>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4413      	add	r3, r2
 8000e80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e82:	bf00      	nop
 8000e84:	f7ff ffe0 	bl	8000e48 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d8f7      	bhi.n	8000e84 <HAL_Delay+0x28>
  {
  }
}
 8000e94:	bf00      	nop
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008

08000ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ecc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed6:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	60d3      	str	r3, [r2, #12]
}
 8000edc:	bf00      	nop
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	0a1b      	lsrs	r3, r3, #8
 8000ef6:	f003 0307 	and.w	r3, r3, #7
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	db0b      	blt.n	8000f32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	f003 021f 	and.w	r2, r3, #31
 8000f20:	4906      	ldr	r1, [pc, #24]	; (8000f3c <__NVIC_EnableIRQ+0x34>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	095b      	lsrs	r3, r3, #5
 8000f28:	2001      	movs	r0, #1
 8000f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr
 8000f3c:	e000e100 	.word	0xe000e100

08000f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	6039      	str	r1, [r7, #0]
 8000f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	db0a      	blt.n	8000f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	490c      	ldr	r1, [pc, #48]	; (8000f8c <__NVIC_SetPriority+0x4c>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	0112      	lsls	r2, r2, #4
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	440b      	add	r3, r1
 8000f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f68:	e00a      	b.n	8000f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4908      	ldr	r1, [pc, #32]	; (8000f90 <__NVIC_SetPriority+0x50>)
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	f003 030f 	and.w	r3, r3, #15
 8000f76:	3b04      	subs	r3, #4
 8000f78:	0112      	lsls	r2, r2, #4
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	761a      	strb	r2, [r3, #24]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000e100 	.word	0xe000e100
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	; 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f1c3 0307 	rsb	r3, r3, #7
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	bf28      	it	cs
 8000fb2:	2304      	movcs	r3, #4
 8000fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	2b06      	cmp	r3, #6
 8000fbc:	d902      	bls.n	8000fc4 <NVIC_EncodePriority+0x30>
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3b03      	subs	r3, #3
 8000fc2:	e000      	b.n	8000fc6 <NVIC_EncodePriority+0x32>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	43d9      	mvns	r1, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	4313      	orrs	r3, r2
         );
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3724      	adds	r7, #36	; 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3b01      	subs	r3, #1
 8001004:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001008:	d301      	bcc.n	800100e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100a:	2301      	movs	r3, #1
 800100c:	e00f      	b.n	800102e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <SysTick_Config+0x40>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001016:	210f      	movs	r1, #15
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f7ff ff90 	bl	8000f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <SysTick_Config+0x40>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001026:	4b04      	ldr	r3, [pc, #16]	; (8001038 <SysTick_Config+0x40>)
 8001028:	2207      	movs	r2, #7
 800102a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	e000e010 	.word	0xe000e010

0800103c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ff2d 	bl	8000ea4 <__NVIC_SetPriorityGrouping>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
 800105e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001064:	f7ff ff42 	bl	8000eec <__NVIC_GetPriorityGrouping>
 8001068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	68b9      	ldr	r1, [r7, #8]
 800106e:	6978      	ldr	r0, [r7, #20]
 8001070:	f7ff ff90 	bl	8000f94 <NVIC_EncodePriority>
 8001074:	4602      	mov	r2, r0
 8001076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107a:	4611      	mov	r1, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff5f 	bl	8000f40 <__NVIC_SetPriority>
}
 8001082:	bf00      	nop
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff35 	bl	8000f08 <__NVIC_EnableIRQ>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ffa2 	bl	8000ff8 <SysTick_Config>
 80010b4:	4603      	mov	r3, r0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e059      	b.n	800118a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	4b2d      	ldr	r3, [pc, #180]	; (8001194 <HAL_DMA_Init+0xd4>)
 80010de:	429a      	cmp	r2, r3
 80010e0:	d80f      	bhi.n	8001102 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	461a      	mov	r2, r3
 80010e8:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <HAL_DMA_Init+0xd8>)
 80010ea:	4413      	add	r3, r2
 80010ec:	4a2b      	ldr	r2, [pc, #172]	; (800119c <HAL_DMA_Init+0xdc>)
 80010ee:	fba2 2303 	umull	r2, r3, r2, r3
 80010f2:	091b      	lsrs	r3, r3, #4
 80010f4:	009a      	lsls	r2, r3, #2
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a28      	ldr	r2, [pc, #160]	; (80011a0 <HAL_DMA_Init+0xe0>)
 80010fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001100:	e00e      	b.n	8001120 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	461a      	mov	r2, r3
 8001108:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <HAL_DMA_Init+0xe4>)
 800110a:	4413      	add	r3, r2
 800110c:	4a23      	ldr	r2, [pc, #140]	; (800119c <HAL_DMA_Init+0xdc>)
 800110e:	fba2 2303 	umull	r2, r3, r2, r3
 8001112:	091b      	lsrs	r3, r3, #4
 8001114:	009a      	lsls	r2, r3, #2
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a22      	ldr	r2, [pc, #136]	; (80011a8 <HAL_DMA_Init+0xe8>)
 800111e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2202      	movs	r2, #2
 8001124:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001136:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800113a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001144:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001150:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800115c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	4313      	orrs	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	40020407 	.word	0x40020407
 8001198:	bffdfff8 	.word	0xbffdfff8
 800119c:	cccccccd 	.word	0xcccccccd
 80011a0:	40020000 	.word	0x40020000
 80011a4:	bffdfbf8 	.word	0xbffdfbf8
 80011a8:	40020400 	.word	0x40020400

080011ac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
 80011b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d101      	bne.n	80011cc <HAL_DMA_Start_IT+0x20>
 80011c8:	2302      	movs	r3, #2
 80011ca:	e04a      	b.n	8001262 <HAL_DMA_Start_IT+0xb6>
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2201      	movs	r2, #1
 80011d0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d13a      	bne.n	8001254 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2202      	movs	r2, #2
 80011e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2200      	movs	r2, #0
 80011ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f022 0201 	bic.w	r2, r2, #1
 80011fa:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	68b9      	ldr	r1, [r7, #8]
 8001202:	68f8      	ldr	r0, [r7, #12]
 8001204:	f000 fa6e 	bl	80016e4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120c:	2b00      	cmp	r3, #0
 800120e:	d008      	beq.n	8001222 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 020e 	orr.w	r2, r2, #14
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	e00f      	b.n	8001242 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f022 0204 	bic.w	r2, r2, #4
 8001230:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f042 020a 	orr.w	r2, r2, #10
 8001240:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f042 0201 	orr.w	r2, r2, #1
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	e005      	b.n	8001260 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800125c:	2302      	movs	r3, #2
 800125e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001260:	7dfb      	ldrb	r3, [r7, #23]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	2204      	movs	r2, #4
 800128a:	409a      	lsls	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4013      	ands	r3, r2
 8001290:	2b00      	cmp	r3, #0
 8001292:	f000 80f1 	beq.w	8001478 <HAL_DMA_IRQHandler+0x20c>
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	2b00      	cmp	r3, #0
 800129e:	f000 80eb 	beq.w	8001478 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0320 	and.w	r3, r3, #32
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d107      	bne.n	80012c0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f022 0204 	bic.w	r2, r2, #4
 80012be:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b5f      	ldr	r3, [pc, #380]	; (8001444 <HAL_DMA_IRQHandler+0x1d8>)
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d958      	bls.n	800137e <HAL_DMA_IRQHandler+0x112>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a5d      	ldr	r2, [pc, #372]	; (8001448 <HAL_DMA_IRQHandler+0x1dc>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d04f      	beq.n	8001376 <HAL_DMA_IRQHandler+0x10a>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a5c      	ldr	r2, [pc, #368]	; (800144c <HAL_DMA_IRQHandler+0x1e0>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d048      	beq.n	8001372 <HAL_DMA_IRQHandler+0x106>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a5a      	ldr	r2, [pc, #360]	; (8001450 <HAL_DMA_IRQHandler+0x1e4>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d040      	beq.n	800136c <HAL_DMA_IRQHandler+0x100>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a59      	ldr	r2, [pc, #356]	; (8001454 <HAL_DMA_IRQHandler+0x1e8>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d038      	beq.n	8001366 <HAL_DMA_IRQHandler+0xfa>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a57      	ldr	r2, [pc, #348]	; (8001458 <HAL_DMA_IRQHandler+0x1ec>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d030      	beq.n	8001360 <HAL_DMA_IRQHandler+0xf4>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a56      	ldr	r2, [pc, #344]	; (800145c <HAL_DMA_IRQHandler+0x1f0>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d028      	beq.n	800135a <HAL_DMA_IRQHandler+0xee>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a4d      	ldr	r2, [pc, #308]	; (8001444 <HAL_DMA_IRQHandler+0x1d8>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d020      	beq.n	8001354 <HAL_DMA_IRQHandler+0xe8>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a52      	ldr	r2, [pc, #328]	; (8001460 <HAL_DMA_IRQHandler+0x1f4>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d019      	beq.n	8001350 <HAL_DMA_IRQHandler+0xe4>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a50      	ldr	r2, [pc, #320]	; (8001464 <HAL_DMA_IRQHandler+0x1f8>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d012      	beq.n	800134c <HAL_DMA_IRQHandler+0xe0>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a4f      	ldr	r2, [pc, #316]	; (8001468 <HAL_DMA_IRQHandler+0x1fc>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d00a      	beq.n	8001346 <HAL_DMA_IRQHandler+0xda>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a4d      	ldr	r2, [pc, #308]	; (800146c <HAL_DMA_IRQHandler+0x200>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d102      	bne.n	8001340 <HAL_DMA_IRQHandler+0xd4>
 800133a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800133e:	e01b      	b.n	8001378 <HAL_DMA_IRQHandler+0x10c>
 8001340:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001344:	e018      	b.n	8001378 <HAL_DMA_IRQHandler+0x10c>
 8001346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800134a:	e015      	b.n	8001378 <HAL_DMA_IRQHandler+0x10c>
 800134c:	2340      	movs	r3, #64	; 0x40
 800134e:	e013      	b.n	8001378 <HAL_DMA_IRQHandler+0x10c>
 8001350:	2304      	movs	r3, #4
 8001352:	e011      	b.n	8001378 <HAL_DMA_IRQHandler+0x10c>
 8001354:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001358:	e00e      	b.n	8001378 <HAL_DMA_IRQHandler+0x10c>
 800135a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800135e:	e00b      	b.n	8001378 <HAL_DMA_IRQHandler+0x10c>
 8001360:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001364:	e008      	b.n	8001378 <HAL_DMA_IRQHandler+0x10c>
 8001366:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800136a:	e005      	b.n	8001378 <HAL_DMA_IRQHandler+0x10c>
 800136c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001370:	e002      	b.n	8001378 <HAL_DMA_IRQHandler+0x10c>
 8001372:	2340      	movs	r3, #64	; 0x40
 8001374:	e000      	b.n	8001378 <HAL_DMA_IRQHandler+0x10c>
 8001376:	2304      	movs	r3, #4
 8001378:	4a3d      	ldr	r2, [pc, #244]	; (8001470 <HAL_DMA_IRQHandler+0x204>)
 800137a:	6053      	str	r3, [r2, #4]
 800137c:	e057      	b.n	800142e <HAL_DMA_IRQHandler+0x1c2>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a31      	ldr	r2, [pc, #196]	; (8001448 <HAL_DMA_IRQHandler+0x1dc>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d04f      	beq.n	8001428 <HAL_DMA_IRQHandler+0x1bc>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a2f      	ldr	r2, [pc, #188]	; (800144c <HAL_DMA_IRQHandler+0x1e0>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d048      	beq.n	8001424 <HAL_DMA_IRQHandler+0x1b8>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a2e      	ldr	r2, [pc, #184]	; (8001450 <HAL_DMA_IRQHandler+0x1e4>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d040      	beq.n	800141e <HAL_DMA_IRQHandler+0x1b2>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a2c      	ldr	r2, [pc, #176]	; (8001454 <HAL_DMA_IRQHandler+0x1e8>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d038      	beq.n	8001418 <HAL_DMA_IRQHandler+0x1ac>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a2b      	ldr	r2, [pc, #172]	; (8001458 <HAL_DMA_IRQHandler+0x1ec>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d030      	beq.n	8001412 <HAL_DMA_IRQHandler+0x1a6>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a29      	ldr	r2, [pc, #164]	; (800145c <HAL_DMA_IRQHandler+0x1f0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d028      	beq.n	800140c <HAL_DMA_IRQHandler+0x1a0>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a21      	ldr	r2, [pc, #132]	; (8001444 <HAL_DMA_IRQHandler+0x1d8>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d020      	beq.n	8001406 <HAL_DMA_IRQHandler+0x19a>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a25      	ldr	r2, [pc, #148]	; (8001460 <HAL_DMA_IRQHandler+0x1f4>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d019      	beq.n	8001402 <HAL_DMA_IRQHandler+0x196>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a24      	ldr	r2, [pc, #144]	; (8001464 <HAL_DMA_IRQHandler+0x1f8>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d012      	beq.n	80013fe <HAL_DMA_IRQHandler+0x192>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a22      	ldr	r2, [pc, #136]	; (8001468 <HAL_DMA_IRQHandler+0x1fc>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d00a      	beq.n	80013f8 <HAL_DMA_IRQHandler+0x18c>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a21      	ldr	r2, [pc, #132]	; (800146c <HAL_DMA_IRQHandler+0x200>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d102      	bne.n	80013f2 <HAL_DMA_IRQHandler+0x186>
 80013ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013f0:	e01b      	b.n	800142a <HAL_DMA_IRQHandler+0x1be>
 80013f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80013f6:	e018      	b.n	800142a <HAL_DMA_IRQHandler+0x1be>
 80013f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013fc:	e015      	b.n	800142a <HAL_DMA_IRQHandler+0x1be>
 80013fe:	2340      	movs	r3, #64	; 0x40
 8001400:	e013      	b.n	800142a <HAL_DMA_IRQHandler+0x1be>
 8001402:	2304      	movs	r3, #4
 8001404:	e011      	b.n	800142a <HAL_DMA_IRQHandler+0x1be>
 8001406:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800140a:	e00e      	b.n	800142a <HAL_DMA_IRQHandler+0x1be>
 800140c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001410:	e00b      	b.n	800142a <HAL_DMA_IRQHandler+0x1be>
 8001412:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001416:	e008      	b.n	800142a <HAL_DMA_IRQHandler+0x1be>
 8001418:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800141c:	e005      	b.n	800142a <HAL_DMA_IRQHandler+0x1be>
 800141e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001422:	e002      	b.n	800142a <HAL_DMA_IRQHandler+0x1be>
 8001424:	2340      	movs	r3, #64	; 0x40
 8001426:	e000      	b.n	800142a <HAL_DMA_IRQHandler+0x1be>
 8001428:	2304      	movs	r3, #4
 800142a:	4a12      	ldr	r2, [pc, #72]	; (8001474 <HAL_DMA_IRQHandler+0x208>)
 800142c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 8136 	beq.w	80016a4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001440:	e130      	b.n	80016a4 <HAL_DMA_IRQHandler+0x438>
 8001442:	bf00      	nop
 8001444:	40020080 	.word	0x40020080
 8001448:	40020008 	.word	0x40020008
 800144c:	4002001c 	.word	0x4002001c
 8001450:	40020030 	.word	0x40020030
 8001454:	40020044 	.word	0x40020044
 8001458:	40020058 	.word	0x40020058
 800145c:	4002006c 	.word	0x4002006c
 8001460:	40020408 	.word	0x40020408
 8001464:	4002041c 	.word	0x4002041c
 8001468:	40020430 	.word	0x40020430
 800146c:	40020444 	.word	0x40020444
 8001470:	40020400 	.word	0x40020400
 8001474:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	2202      	movs	r2, #2
 800147e:	409a      	lsls	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4013      	ands	r3, r2
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 80dd 	beq.w	8001644 <HAL_DMA_IRQHandler+0x3d8>
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 80d7 	beq.w	8001644 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0320 	and.w	r3, r3, #32
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d10b      	bne.n	80014bc <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 020a 	bic.w	r2, r2, #10
 80014b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b7b      	ldr	r3, [pc, #492]	; (80016b0 <HAL_DMA_IRQHandler+0x444>)
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d958      	bls.n	800157a <HAL_DMA_IRQHandler+0x30e>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a79      	ldr	r2, [pc, #484]	; (80016b4 <HAL_DMA_IRQHandler+0x448>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d04f      	beq.n	8001572 <HAL_DMA_IRQHandler+0x306>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a78      	ldr	r2, [pc, #480]	; (80016b8 <HAL_DMA_IRQHandler+0x44c>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d048      	beq.n	800156e <HAL_DMA_IRQHandler+0x302>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a76      	ldr	r2, [pc, #472]	; (80016bc <HAL_DMA_IRQHandler+0x450>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d040      	beq.n	8001568 <HAL_DMA_IRQHandler+0x2fc>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a75      	ldr	r2, [pc, #468]	; (80016c0 <HAL_DMA_IRQHandler+0x454>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d038      	beq.n	8001562 <HAL_DMA_IRQHandler+0x2f6>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a73      	ldr	r2, [pc, #460]	; (80016c4 <HAL_DMA_IRQHandler+0x458>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d030      	beq.n	800155c <HAL_DMA_IRQHandler+0x2f0>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a72      	ldr	r2, [pc, #456]	; (80016c8 <HAL_DMA_IRQHandler+0x45c>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d028      	beq.n	8001556 <HAL_DMA_IRQHandler+0x2ea>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a69      	ldr	r2, [pc, #420]	; (80016b0 <HAL_DMA_IRQHandler+0x444>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d020      	beq.n	8001550 <HAL_DMA_IRQHandler+0x2e4>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a6e      	ldr	r2, [pc, #440]	; (80016cc <HAL_DMA_IRQHandler+0x460>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d019      	beq.n	800154c <HAL_DMA_IRQHandler+0x2e0>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a6c      	ldr	r2, [pc, #432]	; (80016d0 <HAL_DMA_IRQHandler+0x464>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d012      	beq.n	8001548 <HAL_DMA_IRQHandler+0x2dc>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a6b      	ldr	r2, [pc, #428]	; (80016d4 <HAL_DMA_IRQHandler+0x468>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d00a      	beq.n	8001542 <HAL_DMA_IRQHandler+0x2d6>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a69      	ldr	r2, [pc, #420]	; (80016d8 <HAL_DMA_IRQHandler+0x46c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d102      	bne.n	800153c <HAL_DMA_IRQHandler+0x2d0>
 8001536:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800153a:	e01b      	b.n	8001574 <HAL_DMA_IRQHandler+0x308>
 800153c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001540:	e018      	b.n	8001574 <HAL_DMA_IRQHandler+0x308>
 8001542:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001546:	e015      	b.n	8001574 <HAL_DMA_IRQHandler+0x308>
 8001548:	2320      	movs	r3, #32
 800154a:	e013      	b.n	8001574 <HAL_DMA_IRQHandler+0x308>
 800154c:	2302      	movs	r3, #2
 800154e:	e011      	b.n	8001574 <HAL_DMA_IRQHandler+0x308>
 8001550:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001554:	e00e      	b.n	8001574 <HAL_DMA_IRQHandler+0x308>
 8001556:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800155a:	e00b      	b.n	8001574 <HAL_DMA_IRQHandler+0x308>
 800155c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001560:	e008      	b.n	8001574 <HAL_DMA_IRQHandler+0x308>
 8001562:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001566:	e005      	b.n	8001574 <HAL_DMA_IRQHandler+0x308>
 8001568:	f44f 7300 	mov.w	r3, #512	; 0x200
 800156c:	e002      	b.n	8001574 <HAL_DMA_IRQHandler+0x308>
 800156e:	2320      	movs	r3, #32
 8001570:	e000      	b.n	8001574 <HAL_DMA_IRQHandler+0x308>
 8001572:	2302      	movs	r3, #2
 8001574:	4a59      	ldr	r2, [pc, #356]	; (80016dc <HAL_DMA_IRQHandler+0x470>)
 8001576:	6053      	str	r3, [r2, #4]
 8001578:	e057      	b.n	800162a <HAL_DMA_IRQHandler+0x3be>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a4d      	ldr	r2, [pc, #308]	; (80016b4 <HAL_DMA_IRQHandler+0x448>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d04f      	beq.n	8001624 <HAL_DMA_IRQHandler+0x3b8>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a4b      	ldr	r2, [pc, #300]	; (80016b8 <HAL_DMA_IRQHandler+0x44c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d048      	beq.n	8001620 <HAL_DMA_IRQHandler+0x3b4>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a4a      	ldr	r2, [pc, #296]	; (80016bc <HAL_DMA_IRQHandler+0x450>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d040      	beq.n	800161a <HAL_DMA_IRQHandler+0x3ae>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a48      	ldr	r2, [pc, #288]	; (80016c0 <HAL_DMA_IRQHandler+0x454>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d038      	beq.n	8001614 <HAL_DMA_IRQHandler+0x3a8>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a47      	ldr	r2, [pc, #284]	; (80016c4 <HAL_DMA_IRQHandler+0x458>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d030      	beq.n	800160e <HAL_DMA_IRQHandler+0x3a2>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a45      	ldr	r2, [pc, #276]	; (80016c8 <HAL_DMA_IRQHandler+0x45c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d028      	beq.n	8001608 <HAL_DMA_IRQHandler+0x39c>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a3d      	ldr	r2, [pc, #244]	; (80016b0 <HAL_DMA_IRQHandler+0x444>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d020      	beq.n	8001602 <HAL_DMA_IRQHandler+0x396>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a41      	ldr	r2, [pc, #260]	; (80016cc <HAL_DMA_IRQHandler+0x460>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d019      	beq.n	80015fe <HAL_DMA_IRQHandler+0x392>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a40      	ldr	r2, [pc, #256]	; (80016d0 <HAL_DMA_IRQHandler+0x464>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d012      	beq.n	80015fa <HAL_DMA_IRQHandler+0x38e>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a3e      	ldr	r2, [pc, #248]	; (80016d4 <HAL_DMA_IRQHandler+0x468>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d00a      	beq.n	80015f4 <HAL_DMA_IRQHandler+0x388>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a3d      	ldr	r2, [pc, #244]	; (80016d8 <HAL_DMA_IRQHandler+0x46c>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d102      	bne.n	80015ee <HAL_DMA_IRQHandler+0x382>
 80015e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ec:	e01b      	b.n	8001626 <HAL_DMA_IRQHandler+0x3ba>
 80015ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015f2:	e018      	b.n	8001626 <HAL_DMA_IRQHandler+0x3ba>
 80015f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015f8:	e015      	b.n	8001626 <HAL_DMA_IRQHandler+0x3ba>
 80015fa:	2320      	movs	r3, #32
 80015fc:	e013      	b.n	8001626 <HAL_DMA_IRQHandler+0x3ba>
 80015fe:	2302      	movs	r3, #2
 8001600:	e011      	b.n	8001626 <HAL_DMA_IRQHandler+0x3ba>
 8001602:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001606:	e00e      	b.n	8001626 <HAL_DMA_IRQHandler+0x3ba>
 8001608:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800160c:	e00b      	b.n	8001626 <HAL_DMA_IRQHandler+0x3ba>
 800160e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001612:	e008      	b.n	8001626 <HAL_DMA_IRQHandler+0x3ba>
 8001614:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001618:	e005      	b.n	8001626 <HAL_DMA_IRQHandler+0x3ba>
 800161a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800161e:	e002      	b.n	8001626 <HAL_DMA_IRQHandler+0x3ba>
 8001620:	2320      	movs	r3, #32
 8001622:	e000      	b.n	8001626 <HAL_DMA_IRQHandler+0x3ba>
 8001624:	2302      	movs	r3, #2
 8001626:	4a2e      	ldr	r2, [pc, #184]	; (80016e0 <HAL_DMA_IRQHandler+0x474>)
 8001628:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001636:	2b00      	cmp	r3, #0
 8001638:	d034      	beq.n	80016a4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001642:	e02f      	b.n	80016a4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	2208      	movs	r2, #8
 800164a:	409a      	lsls	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4013      	ands	r3, r2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d028      	beq.n	80016a6 <HAL_DMA_IRQHandler+0x43a>
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	2b00      	cmp	r3, #0
 800165c:	d023      	beq.n	80016a6 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 020e 	bic.w	r2, r2, #14
 800166c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001676:	2101      	movs	r1, #1
 8001678:	fa01 f202 	lsl.w	r2, r1, r2
 800167c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	2b00      	cmp	r3, #0
 800169a:	d004      	beq.n	80016a6 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	4798      	blx	r3
    }
  }
  return;
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
}
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40020080 	.word	0x40020080
 80016b4:	40020008 	.word	0x40020008
 80016b8:	4002001c 	.word	0x4002001c
 80016bc:	40020030 	.word	0x40020030
 80016c0:	40020044 	.word	0x40020044
 80016c4:	40020058 	.word	0x40020058
 80016c8:	4002006c 	.word	0x4002006c
 80016cc:	40020408 	.word	0x40020408
 80016d0:	4002041c 	.word	0x4002041c
 80016d4:	40020430 	.word	0x40020430
 80016d8:	40020444 	.word	0x40020444
 80016dc:	40020400 	.word	0x40020400
 80016e0:	40020000 	.word	0x40020000

080016e4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
 80016f0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016fa:	2101      	movs	r1, #1
 80016fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001700:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b10      	cmp	r3, #16
 8001710:	d108      	bne.n	8001724 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001722:	e007      	b.n	8001734 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68ba      	ldr	r2, [r7, #8]
 800172a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	60da      	str	r2, [r3, #12]
}
 8001734:	bf00      	nop
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
	...

08001740 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001740:	b480      	push	{r7}
 8001742:	b08b      	sub	sp, #44	; 0x2c
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800174e:	2300      	movs	r3, #0
 8001750:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001752:	e179      	b.n	8001a48 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001754:	2201      	movs	r2, #1
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	429a      	cmp	r2, r3
 800176e:	f040 8168 	bne.w	8001a42 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	4a96      	ldr	r2, [pc, #600]	; (80019d0 <HAL_GPIO_Init+0x290>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d05e      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 800177c:	4a94      	ldr	r2, [pc, #592]	; (80019d0 <HAL_GPIO_Init+0x290>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d875      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 8001782:	4a94      	ldr	r2, [pc, #592]	; (80019d4 <HAL_GPIO_Init+0x294>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d058      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 8001788:	4a92      	ldr	r2, [pc, #584]	; (80019d4 <HAL_GPIO_Init+0x294>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d86f      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 800178e:	4a92      	ldr	r2, [pc, #584]	; (80019d8 <HAL_GPIO_Init+0x298>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d052      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 8001794:	4a90      	ldr	r2, [pc, #576]	; (80019d8 <HAL_GPIO_Init+0x298>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d869      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 800179a:	4a90      	ldr	r2, [pc, #576]	; (80019dc <HAL_GPIO_Init+0x29c>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d04c      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 80017a0:	4a8e      	ldr	r2, [pc, #568]	; (80019dc <HAL_GPIO_Init+0x29c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d863      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 80017a6:	4a8e      	ldr	r2, [pc, #568]	; (80019e0 <HAL_GPIO_Init+0x2a0>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d046      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 80017ac:	4a8c      	ldr	r2, [pc, #560]	; (80019e0 <HAL_GPIO_Init+0x2a0>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d85d      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 80017b2:	2b12      	cmp	r3, #18
 80017b4:	d82a      	bhi.n	800180c <HAL_GPIO_Init+0xcc>
 80017b6:	2b12      	cmp	r3, #18
 80017b8:	d859      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 80017ba:	a201      	add	r2, pc, #4	; (adr r2, 80017c0 <HAL_GPIO_Init+0x80>)
 80017bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c0:	0800183b 	.word	0x0800183b
 80017c4:	08001815 	.word	0x08001815
 80017c8:	08001827 	.word	0x08001827
 80017cc:	08001869 	.word	0x08001869
 80017d0:	0800186f 	.word	0x0800186f
 80017d4:	0800186f 	.word	0x0800186f
 80017d8:	0800186f 	.word	0x0800186f
 80017dc:	0800186f 	.word	0x0800186f
 80017e0:	0800186f 	.word	0x0800186f
 80017e4:	0800186f 	.word	0x0800186f
 80017e8:	0800186f 	.word	0x0800186f
 80017ec:	0800186f 	.word	0x0800186f
 80017f0:	0800186f 	.word	0x0800186f
 80017f4:	0800186f 	.word	0x0800186f
 80017f8:	0800186f 	.word	0x0800186f
 80017fc:	0800186f 	.word	0x0800186f
 8001800:	0800186f 	.word	0x0800186f
 8001804:	0800181d 	.word	0x0800181d
 8001808:	08001831 	.word	0x08001831
 800180c:	4a75      	ldr	r2, [pc, #468]	; (80019e4 <HAL_GPIO_Init+0x2a4>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d013      	beq.n	800183a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001812:	e02c      	b.n	800186e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	623b      	str	r3, [r7, #32]
          break;
 800181a:	e029      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	3304      	adds	r3, #4
 8001822:	623b      	str	r3, [r7, #32]
          break;
 8001824:	e024      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	3308      	adds	r3, #8
 800182c:	623b      	str	r3, [r7, #32]
          break;
 800182e:	e01f      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	330c      	adds	r3, #12
 8001836:	623b      	str	r3, [r7, #32]
          break;
 8001838:	e01a      	b.n	8001870 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d102      	bne.n	8001848 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001842:	2304      	movs	r3, #4
 8001844:	623b      	str	r3, [r7, #32]
          break;
 8001846:	e013      	b.n	8001870 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d105      	bne.n	800185c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001850:	2308      	movs	r3, #8
 8001852:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	611a      	str	r2, [r3, #16]
          break;
 800185a:	e009      	b.n	8001870 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800185c:	2308      	movs	r3, #8
 800185e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69fa      	ldr	r2, [r7, #28]
 8001864:	615a      	str	r2, [r3, #20]
          break;
 8001866:	e003      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
          break;
 800186c:	e000      	b.n	8001870 <HAL_GPIO_Init+0x130>
          break;
 800186e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	2bff      	cmp	r3, #255	; 0xff
 8001874:	d801      	bhi.n	800187a <HAL_GPIO_Init+0x13a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	e001      	b.n	800187e <HAL_GPIO_Init+0x13e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3304      	adds	r3, #4
 800187e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	2bff      	cmp	r3, #255	; 0xff
 8001884:	d802      	bhi.n	800188c <HAL_GPIO_Init+0x14c>
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	e002      	b.n	8001892 <HAL_GPIO_Init+0x152>
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	3b08      	subs	r3, #8
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	210f      	movs	r1, #15
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	fa01 f303 	lsl.w	r3, r1, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	401a      	ands	r2, r3
 80018a4:	6a39      	ldr	r1, [r7, #32]
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ac:	431a      	orrs	r2, r3
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 80c1 	beq.w	8001a42 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018c0:	4b49      	ldr	r3, [pc, #292]	; (80019e8 <HAL_GPIO_Init+0x2a8>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	4a48      	ldr	r2, [pc, #288]	; (80019e8 <HAL_GPIO_Init+0x2a8>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6193      	str	r3, [r2, #24]
 80018cc:	4b46      	ldr	r3, [pc, #280]	; (80019e8 <HAL_GPIO_Init+0x2a8>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018d8:	4a44      	ldr	r2, [pc, #272]	; (80019ec <HAL_GPIO_Init+0x2ac>)
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	089b      	lsrs	r3, r3, #2
 80018de:	3302      	adds	r3, #2
 80018e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	220f      	movs	r2, #15
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	4013      	ands	r3, r2
 80018fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a3c      	ldr	r2, [pc, #240]	; (80019f0 <HAL_GPIO_Init+0x2b0>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d01f      	beq.n	8001944 <HAL_GPIO_Init+0x204>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a3b      	ldr	r2, [pc, #236]	; (80019f4 <HAL_GPIO_Init+0x2b4>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d019      	beq.n	8001940 <HAL_GPIO_Init+0x200>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a3a      	ldr	r2, [pc, #232]	; (80019f8 <HAL_GPIO_Init+0x2b8>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d013      	beq.n	800193c <HAL_GPIO_Init+0x1fc>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a39      	ldr	r2, [pc, #228]	; (80019fc <HAL_GPIO_Init+0x2bc>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d00d      	beq.n	8001938 <HAL_GPIO_Init+0x1f8>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a38      	ldr	r2, [pc, #224]	; (8001a00 <HAL_GPIO_Init+0x2c0>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d007      	beq.n	8001934 <HAL_GPIO_Init+0x1f4>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a37      	ldr	r2, [pc, #220]	; (8001a04 <HAL_GPIO_Init+0x2c4>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d101      	bne.n	8001930 <HAL_GPIO_Init+0x1f0>
 800192c:	2305      	movs	r3, #5
 800192e:	e00a      	b.n	8001946 <HAL_GPIO_Init+0x206>
 8001930:	2306      	movs	r3, #6
 8001932:	e008      	b.n	8001946 <HAL_GPIO_Init+0x206>
 8001934:	2304      	movs	r3, #4
 8001936:	e006      	b.n	8001946 <HAL_GPIO_Init+0x206>
 8001938:	2303      	movs	r3, #3
 800193a:	e004      	b.n	8001946 <HAL_GPIO_Init+0x206>
 800193c:	2302      	movs	r3, #2
 800193e:	e002      	b.n	8001946 <HAL_GPIO_Init+0x206>
 8001940:	2301      	movs	r3, #1
 8001942:	e000      	b.n	8001946 <HAL_GPIO_Init+0x206>
 8001944:	2300      	movs	r3, #0
 8001946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001948:	f002 0203 	and.w	r2, r2, #3
 800194c:	0092      	lsls	r2, r2, #2
 800194e:	4093      	lsls	r3, r2
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	4313      	orrs	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001956:	4925      	ldr	r1, [pc, #148]	; (80019ec <HAL_GPIO_Init+0x2ac>)
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	089b      	lsrs	r3, r3, #2
 800195c:	3302      	adds	r3, #2
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d006      	beq.n	800197e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001970:	4b25      	ldr	r3, [pc, #148]	; (8001a08 <HAL_GPIO_Init+0x2c8>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4924      	ldr	r1, [pc, #144]	; (8001a08 <HAL_GPIO_Init+0x2c8>)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	4313      	orrs	r3, r2
 800197a:	600b      	str	r3, [r1, #0]
 800197c:	e006      	b.n	800198c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800197e:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <HAL_GPIO_Init+0x2c8>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	43db      	mvns	r3, r3
 8001986:	4920      	ldr	r1, [pc, #128]	; (8001a08 <HAL_GPIO_Init+0x2c8>)
 8001988:	4013      	ands	r3, r2
 800198a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d006      	beq.n	80019a6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001998:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <HAL_GPIO_Init+0x2c8>)
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	491a      	ldr	r1, [pc, #104]	; (8001a08 <HAL_GPIO_Init+0x2c8>)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	604b      	str	r3, [r1, #4]
 80019a4:	e006      	b.n	80019b4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019a6:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <HAL_GPIO_Init+0x2c8>)
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	4916      	ldr	r1, [pc, #88]	; (8001a08 <HAL_GPIO_Init+0x2c8>)
 80019b0:	4013      	ands	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d025      	beq.n	8001a0c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <HAL_GPIO_Init+0x2c8>)
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	4910      	ldr	r1, [pc, #64]	; (8001a08 <HAL_GPIO_Init+0x2c8>)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	608b      	str	r3, [r1, #8]
 80019cc:	e025      	b.n	8001a1a <HAL_GPIO_Init+0x2da>
 80019ce:	bf00      	nop
 80019d0:	10320000 	.word	0x10320000
 80019d4:	10310000 	.word	0x10310000
 80019d8:	10220000 	.word	0x10220000
 80019dc:	10210000 	.word	0x10210000
 80019e0:	10120000 	.word	0x10120000
 80019e4:	10110000 	.word	0x10110000
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40010000 	.word	0x40010000
 80019f0:	40010800 	.word	0x40010800
 80019f4:	40010c00 	.word	0x40010c00
 80019f8:	40011000 	.word	0x40011000
 80019fc:	40011400 	.word	0x40011400
 8001a00:	40011800 	.word	0x40011800
 8001a04:	40011c00 	.word	0x40011c00
 8001a08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a0c:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <HAL_GPIO_Init+0x324>)
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	43db      	mvns	r3, r3
 8001a14:	4913      	ldr	r1, [pc, #76]	; (8001a64 <HAL_GPIO_Init+0x324>)
 8001a16:	4013      	ands	r3, r2
 8001a18:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d006      	beq.n	8001a34 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a26:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <HAL_GPIO_Init+0x324>)
 8001a28:	68da      	ldr	r2, [r3, #12]
 8001a2a:	490e      	ldr	r1, [pc, #56]	; (8001a64 <HAL_GPIO_Init+0x324>)
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	60cb      	str	r3, [r1, #12]
 8001a32:	e006      	b.n	8001a42 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_GPIO_Init+0x324>)
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	4909      	ldr	r1, [pc, #36]	; (8001a64 <HAL_GPIO_Init+0x324>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	3301      	adds	r3, #1
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f47f ae7e 	bne.w	8001754 <HAL_GPIO_Init+0x14>
  }
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	372c      	adds	r7, #44	; 0x2c
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	40010400 	.word	0x40010400

08001a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	807b      	strh	r3, [r7, #2]
 8001a74:	4613      	mov	r3, r2
 8001a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a78:	787b      	ldrb	r3, [r7, #1]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a7e:	887a      	ldrh	r2, [r7, #2]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a84:	e003      	b.n	8001a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a86:	887b      	ldrh	r3, [r7, #2]
 8001a88:	041a      	lsls	r2, r3, #16
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	611a      	str	r2, [r3, #16]
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e272      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 8087 	beq.w	8001bc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ab8:	4b92      	ldr	r3, [pc, #584]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 030c 	and.w	r3, r3, #12
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d00c      	beq.n	8001ade <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ac4:	4b8f      	ldr	r3, [pc, #572]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 030c 	and.w	r3, r3, #12
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	d112      	bne.n	8001af6 <HAL_RCC_OscConfig+0x5e>
 8001ad0:	4b8c      	ldr	r3, [pc, #560]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001adc:	d10b      	bne.n	8001af6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ade:	4b89      	ldr	r3, [pc, #548]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d06c      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x12c>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d168      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e24c      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001afe:	d106      	bne.n	8001b0e <HAL_RCC_OscConfig+0x76>
 8001b00:	4b80      	ldr	r3, [pc, #512]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a7f      	ldr	r2, [pc, #508]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	e02e      	b.n	8001b6c <HAL_RCC_OscConfig+0xd4>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10c      	bne.n	8001b30 <HAL_RCC_OscConfig+0x98>
 8001b16:	4b7b      	ldr	r3, [pc, #492]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a7a      	ldr	r2, [pc, #488]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	4b78      	ldr	r3, [pc, #480]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a77      	ldr	r2, [pc, #476]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	e01d      	b.n	8001b6c <HAL_RCC_OscConfig+0xd4>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b38:	d10c      	bne.n	8001b54 <HAL_RCC_OscConfig+0xbc>
 8001b3a:	4b72      	ldr	r3, [pc, #456]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a71      	ldr	r2, [pc, #452]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	4b6f      	ldr	r3, [pc, #444]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a6e      	ldr	r2, [pc, #440]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e00b      	b.n	8001b6c <HAL_RCC_OscConfig+0xd4>
 8001b54:	4b6b      	ldr	r3, [pc, #428]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a6a      	ldr	r2, [pc, #424]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b68      	ldr	r3, [pc, #416]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a67      	ldr	r2, [pc, #412]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d013      	beq.n	8001b9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b74:	f7ff f968 	bl	8000e48 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b7c:	f7ff f964 	bl	8000e48 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b64      	cmp	r3, #100	; 0x64
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e200      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8e:	4b5d      	ldr	r3, [pc, #372]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f0      	beq.n	8001b7c <HAL_RCC_OscConfig+0xe4>
 8001b9a:	e014      	b.n	8001bc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9c:	f7ff f954 	bl	8000e48 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba4:	f7ff f950 	bl	8000e48 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b64      	cmp	r3, #100	; 0x64
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e1ec      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb6:	4b53      	ldr	r3, [pc, #332]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f0      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x10c>
 8001bc2:	e000      	b.n	8001bc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d063      	beq.n	8001c9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bd2:	4b4c      	ldr	r3, [pc, #304]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00b      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bde:	4b49      	ldr	r3, [pc, #292]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d11c      	bne.n	8001c24 <HAL_RCC_OscConfig+0x18c>
 8001bea:	4b46      	ldr	r3, [pc, #280]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d116      	bne.n	8001c24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf6:	4b43      	ldr	r3, [pc, #268]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d005      	beq.n	8001c0e <HAL_RCC_OscConfig+0x176>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d001      	beq.n	8001c0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e1c0      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0e:	4b3d      	ldr	r3, [pc, #244]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4939      	ldr	r1, [pc, #228]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c22:	e03a      	b.n	8001c9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d020      	beq.n	8001c6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c2c:	4b36      	ldr	r3, [pc, #216]	; (8001d08 <HAL_RCC_OscConfig+0x270>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c32:	f7ff f909 	bl	8000e48 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c3a:	f7ff f905 	bl	8000e48 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e1a1      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4c:	4b2d      	ldr	r3, [pc, #180]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0f0      	beq.n	8001c3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c58:	4b2a      	ldr	r3, [pc, #168]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	4927      	ldr	r1, [pc, #156]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	600b      	str	r3, [r1, #0]
 8001c6c:	e015      	b.n	8001c9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c6e:	4b26      	ldr	r3, [pc, #152]	; (8001d08 <HAL_RCC_OscConfig+0x270>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c74:	f7ff f8e8 	bl	8000e48 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7c:	f7ff f8e4 	bl	8000e48 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e180      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8e:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f0      	bne.n	8001c7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d03a      	beq.n	8001d1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d019      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cae:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb4:	f7ff f8c8 	bl	8000e48 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cbc:	f7ff f8c4 	bl	8000e48 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e160      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cce:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0f0      	beq.n	8001cbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cda:	2001      	movs	r0, #1
 8001cdc:	f000 faa6 	bl	800222c <RCC_Delay>
 8001ce0:	e01c      	b.n	8001d1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce8:	f7ff f8ae 	bl	8000e48 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cee:	e00f      	b.n	8001d10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf0:	f7ff f8aa 	bl	8000e48 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d908      	bls.n	8001d10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e146      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000
 8001d08:	42420000 	.word	0x42420000
 8001d0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d10:	4b92      	ldr	r3, [pc, #584]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1e9      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 80a6 	beq.w	8001e76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d2e:	4b8b      	ldr	r3, [pc, #556]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10d      	bne.n	8001d56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d3a:	4b88      	ldr	r3, [pc, #544]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	4a87      	ldr	r2, [pc, #540]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d44:	61d3      	str	r3, [r2, #28]
 8001d46:	4b85      	ldr	r3, [pc, #532]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d52:	2301      	movs	r3, #1
 8001d54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d56:	4b82      	ldr	r3, [pc, #520]	; (8001f60 <HAL_RCC_OscConfig+0x4c8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d118      	bne.n	8001d94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d62:	4b7f      	ldr	r3, [pc, #508]	; (8001f60 <HAL_RCC_OscConfig+0x4c8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a7e      	ldr	r2, [pc, #504]	; (8001f60 <HAL_RCC_OscConfig+0x4c8>)
 8001d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6e:	f7ff f86b 	bl	8000e48 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d76:	f7ff f867 	bl	8000e48 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b64      	cmp	r3, #100	; 0x64
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e103      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d88:	4b75      	ldr	r3, [pc, #468]	; (8001f60 <HAL_RCC_OscConfig+0x4c8>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d106      	bne.n	8001daa <HAL_RCC_OscConfig+0x312>
 8001d9c:	4b6f      	ldr	r3, [pc, #444]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	4a6e      	ldr	r2, [pc, #440]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6213      	str	r3, [r2, #32]
 8001da8:	e02d      	b.n	8001e06 <HAL_RCC_OscConfig+0x36e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x334>
 8001db2:	4b6a      	ldr	r3, [pc, #424]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	4a69      	ldr	r2, [pc, #420]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	f023 0301 	bic.w	r3, r3, #1
 8001dbc:	6213      	str	r3, [r2, #32]
 8001dbe:	4b67      	ldr	r3, [pc, #412]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	4a66      	ldr	r2, [pc, #408]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	f023 0304 	bic.w	r3, r3, #4
 8001dc8:	6213      	str	r3, [r2, #32]
 8001dca:	e01c      	b.n	8001e06 <HAL_RCC_OscConfig+0x36e>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	2b05      	cmp	r3, #5
 8001dd2:	d10c      	bne.n	8001dee <HAL_RCC_OscConfig+0x356>
 8001dd4:	4b61      	ldr	r3, [pc, #388]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	4a60      	ldr	r2, [pc, #384]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001dda:	f043 0304 	orr.w	r3, r3, #4
 8001dde:	6213      	str	r3, [r2, #32]
 8001de0:	4b5e      	ldr	r3, [pc, #376]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	4a5d      	ldr	r2, [pc, #372]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6213      	str	r3, [r2, #32]
 8001dec:	e00b      	b.n	8001e06 <HAL_RCC_OscConfig+0x36e>
 8001dee:	4b5b      	ldr	r3, [pc, #364]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	4a5a      	ldr	r2, [pc, #360]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001df4:	f023 0301 	bic.w	r3, r3, #1
 8001df8:	6213      	str	r3, [r2, #32]
 8001dfa:	4b58      	ldr	r3, [pc, #352]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	4a57      	ldr	r2, [pc, #348]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	f023 0304 	bic.w	r3, r3, #4
 8001e04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d015      	beq.n	8001e3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0e:	f7ff f81b 	bl	8000e48 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e14:	e00a      	b.n	8001e2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e16:	f7ff f817 	bl	8000e48 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e0b1      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2c:	4b4b      	ldr	r3, [pc, #300]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0ee      	beq.n	8001e16 <HAL_RCC_OscConfig+0x37e>
 8001e38:	e014      	b.n	8001e64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3a:	f7ff f805 	bl	8000e48 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e40:	e00a      	b.n	8001e58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e42:	f7ff f801 	bl	8000e48 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e09b      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e58:	4b40      	ldr	r3, [pc, #256]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1ee      	bne.n	8001e42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e64:	7dfb      	ldrb	r3, [r7, #23]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d105      	bne.n	8001e76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e6a:	4b3c      	ldr	r3, [pc, #240]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	4a3b      	ldr	r2, [pc, #236]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 8087 	beq.w	8001f8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e80:	4b36      	ldr	r3, [pc, #216]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 030c 	and.w	r3, r3, #12
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d061      	beq.n	8001f50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d146      	bne.n	8001f22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b33      	ldr	r3, [pc, #204]	; (8001f64 <HAL_RCC_OscConfig+0x4cc>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9a:	f7fe ffd5 	bl	8000e48 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea2:	f7fe ffd1 	bl	8000e48 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e06d      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb4:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f0      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec8:	d108      	bne.n	8001edc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eca:	4b24      	ldr	r3, [pc, #144]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	4921      	ldr	r1, [pc, #132]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001edc:	4b1f      	ldr	r3, [pc, #124]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a19      	ldr	r1, [r3, #32]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	430b      	orrs	r3, r1
 8001eee:	491b      	ldr	r1, [pc, #108]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <HAL_RCC_OscConfig+0x4cc>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efa:	f7fe ffa5 	bl	8000e48 <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f02:	f7fe ffa1 	bl	8000e48 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e03d      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_RCC_OscConfig+0x46a>
 8001f20:	e035      	b.n	8001f8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <HAL_RCC_OscConfig+0x4cc>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f28:	f7fe ff8e 	bl	8000e48 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f30:	f7fe ff8a 	bl	8000e48 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e026      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x498>
 8001f4e:	e01e      	b.n	8001f8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d107      	bne.n	8001f68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e019      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40007000 	.word	0x40007000
 8001f64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <HAL_RCC_OscConfig+0x500>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d106      	bne.n	8001f8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d001      	beq.n	8001f8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40021000 	.word	0x40021000

08001f9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0d0      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fb0:	4b6a      	ldr	r3, [pc, #424]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d910      	bls.n	8001fe0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fbe:	4b67      	ldr	r3, [pc, #412]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f023 0207 	bic.w	r2, r3, #7
 8001fc6:	4965      	ldr	r1, [pc, #404]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fce:	4b63      	ldr	r3, [pc, #396]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d001      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e0b8      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d020      	beq.n	800202e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ff8:	4b59      	ldr	r3, [pc, #356]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4a58      	ldr	r2, [pc, #352]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002002:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002010:	4b53      	ldr	r3, [pc, #332]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	4a52      	ldr	r2, [pc, #328]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800201a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800201c:	4b50      	ldr	r3, [pc, #320]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	494d      	ldr	r1, [pc, #308]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 800202a:	4313      	orrs	r3, r2
 800202c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d040      	beq.n	80020bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d107      	bne.n	8002052 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002042:	4b47      	ldr	r3, [pc, #284]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d115      	bne.n	800207a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e07f      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d107      	bne.n	800206a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205a:	4b41      	ldr	r3, [pc, #260]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d109      	bne.n	800207a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e073      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206a:	4b3d      	ldr	r3, [pc, #244]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e06b      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800207a:	4b39      	ldr	r3, [pc, #228]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f023 0203 	bic.w	r2, r3, #3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	4936      	ldr	r1, [pc, #216]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800208c:	f7fe fedc 	bl	8000e48 <HAL_GetTick>
 8002090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002092:	e00a      	b.n	80020aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002094:	f7fe fed8 	bl	8000e48 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e053      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020aa:	4b2d      	ldr	r3, [pc, #180]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f003 020c 	and.w	r2, r3, #12
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d1eb      	bne.n	8002094 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020bc:	4b27      	ldr	r3, [pc, #156]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d210      	bcs.n	80020ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b24      	ldr	r3, [pc, #144]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 0207 	bic.w	r2, r3, #7
 80020d2:	4922      	ldr	r1, [pc, #136]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020da:	4b20      	ldr	r3, [pc, #128]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e032      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d008      	beq.n	800210a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020f8:	4b19      	ldr	r3, [pc, #100]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	4916      	ldr	r1, [pc, #88]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	4313      	orrs	r3, r2
 8002108:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	2b00      	cmp	r3, #0
 8002114:	d009      	beq.n	800212a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002116:	4b12      	ldr	r3, [pc, #72]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	490e      	ldr	r1, [pc, #56]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	4313      	orrs	r3, r2
 8002128:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800212a:	f000 f821 	bl	8002170 <HAL_RCC_GetSysClockFreq>
 800212e:	4602      	mov	r2, r0
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	091b      	lsrs	r3, r3, #4
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	490a      	ldr	r1, [pc, #40]	; (8002164 <HAL_RCC_ClockConfig+0x1c8>)
 800213c:	5ccb      	ldrb	r3, [r1, r3]
 800213e:	fa22 f303 	lsr.w	r3, r2, r3
 8002142:	4a09      	ldr	r2, [pc, #36]	; (8002168 <HAL_RCC_ClockConfig+0x1cc>)
 8002144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002146:	4b09      	ldr	r3, [pc, #36]	; (800216c <HAL_RCC_ClockConfig+0x1d0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe fe3a 	bl	8000dc4 <HAL_InitTick>

  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40022000 	.word	0x40022000
 8002160:	40021000 	.word	0x40021000
 8002164:	0805c554 	.word	0x0805c554
 8002168:	20000000 	.word	0x20000000
 800216c:	20000004 	.word	0x20000004

08002170 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002170:	b490      	push	{r4, r7}
 8002172:	b08a      	sub	sp, #40	; 0x28
 8002174:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002176:	4b29      	ldr	r3, [pc, #164]	; (800221c <HAL_RCC_GetSysClockFreq+0xac>)
 8002178:	1d3c      	adds	r4, r7, #4
 800217a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800217c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002180:	f240 2301 	movw	r3, #513	; 0x201
 8002184:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
 800218a:	2300      	movs	r3, #0
 800218c:	61bb      	str	r3, [r7, #24]
 800218e:	2300      	movs	r3, #0
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002196:	2300      	movs	r3, #0
 8002198:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800219a:	4b21      	ldr	r3, [pc, #132]	; (8002220 <HAL_RCC_GetSysClockFreq+0xb0>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d002      	beq.n	80021b0 <HAL_RCC_GetSysClockFreq+0x40>
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d003      	beq.n	80021b6 <HAL_RCC_GetSysClockFreq+0x46>
 80021ae:	e02b      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021b0:	4b1c      	ldr	r3, [pc, #112]	; (8002224 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021b2:	623b      	str	r3, [r7, #32]
      break;
 80021b4:	e02b      	b.n	800220e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	0c9b      	lsrs	r3, r3, #18
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	3328      	adds	r3, #40	; 0x28
 80021c0:	443b      	add	r3, r7
 80021c2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021c6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d012      	beq.n	80021f8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021d2:	4b13      	ldr	r3, [pc, #76]	; (8002220 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	0c5b      	lsrs	r3, r3, #17
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	3328      	adds	r3, #40	; 0x28
 80021de:	443b      	add	r3, r7
 80021e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	4a0e      	ldr	r2, [pc, #56]	; (8002224 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021ea:	fb03 f202 	mul.w	r2, r3, r2
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
 80021f6:	e004      	b.n	8002202 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	4a0b      	ldr	r2, [pc, #44]	; (8002228 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fc:	fb02 f303 	mul.w	r3, r2, r3
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	623b      	str	r3, [r7, #32]
      break;
 8002206:	e002      	b.n	800220e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_RCC_GetSysClockFreq+0xb4>)
 800220a:	623b      	str	r3, [r7, #32]
      break;
 800220c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800220e:	6a3b      	ldr	r3, [r7, #32]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3728      	adds	r7, #40	; 0x28
 8002214:	46bd      	mov	sp, r7
 8002216:	bc90      	pop	{r4, r7}
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	08002520 	.word	0x08002520
 8002220:	40021000 	.word	0x40021000
 8002224:	007a1200 	.word	0x007a1200
 8002228:	003d0900 	.word	0x003d0900

0800222c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002234:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <RCC_Delay+0x34>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <RCC_Delay+0x38>)
 800223a:	fba2 2303 	umull	r2, r3, r2, r3
 800223e:	0a5b      	lsrs	r3, r3, #9
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	fb02 f303 	mul.w	r3, r2, r3
 8002246:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002248:	bf00      	nop
  }
  while (Delay --);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1e5a      	subs	r2, r3, #1
 800224e:	60fa      	str	r2, [r7, #12]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f9      	bne.n	8002248 <RCC_Delay+0x1c>
}
 8002254:	bf00      	nop
 8002256:	bf00      	nop
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr
 8002260:	20000000 	.word	0x20000000
 8002264:	10624dd3 	.word	0x10624dd3

08002268 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d004      	beq.n	8002284 <HAL_SRAM_Init+0x1c>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002282:	d101      	bne.n	8002288 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e038      	b.n	80022fa <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d106      	bne.n	80022a2 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f7fe fd13 	bl	8000cc8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	3308      	adds	r3, #8
 80022aa:	4619      	mov	r1, r3
 80022ac:	4610      	mov	r0, r2
 80022ae:	f000 f829 	bl	8002304 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	461a      	mov	r2, r3
 80022bc:	68b9      	ldr	r1, [r7, #8]
 80022be:	f000 f88b 	bl	80023d8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6858      	ldr	r0, [r3, #4]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	f000 f8b6 	bl	8002440 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	6892      	ldr	r2, [r2, #8]
 80022dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	6892      	ldr	r2, [r2, #8]
 80022e8:	f041 0101 	orr.w	r1, r1, #1
 80022ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8002304:	b480      	push	{r7}
 8002306:	b087      	sub	sp, #28
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	f023 0101 	bic.w	r1, r3, #1
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2b08      	cmp	r3, #8
 800232c:	d102      	bne.n	8002334 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800232e:	2340      	movs	r3, #64	; 0x40
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	e001      	b.n	8002338 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8002344:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800234a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8002350:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8002356:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800235c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8002362:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8002368:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800236e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8002374:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800237a:	4313      	orrs	r3, r2
 800237c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8002392:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <FSMC_NORSRAM_Init+0xd0>)
 8002394:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800239c:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80023a4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	ea02 0103 	and.w	r1, r2, r3
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4319      	orrs	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	371c      	adds	r7, #28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	0008fb7f 	.word	0x0008fb7f

080023d8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ee:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	011b      	lsls	r3, r3, #4
 80023fc:	431a      	orrs	r2, r3
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	021b      	lsls	r3, r3, #8
 8002404:	431a      	orrs	r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	041b      	lsls	r3, r3, #16
 800240c:	431a      	orrs	r2, r3
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	3b01      	subs	r3, #1
 8002414:	051b      	lsls	r3, r3, #20
 8002416:	431a      	orrs	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	3b02      	subs	r3, #2
 800241e:	061b      	lsls	r3, r3, #24
 8002420:	431a      	orrs	r2, r3
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	4313      	orrs	r3, r2
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	3201      	adds	r2, #1
 800242c:	4319      	orrs	r1, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002454:	d11d      	bne.n	8002492 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800245e:	4b13      	ldr	r3, [pc, #76]	; (80024ac <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8002460:	4013      	ands	r3, r2
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	6811      	ldr	r1, [r2, #0]
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	6852      	ldr	r2, [r2, #4]
 800246a:	0112      	lsls	r2, r2, #4
 800246c:	4311      	orrs	r1, r2
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	6892      	ldr	r2, [r2, #8]
 8002472:	0212      	lsls	r2, r2, #8
 8002474:	4311      	orrs	r1, r2
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	6992      	ldr	r2, [r2, #24]
 800247a:	4311      	orrs	r1, r2
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	68d2      	ldr	r2, [r2, #12]
 8002480:	0412      	lsls	r2, r2, #16
 8002482:	430a      	orrs	r2, r1
 8002484:	ea43 0102 	orr.w	r1, r3, r2
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002490:	e005      	b.n	800249e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800249a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	cff00000 	.word	0xcff00000

080024b0 <__libc_init_array>:
 80024b0:	b570      	push	{r4, r5, r6, lr}
 80024b2:	2600      	movs	r6, #0
 80024b4:	4d0c      	ldr	r5, [pc, #48]	; (80024e8 <__libc_init_array+0x38>)
 80024b6:	4c0d      	ldr	r4, [pc, #52]	; (80024ec <__libc_init_array+0x3c>)
 80024b8:	1b64      	subs	r4, r4, r5
 80024ba:	10a4      	asrs	r4, r4, #2
 80024bc:	42a6      	cmp	r6, r4
 80024be:	d109      	bne.n	80024d4 <__libc_init_array+0x24>
 80024c0:	f000 f822 	bl	8002508 <_init>
 80024c4:	2600      	movs	r6, #0
 80024c6:	4d0a      	ldr	r5, [pc, #40]	; (80024f0 <__libc_init_array+0x40>)
 80024c8:	4c0a      	ldr	r4, [pc, #40]	; (80024f4 <__libc_init_array+0x44>)
 80024ca:	1b64      	subs	r4, r4, r5
 80024cc:	10a4      	asrs	r4, r4, #2
 80024ce:	42a6      	cmp	r6, r4
 80024d0:	d105      	bne.n	80024de <__libc_init_array+0x2e>
 80024d2:	bd70      	pop	{r4, r5, r6, pc}
 80024d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80024d8:	4798      	blx	r3
 80024da:	3601      	adds	r6, #1
 80024dc:	e7ee      	b.n	80024bc <__libc_init_array+0xc>
 80024de:	f855 3b04 	ldr.w	r3, [r5], #4
 80024e2:	4798      	blx	r3
 80024e4:	3601      	adds	r6, #1
 80024e6:	e7f2      	b.n	80024ce <__libc_init_array+0x1e>
 80024e8:	0805c564 	.word	0x0805c564
 80024ec:	0805c564 	.word	0x0805c564
 80024f0:	0805c564 	.word	0x0805c564
 80024f4:	0805c568 	.word	0x0805c568

080024f8 <memset>:
 80024f8:	4603      	mov	r3, r0
 80024fa:	4402      	add	r2, r0
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d100      	bne.n	8002502 <memset+0xa>
 8002500:	4770      	bx	lr
 8002502:	f803 1b01 	strb.w	r1, [r3], #1
 8002506:	e7f9      	b.n	80024fc <memset+0x4>

08002508 <_init>:
 8002508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800250a:	bf00      	nop
 800250c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800250e:	bc08      	pop	{r3}
 8002510:	469e      	mov	lr, r3
 8002512:	4770      	bx	lr

08002514 <_fini>:
 8002514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002516:	bf00      	nop
 8002518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800251a:	bc08      	pop	{r3}
 800251c:	469e      	mov	lr, r3
 800251e:	4770      	bx	lr
