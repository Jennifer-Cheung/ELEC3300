
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026ac  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005e360  08002890  08002890  00012890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08060bf0  08060bf0  00080070  2**0
                  CONTENTS
  4 .ARM          00000000  08060bf0  08060bf0  00080070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08060bf0  08060bf0  00080070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08060bf0  08060bf0  00070bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08060bf4  08060bf4  00070bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08060bf8  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  08060c68  00080070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08060c68  0008013c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00080070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5de  00000000  00000000  00080099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ffc  00000000  00000000  0008b677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00006a22  00000000  00000000  0008d673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000610  00000000  00000000  00094098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002080  00000000  00000000  000946a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000196e3  00000000  00000000  00096728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bb63  00000000  00000000  000afe0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092386  00000000  00000000  000bb96e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014dcf4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001470  00000000  00000000  0014dd44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08002878 	.word	0x08002878

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08002878 	.word	0x08002878

08000224 <LCD_Write_Cmd>:



void LCD_Write_Cmd ( uint16_t usCmd )
{
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000224:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000228:	8018      	strh	r0, [r3, #0]
}
 800022a:	4770      	bx	lr

0800022c <LCD_Write_Data>:



void LCD_Write_Data ( uint16_t usData )
{
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800022c:	4b01      	ldr	r3, [pc, #4]	; (8000234 <LCD_Write_Data+0x8>)
 800022e:	8018      	strh	r0, [r3, #0]
}
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	60020000 	.word	0x60020000

08000238 <LCD_REG_Config>:
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000238:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800023c:	23cf      	movs	r3, #207	; 0xcf
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 800023e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000242:	2100      	movs	r1, #0
 8000244:	2081      	movs	r0, #129	; 0x81
 8000246:	f04f 0c30 	mov.w	ip, #48	; 0x30
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800024a:	f04f 04ed 	mov.w	r4, #237	; 0xed
 800024e:	8013      	strh	r3, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000250:	4b70      	ldr	r3, [pc, #448]	; (8000414 <LCD_REG_Config+0x1dc>)
 8000252:	f04f 0803 	mov.w	r8, #3
 8000256:	8019      	strh	r1, [r3, #0]
 8000258:	8018      	strh	r0, [r3, #0]
 800025a:	f8a3 c000 	strh.w	ip, [r3]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800025e:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000260:	f04f 0464 	mov.w	r4, #100	; 0x64
 8000264:	801c      	strh	r4, [r3, #0]
 8000266:	f04f 0412 	mov.w	r4, #18
 800026a:	f8a3 8000 	strh.w	r8, [r3]
 800026e:	801c      	strh	r4, [r3, #0]
 8000270:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000272:	f04f 00e8 	mov.w	r0, #232	; 0xe8
 8000276:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000278:	f04f 0085 	mov.w	r0, #133	; 0x85
 800027c:	f04f 0b10 	mov.w	fp, #16
 8000280:	8018      	strh	r0, [r3, #0]
 8000282:	f04f 0078 	mov.w	r0, #120	; 0x78
 8000286:	f8a3 b000 	strh.w	fp, [r3]
 800028a:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800028c:	f04f 00cb 	mov.w	r0, #203	; 0xcb
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000290:	f04f 0939 	mov.w	r9, #57	; 0x39
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000294:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000296:	f04f 002c 	mov.w	r0, #44	; 0x2c
 800029a:	f8a3 9000 	strh.w	r9, [r3]
 800029e:	8018      	strh	r0, [r3, #0]
 80002a0:	f04f 0034 	mov.w	r0, #52	; 0x34
 80002a4:	8019      	strh	r1, [r3, #0]
 80002a6:	8018      	strh	r0, [r3, #0]
 80002a8:	f04f 0002 	mov.w	r0, #2
 80002ac:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002ae:	f04f 00f7 	mov.w	r0, #247	; 0xf7
 80002b2:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002b4:	f04f 0020 	mov.w	r0, #32
 80002b8:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002ba:	f04f 00ea 	mov.w	r0, #234	; 0xea
 80002be:	8010      	strh	r0, [r2, #0]
 80002c0:	f04f 00b1 	mov.w	r0, #177	; 0xb1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002c4:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002c6:	f04f 04b6 	mov.w	r4, #182	; 0xb6
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002ca:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002cc:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002ce:	f04f 001b 	mov.w	r0, #27
 80002d2:	8019      	strh	r1, [r3, #0]
 80002d4:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002d6:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002d8:	f04f 040a 	mov.w	r4, #10
 80002dc:	801c      	strh	r4, [r3, #0]
 80002de:	f04f 04a2 	mov.w	r4, #162	; 0xa2
 80002e2:	801c      	strh	r4, [r3, #0]
 80002e4:	4620      	mov	r0, r4
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002e6:	f04f 04c0 	mov.w	r4, #192	; 0xc0
 80002ea:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002ec:	f04f 0435 	mov.w	r4, #53	; 0x35
 80002f0:	801c      	strh	r4, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002f2:	f04f 04c1 	mov.w	r4, #193	; 0xc1
 80002f6:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80002f8:	f04f 0411 	mov.w	r4, #17
 80002fc:	801c      	strh	r4, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002fe:	f04f 04c5 	mov.w	r4, #197	; 0xc5
 8000302:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000304:	f04f 0445 	mov.w	r4, #69	; 0x45
 8000308:	801c      	strh	r4, [r3, #0]
 800030a:	801c      	strh	r4, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800030c:	f04f 04c7 	mov.w	r4, #199	; 0xc7
 8000310:	8014      	strh	r4, [r2, #0]
 8000312:	f04f 04f2 	mov.w	r4, #242	; 0xf2
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000316:	8018      	strh	r0, [r3, #0]
 8000318:	2501      	movs	r5, #1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800031a:	8014      	strh	r4, [r2, #0]
 800031c:	f04f 00e0 	mov.w	r0, #224	; 0xe0
 8000320:	f04f 0426 	mov.w	r4, #38	; 0x26
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000324:	8019      	strh	r1, [r3, #0]
 8000326:	270f      	movs	r7, #15
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000328:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800032a:	801d      	strh	r5, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800032c:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800032e:	f04f 0024 	mov.w	r0, #36	; 0x24
 8000332:	801f      	strh	r7, [r3, #0]
 8000334:	801c      	strh	r4, [r3, #0]
 8000336:	8018      	strh	r0, [r3, #0]
 8000338:	f04f 000b 	mov.w	r0, #11
 800033c:	8018      	strh	r0, [r3, #0]
 800033e:	f04f 000e 	mov.w	r0, #14
 8000342:	f04f 0409 	mov.w	r4, #9
 8000346:	8018      	strh	r0, [r3, #0]
 8000348:	f04f 0054 	mov.w	r0, #84	; 0x54
 800034c:	801c      	strh	r4, [r3, #0]
 800034e:	8018      	strh	r0, [r3, #0]
 8000350:	f04f 00a8 	mov.w	r0, #168	; 0xa8
 8000354:	8018      	strh	r0, [r3, #0]
 8000356:	f04f 0046 	mov.w	r0, #70	; 0x46
 800035a:	8018      	strh	r0, [r3, #0]
 800035c:	f04f 000c 	mov.w	r0, #12
 8000360:	8018      	strh	r0, [r3, #0]
 8000362:	f04f 0017 	mov.w	r0, #23
 8000366:	f04f 0a07 	mov.w	sl, #7
 800036a:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800036c:	f04f 00e1 	mov.w	r0, #225	; 0xe1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000370:	801c      	strh	r4, [r3, #0]
 8000372:	801f      	strh	r7, [r3, #0]
 8000374:	f8a3 a000 	strh.w	sl, [r3]
 8000378:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800037a:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800037c:	f04f 0019 	mov.w	r0, #25
 8000380:	8019      	strh	r1, [r3, #0]
 8000382:	8018      	strh	r0, [r3, #0]
 8000384:	f04f 001b 	mov.w	r0, #27
 8000388:	8018      	strh	r0, [r3, #0]
 800038a:	f04f 0004 	mov.w	r0, #4
 800038e:	262a      	movs	r6, #42	; 0x2a
 8000390:	8018      	strh	r0, [r3, #0]
 8000392:	f04f 0047 	mov.w	r0, #71	; 0x47
 8000396:	f8a3 b000 	strh.w	fp, [r3]
 800039a:	f04f 0e06 	mov.w	lr, #6
 800039e:	f8a3 a000 	strh.w	sl, [r3]
 80003a2:	801e      	strh	r6, [r3, #0]
 80003a4:	8018      	strh	r0, [r3, #0]
 80003a6:	f04f 0038 	mov.w	r0, #56	; 0x38
 80003aa:	f8a3 9000 	strh.w	r9, [r3]
 80003ae:	f8a3 8000 	strh.w	r8, [r3]
 80003b2:	f8a3 e000 	strh.w	lr, [r3]
 80003b6:	f8a3 e000 	strh.w	lr, [r3]
 80003ba:	f8a3 c000 	strh.w	ip, [r3]
 80003be:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80003c0:	f04f 0036 	mov.w	r0, #54	; 0x36
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80003c4:	801f      	strh	r7, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80003c6:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80003c8:	f04f 00c8 	mov.w	r0, #200	; 0xc8
 80003cc:	8018      	strh	r0, [r3, #0]
 80003ce:	f04f 00ef 	mov.w	r0, #239	; 0xef
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80003d2:	8016      	strh	r6, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80003d4:	8019      	strh	r1, [r3, #0]
 80003d6:	8019      	strh	r1, [r3, #0]
 80003d8:	8019      	strh	r1, [r3, #0]
 80003da:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80003dc:	f04f 002b 	mov.w	r0, #43	; 0x2b
 80003e0:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80003e2:	8019      	strh	r1, [r3, #0]
 80003e4:	8019      	strh	r1, [r3, #0]
 80003e6:	f04f 013f 	mov.w	r1, #63	; 0x3f
 80003ea:	801d      	strh	r5, [r3, #0]
 80003ec:	f04f 0055 	mov.w	r0, #85	; 0x55
 80003f0:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80003f2:	f04f 013a 	mov.w	r1, #58	; 0x3a
 80003f6:	8011      	strh	r1, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80003f8:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80003fa:	f04f 0311 	mov.w	r3, #17
 80003fe:	4906      	ldr	r1, [pc, #24]	; (8000418 <LCD_REG_Config+0x1e0>)
 8000400:	8013      	strh	r3, [r2, #0]
void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000402:	3901      	subs	r1, #1
 8000404:	d1fd      	bne.n	8000402 <LCD_REG_Config+0x1ca>
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000406:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800040a:	2229      	movs	r2, #41	; 0x29
 800040c:	801a      	strh	r2, [r3, #0]
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
	
	
}
 800040e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000412:	bf00      	nop
 8000414:	60020000 	.word	0x60020000
 8000418:	0002bffc 	.word	0x0002bffc

0800041c <LCD_INIT>:
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 800041c:	2200      	movs	r2, #0
 800041e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
{
 8000422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000426:	481c      	ldr	r0, [pc, #112]	; (8000498 <LCD_INIT+0x7c>)
 8000428:	f001 fa10 	bl	800184c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 800042c:	2200      	movs	r2, #0
 800042e:	2102      	movs	r1, #2
 8000430:	481a      	ldr	r0, [pc, #104]	; (800049c <LCD_INIT+0x80>)
 8000432:	f001 fa0b 	bl	800184c <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000436:	4b1a      	ldr	r3, [pc, #104]	; (80004a0 <LCD_INIT+0x84>)
void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000438:	3b01      	subs	r3, #1
 800043a:	d1fd      	bne.n	8000438 <LCD_INIT+0x1c>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 800043c:	2201      	movs	r2, #1
 800043e:	2102      	movs	r1, #2
 8000440:	4816      	ldr	r0, [pc, #88]	; (800049c <LCD_INIT+0x80>)
 8000442:	f001 fa03 	bl	800184c <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000446:	4c16      	ldr	r4, [pc, #88]	; (80004a0 <LCD_INIT+0x84>)
void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000448:	3c01      	subs	r4, #1
 800044a:	d1fd      	bne.n	8000448 <LCD_INIT+0x2c>
	LCD_REG_Config();
 800044c:	f7ff fef4 	bl	8000238 <LCD_REG_Config>
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000450:	f04f 082a 	mov.w	r8, #42	; 0x2a
 8000454:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000458:	27ef      	movs	r7, #239	; 0xef
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800045a:	262b      	movs	r6, #43	; 0x2b
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800045c:	2501      	movs	r5, #1
 800045e:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000462:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 8000466:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800046a:	f04f 31ff 	mov.w	r1, #4294967295
 800046e:	4a0d      	ldr	r2, [pc, #52]	; (80004a4 <LCD_INIT+0x88>)
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000470:	f8a0 8000 	strh.w	r8, [r0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000474:	8014      	strh	r4, [r2, #0]
 8000476:	8014      	strh	r4, [r2, #0]
 8000478:	8014      	strh	r4, [r2, #0]
 800047a:	8017      	strh	r7, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800047c:	8006      	strh	r6, [r0, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800047e:	8014      	strh	r4, [r2, #0]
 8000480:	8014      	strh	r4, [r2, #0]
 8000482:	8015      	strh	r5, [r2, #0]
 8000484:	f8a2 e000 	strh.w	lr, [r2]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000488:	f8a0 c000 	strh.w	ip, [r0]
	uint32_t i = 0;
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
		
	for ( i = 0; i < usPoint; i ++ )
 800048c:	3b01      	subs	r3, #1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800048e:	8011      	strh	r1, [r2, #0]
	for ( i = 0; i < usPoint; i ++ )
 8000490:	d1fc      	bne.n	800048c <LCD_INIT+0x70>
}
 8000492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000496:	bf00      	nop
 8000498:	40011400 	.word	0x40011400
 800049c:	40011800 	.word	0x40011800
 80004a0:	0002bffc 	.word	0x0002bffc
 80004a4:	60020000 	.word	0x60020000

080004a8 <LCD_OpenWindow>:
{	
 80004a8:	b530      	push	{r4, r5, lr}
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80004aa:	f04f 4ec0 	mov.w	lr, #1610612736	; 0x60000000
 80004ae:	242a      	movs	r4, #42	; 0x2a
 80004b0:	252b      	movs	r5, #43	; 0x2b
 80004b2:	f8ae 4000 	strh.w	r4, [lr]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80004b6:	4c11      	ldr	r4, [pc, #68]	; (80004fc <LCD_OpenWindow+0x54>)
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 80004b8:	ea4f 2c10 	mov.w	ip, r0, lsr #8
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80004bc:	f8a4 c000 	strh.w	ip, [r4]
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 80004c0:	eb00 0c02 	add.w	ip, r0, r2
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 80004c4:	3a01      	subs	r2, #1
 80004c6:	4402      	add	r2, r0
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 80004c8:	f10c 3cff 	add.w	ip, ip, #4294967295
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 80004cc:	b2c0      	uxtb	r0, r0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80004ce:	8020      	strh	r0, [r4, #0]
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 80004d0:	b2d2      	uxtb	r2, r2
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 80004d2:	f3cc 200f 	ubfx	r0, ip, #8, #16
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80004d6:	8020      	strh	r0, [r4, #0]
 80004d8:	8022      	strh	r2, [r4, #0]
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80004da:	18ca      	adds	r2, r1, r3
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80004dc:	3b01      	subs	r3, #1
 80004de:	440b      	add	r3, r1
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80004e0:	3a01      	subs	r2, #1
	LCD_Write_Data ( usPAGE >> 8  );
 80004e2:	0a08      	lsrs	r0, r1, #8
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80004e4:	f3c2 220f 	ubfx	r2, r2, #8, #16
	LCD_Write_Data ( usPAGE & 0xff  );
 80004e8:	b2c9      	uxtb	r1, r1
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80004ea:	b2db      	uxtb	r3, r3
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80004ec:	f8ae 5000 	strh.w	r5, [lr]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80004f0:	8020      	strh	r0, [r4, #0]
 80004f2:	8021      	strh	r1, [r4, #0]
 80004f4:	8022      	strh	r2, [r4, #0]
 80004f6:	8023      	strh	r3, [r4, #0]
}
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	bf00      	nop
 80004fc:	60020000 	.word	0x60020000

08000500 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000504:	f04f 46c0 	mov.w	r6, #1610612736	; 0x60000000
 8000508:	242a      	movs	r4, #42	; 0x2a
 800050a:	f04f 082b 	mov.w	r8, #43	; 0x2b
 800050e:	272c      	movs	r7, #44	; 0x2c
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000510:	fb03 f502 	mul.w	r5, r3, r2
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000514:	f102 3eff 	add.w	lr, r2, #4294967295
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000518:	4402      	add	r2, r0
{
 800051a:	f8bd c020 	ldrh.w	ip, [sp, #32]
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 800051e:	eb01 0903 	add.w	r9, r1, r3
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000522:	8034      	strh	r4, [r6, #0]
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000524:	3a01      	subs	r2, #1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000526:	4c14      	ldr	r4, [pc, #80]	; (8000578 <LCD_Clear+0x78>)
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000528:	3b01      	subs	r3, #1
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800052a:	4486      	add	lr, r0
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 800052c:	f3c2 220f 	ubfx	r2, r2, #8, #16
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000530:	440b      	add	r3, r1
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000532:	ea4f 2a10 	mov.w	sl, r0, lsr #8
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000536:	f109 39ff 	add.w	r9, r9, #4294967295
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 800053a:	b2c0      	uxtb	r0, r0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800053c:	f8a4 a000 	strh.w	sl, [r4]
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000540:	fa5f fe8e 	uxtb.w	lr, lr
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000544:	8020      	strh	r0, [r4, #0]
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000546:	f3c9 290f 	ubfx	r9, r9, #8, #16
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800054a:	8022      	strh	r2, [r4, #0]
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 800054c:	b2db      	uxtb	r3, r3
	LCD_Write_Data ( usPAGE >> 8  );
 800054e:	0a0a      	lsrs	r2, r1, #8
	LCD_Write_Data ( usPAGE & 0xff  );
 8000550:	b2c9      	uxtb	r1, r1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000552:	f8a4 e000 	strh.w	lr, [r4]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000556:	f8a6 8000 	strh.w	r8, [r6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800055a:	8022      	strh	r2, [r4, #0]
 800055c:	8021      	strh	r1, [r4, #0]
 800055e:	f8a4 9000 	strh.w	r9, [r4]
 8000562:	8023      	strh	r3, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000564:	8037      	strh	r7, [r6, #0]
	for ( i = 0; i < usPoint; i ++ )
 8000566:	b12d      	cbz	r5, 8000574 <LCD_Clear+0x74>
 8000568:	2300      	movs	r3, #0
 800056a:	3301      	adds	r3, #1
 800056c:	429d      	cmp	r5, r3
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800056e:	f8a4 c000 	strh.w	ip, [r4]
	for ( i = 0; i < usPoint; i ++ )
 8000572:	d1fa      	bne.n	800056a <LCD_Clear+0x6a>
	
}
 8000574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000578:	60020000 	.word	0x60020000

0800057c <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 800057c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000580:	4686      	mov	lr, r0
	while ( * pStr != '\0' )
 8000582:	7810      	ldrb	r0, [r2, #0]
{
 8000584:	b083      	sub	sp, #12
	while ( * pStr != '\0' )
 8000586:	2800      	cmp	r0, #0
 8000588:	d06d      	beq.n	8000666 <LCD_DrawString+0xea>
 800058a:	4690      	mov	r8, r2
 800058c:	468c      	mov	ip, r1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800058e:	f04f 46c0 	mov.w	r6, #1610612736	; 0x60000000
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000592:	f04f 0900 	mov.w	r9, #0
 8000596:	211f      	movs	r1, #31
 8000598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800059c:	4b39      	ldr	r3, [pc, #228]	; (8000684 <LCD_DrawString+0x108>)
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800059e:	f1be 0fe8 	cmp.w	lr, #232	; 0xe8
 80005a2:	d905      	bls.n	80005b0 <LCD_DrawString+0x34>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80005a4:	f04f 0e00 	mov.w	lr, #0
			usP += HEIGHT_EN_CHAR;
 80005a8:	f10c 0c10 	add.w	ip, ip, #16
 80005ac:	fa1f fc8c 	uxth.w	ip, ip
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80005b0:	f5bc 7f98 	cmp.w	ip, #304	; 0x130
 80005b4:	d85a      	bhi.n	800066c <LCD_DrawString+0xf0>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 80005b6:	f10e 0507 	add.w	r5, lr, #7
 80005ba:	b2ac      	uxth	r4, r5
 80005bc:	9400      	str	r4, [sp, #0]
 80005be:	f10e 0408 	add.w	r4, lr, #8
 80005c2:	f10c 070f 	add.w	r7, ip, #15
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80005c6:	46f3      	mov	fp, lr
 80005c8:	fa1f fe84 	uxth.w	lr, r4
	LCD_Write_Data ( usPAGE & 0xff  );
 80005cc:	fa5f f48c 	uxtb.w	r4, ip
 80005d0:	9401      	str	r4, [sp, #4]
	LCD_Write_Data ( usPAGE >> 8  );
 80005d2:	ea4f 2a1c 	mov.w	sl, ip, lsr #8
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80005d6:	f3c7 2407 	ubfx	r4, r7, #8, #8
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80005da:	b2ff      	uxtb	r7, r7
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80005dc:	f04f 052a 	mov.w	r5, #42	; 0x2a
 80005e0:	8035      	strh	r5, [r6, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80005e2:	9d00      	ldr	r5, [sp, #0]
 80005e4:	f8a3 9000 	strh.w	r9, [r3]
 80005e8:	f8a3 b000 	strh.w	fp, [r3]
 80005ec:	f8a3 9000 	strh.w	r9, [r3]
 80005f0:	801d      	strh	r5, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80005f2:	252b      	movs	r5, #43	; 0x2b
 80005f4:	8035      	strh	r5, [r6, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80005f6:	9d01      	ldr	r5, [sp, #4]
 80005f8:	f8a3 a000 	strh.w	sl, [r3]
 80005fc:	801d      	strh	r5, [r3, #0]
 80005fe:	801c      	strh	r4, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000600:	242c      	movs	r4, #44	; 0x2c
	ucRelativePositon = cChar - ' ';
 8000602:	3820      	subs	r0, #32
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000604:	801f      	strh	r7, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000606:	8034      	strh	r4, [r6, #0]
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000608:	4c1f      	ldr	r4, [pc, #124]	; (8000688 <LCD_DrawString+0x10c>)
 800060a:	b2c0      	uxtb	r0, r0
 800060c:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8000610:	3410      	adds	r4, #16
 8000612:	eb04 1000 	add.w	r0, r4, r0, lsl #4
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8000616:	f815 4b01 	ldrb.w	r4, [r5], #1
			if ( ucTemp & 0x01 )
 800061a:	07e7      	lsls	r7, r4, #31
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800061c:	bf54      	ite	pl
 800061e:	801a      	strhpl	r2, [r3, #0]
 8000620:	8019      	strhmi	r1, [r3, #0]
			if ( ucTemp & 0x01 )
 8000622:	07a7      	lsls	r7, r4, #30
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000624:	bf54      	ite	pl
 8000626:	801a      	strhpl	r2, [r3, #0]
 8000628:	8019      	strhmi	r1, [r3, #0]
			if ( ucTemp & 0x01 )
 800062a:	0767      	lsls	r7, r4, #29
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800062c:	bf54      	ite	pl
 800062e:	801a      	strhpl	r2, [r3, #0]
 8000630:	8019      	strhmi	r1, [r3, #0]
			if ( ucTemp & 0x01 )
 8000632:	0727      	lsls	r7, r4, #28
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000634:	bf54      	ite	pl
 8000636:	801a      	strhpl	r2, [r3, #0]
 8000638:	8019      	strhmi	r1, [r3, #0]
			if ( ucTemp & 0x01 )
 800063a:	06e7      	lsls	r7, r4, #27
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800063c:	bf54      	ite	pl
 800063e:	801a      	strhpl	r2, [r3, #0]
 8000640:	8019      	strhmi	r1, [r3, #0]
			if ( ucTemp & 0x01 )
 8000642:	06a7      	lsls	r7, r4, #26
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000644:	bf54      	ite	pl
 8000646:	801a      	strhpl	r2, [r3, #0]
 8000648:	8019      	strhmi	r1, [r3, #0]
			if ( ucTemp & 0x01 )
 800064a:	0667      	lsls	r7, r4, #25
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800064c:	bf54      	ite	pl
 800064e:	801a      	strhpl	r2, [r3, #0]
 8000650:	8019      	strhmi	r1, [r3, #0]
			if ( ucTemp & 0x01 )
 8000652:	09e4      	lsrs	r4, r4, #7
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000654:	bf0c      	ite	eq
 8000656:	801a      	strheq	r2, [r3, #0]
 8000658:	8019      	strhne	r1, [r3, #0]
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800065a:	42a8      	cmp	r0, r5
 800065c:	d1db      	bne.n	8000616 <LCD_DrawString+0x9a>
	while ( * pStr != '\0' )
 800065e:	f818 0f01 	ldrb.w	r0, [r8, #1]!
 8000662:	2800      	cmp	r0, #0
 8000664:	d19b      	bne.n	800059e <LCD_DrawString+0x22>
		
		usC += WIDTH_EN_CHAR;
		
	}
	
}
 8000666:	b003      	add	sp, #12
 8000668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800066c:	2400      	movs	r4, #0
 800066e:	2507      	movs	r5, #7
 8000670:	270f      	movs	r7, #15
 8000672:	f04f 0e08 	mov.w	lr, #8
			usP = LCD_DispWindow_Start_PAGE;
 8000676:	46a4      	mov	ip, r4
 8000678:	46a2      	mov	sl, r4
			usC = LCD_DispWindow_Start_COLUMN;
 800067a:	46a3      	mov	fp, r4
 800067c:	9500      	str	r5, [sp, #0]
 800067e:	9401      	str	r4, [sp, #4]
 8000680:	e7ac      	b.n	80005dc <LCD_DrawString+0x60>
 8000682:	bf00      	nop
 8000684:	60020000 	.word	0x60020000
 8000688:	080028c8 	.word	0x080028c8

0800068c <LCD_DrawDot>:


//Task 2
void LCD_DrawDot(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usColor)	
{	
 800068c:	b530      	push	{r4, r5, lr}
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800068e:	f04f 4cc0 	mov.w	ip, #1610612736	; 0x60000000
 8000692:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8000696:	252b      	movs	r5, #43	; 0x2b
 8000698:	242c      	movs	r4, #44	; 0x2c
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <LCD_DrawDot+0x40>)
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800069c:	f8ac e000 	strh.w	lr, [ip]
	 *  Task 2 : Implement the LCD_DrawDot to turn on a particular dot on the LCD.
	 */

	// Column address set-----------------------------------------------------------
	LCD_Write_Cmd(0x2A);
	LCD_Write_Data(usCOLUMN >> 8);
 80006a0:	ea4f 2e10 	mov.w	lr, r0, lsr #8
	LCD_Write_Data(usCOLUMN & 0xff);
 80006a4:	b2c0      	uxtb	r0, r0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80006a6:	f8a3 e000 	strh.w	lr, [r3]
 80006aa:	8018      	strh	r0, [r3, #0]
 80006ac:	f8a3 e000 	strh.w	lr, [r3]
 80006b0:	8018      	strh	r0, [r3, #0]
	LCD_Write_Data(usCOLUMN >> 8);
	LCD_Write_Data(usCOLUMN & 0xff);

	// Page address set-------------------------------------------------------------
	LCD_Write_Cmd(0x2B);
	LCD_Write_Data(usPAGE >> 8);
 80006b2:	0a08      	lsrs	r0, r1, #8
	LCD_Write_Data(usPAGE & 0xff);
 80006b4:	b2c9      	uxtb	r1, r1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80006b6:	f8ac 5000 	strh.w	r5, [ip]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80006ba:	8018      	strh	r0, [r3, #0]
 80006bc:	8019      	strh	r1, [r3, #0]
 80006be:	8018      	strh	r0, [r3, #0]
 80006c0:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80006c2:	f8ac 4000 	strh.w	r4, [ip]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80006c6:	801a      	strh	r2, [r3, #0]

	// Memory write-----------------------------------------------------------------
	LCD_Write_Cmd(0x2C);
	LCD_Write_Data(usColor);
		
}
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	bf00      	nop
 80006cc:	60020000 	.word	0x60020000

080006d0 <XferCpltCallback>:
}

/* USER CODE BEGIN 4 */

void XferCpltCallback(DMA_HandleTypeDef* hdma) {
	__NOP();
 80006d0:	bf00      	nop
}
 80006d2:	4770      	bx	lr

080006d4 <movePlatform>:
void movePlatform(uint16_t kirbyX) {
 80006d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (currentPos < xPos) {
 80006d8:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80007b0 <movePlatform+0xdc>
	uint16_t xPos = kirbyX - 160;
 80006dc:	f1a0 07a0 	sub.w	r7, r0, #160	; 0xa0
	if (currentPos < xPos) {
 80006e0:	f8b8 3000 	ldrh.w	r3, [r8]
	uint16_t xPos = kirbyX - 160;
 80006e4:	b2bf      	uxth	r7, r7
	if (currentPos < xPos) {
 80006e6:	42bb      	cmp	r3, r7
 80006e8:	d245      	bcs.n	8000776 <movePlatform+0xa2>
		uint16_t targetCol = (xPos - 1) % 320;
 80006ea:	2400      	movs	r4, #0
 80006ec:	4931      	ldr	r1, [pc, #196]	; (80007b4 <movePlatform+0xe0>)
 80006ee:	1e7b      	subs	r3, r7, #1
 80006f0:	fb81 2103 	smull	r2, r1, r1, r3
 80006f4:	17da      	asrs	r2, r3, #31
 80006f6:	ebc2 12e1 	rsb	r2, r2, r1, asr #7
 80006fa:	4d2f      	ldr	r5, [pc, #188]	; (80007b8 <movePlatform+0xe4>)
 80006fc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000700:	eba3 1382 	sub.w	r3, r3, r2, lsl #6
 8000704:	b29e      	uxth	r6, r3
		for (uint16_t row = 0; row < 209; row++) {
 8000706:	eb05 0547 	add.w	r5, r5, r7, lsl #1
			LCD_DrawDot(targetCol, row, platformImg[882 * row + xPos + 320 - 1]);
 800070a:	f8b5 227e 	ldrh.w	r2, [r5, #638]	; 0x27e
 800070e:	b2a1      	uxth	r1, r4
 8000710:	4630      	mov	r0, r6
		for (uint16_t row = 0; row < 209; row++) {
 8000712:	3401      	adds	r4, #1
			LCD_DrawDot(targetCol, row, platformImg[882 * row + xPos + 320 - 1]);
 8000714:	f7ff ffba 	bl	800068c <LCD_DrawDot>
		for (uint16_t row = 0; row < 209; row++) {
 8000718:	2cd1      	cmp	r4, #209	; 0xd1
 800071a:	f205 65e4 	addw	r5, r5, #1764	; 0x6e4
 800071e:	d1f4      	bne.n	800070a <movePlatform+0x36>
		uint16_t targetCol = xPos % 320;
 8000720:	4b26      	ldr	r3, [pc, #152]	; (80007bc <movePlatform+0xe8>)
 8000722:	fba3 2307 	umull	r2, r3, r3, r7
 8000726:	0a1b      	lsrs	r3, r3, #8
 8000728:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800072c:	eba7 1683 	sub.w	r6, r7, r3, lsl #6
 8000730:	b2b6      	uxth	r6, r6
	  LCD_Write_Cmd(0x33);
 8000732:	2033      	movs	r0, #51	; 0x33
	currentPos = xPos;
 8000734:	f8a8 7000 	strh.w	r7, [r8]
	  LCD_Write_Cmd(0x33);
 8000738:	f7ff fd74 	bl	8000224 <LCD_Write_Cmd>
	  LCD_Write_Data(0x00);
 800073c:	2000      	movs	r0, #0
 800073e:	f7ff fd75 	bl	800022c <LCD_Write_Data>
	  LCD_Write_Data(0x00);
 8000742:	2000      	movs	r0, #0
 8000744:	f7ff fd72 	bl	800022c <LCD_Write_Data>
	  LCD_Write_Data(0x01);
 8000748:	2001      	movs	r0, #1
 800074a:	f7ff fd6f 	bl	800022c <LCD_Write_Data>
	  LCD_Write_Data(0x40);
 800074e:	2040      	movs	r0, #64	; 0x40
 8000750:	f7ff fd6c 	bl	800022c <LCD_Write_Data>
	  LCD_Write_Data(0x00);
 8000754:	2000      	movs	r0, #0
 8000756:	f7ff fd69 	bl	800022c <LCD_Write_Data>
	  LCD_Write_Data(0x00);
 800075a:	2000      	movs	r0, #0
 800075c:	f7ff fd66 	bl	800022c <LCD_Write_Data>
	  LCD_Write_Cmd(0x37);
 8000760:	2037      	movs	r0, #55	; 0x37
 8000762:	f7ff fd5f 	bl	8000224 <LCD_Write_Cmd>
	  LCD_Write_Data((xPos % 320) >> 8);
 8000766:	0a30      	lsrs	r0, r6, #8
 8000768:	f7ff fd60 	bl	800022c <LCD_Write_Data>
	  LCD_Write_Data((xPos % 320) & 0xff);
 800076c:	b2f0      	uxtb	r0, r6
}
 800076e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	  LCD_Write_Data((xPos % 320) & 0xff);
 8000772:	f7ff bd5b 	b.w	800022c <LCD_Write_Data>
	} else if (currentPos > xPos) {
 8000776:	d919      	bls.n	80007ac <movePlatform+0xd8>
		uint16_t targetCol = xPos % 320;
 8000778:	2500      	movs	r5, #0
 800077a:	462c      	mov	r4, r5
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <movePlatform+0xe8>)
 800077e:	4a0e      	ldr	r2, [pc, #56]	; (80007b8 <movePlatform+0xe4>)
 8000780:	fba3 1307 	umull	r1, r3, r3, r7
 8000784:	0a1b      	lsrs	r3, r3, #8
 8000786:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800078a:	eba7 1683 	sub.w	r6, r7, r3, lsl #6
 800078e:	eb02 0947 	add.w	r9, r2, r7, lsl #1
 8000792:	b2b6      	uxth	r6, r6
			LCD_DrawDot(targetCol, row, platformImg[882 * row + xPos]);
 8000794:	f839 2015 	ldrh.w	r2, [r9, r5, lsl #1]
 8000798:	b2a1      	uxth	r1, r4
 800079a:	4630      	mov	r0, r6
		for (uint16_t row = 0; row < 209; row++) {
 800079c:	3401      	adds	r4, #1
			LCD_DrawDot(targetCol, row, platformImg[882 * row + xPos]);
 800079e:	f7ff ff75 	bl	800068c <LCD_DrawDot>
		for (uint16_t row = 0; row < 209; row++) {
 80007a2:	2cd1      	cmp	r4, #209	; 0xd1
 80007a4:	f205 3572 	addw	r5, r5, #882	; 0x372
 80007a8:	d1f4      	bne.n	8000794 <movePlatform+0xc0>
 80007aa:	e7c2      	b.n	8000732 <movePlatform+0x5e>
}
 80007ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007b0:	2000008c 	.word	0x2000008c
 80007b4:	66666667 	.word	0x66666667
 80007b8:	08006b78 	.word	0x08006b78
 80007bc:	cccccccd 	.word	0xcccccccd

080007c0 <displayKirbyFacingRight>:
void displayKirbyFacingRight(const uint16_t* frame, uint16_t xPos, uint16_t yPos) {
 80007c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007c4:	460e      	mov	r6, r1
 80007c6:	b083      	sub	sp, #12
 80007c8:	f500 639b 	add.w	r3, r0, #1240	; 0x4d8
				uint16_t newColor = platformImg[882 * (displayYPos) + (xPos + x)];
 80007cc:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8000840 <displayKirbyFacingRight+0x80>
void displayKirbyFacingRight(const uint16_t* frame, uint16_t xPos, uint16_t yPos) {
 80007d0:	9201      	str	r2, [sp, #4]
 80007d2:	f100 042c 	add.w	r4, r0, #44	; 0x2c
 80007d6:	9300      	str	r3, [sp, #0]
		uint16_t displayXPos = (xPos + x) % 320;
 80007d8:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <displayKirbyFacingRight+0x84>)
			if (color == 0x4B4E) {
 80007da:	f644 374e 	movw	r7, #19278	; 0x4b4e
		uint16_t displayXPos = (xPos + x) % 320;
 80007de:	fba3 3006 	umull	r3, r0, r3, r6
 80007e2:	0a00      	lsrs	r0, r0, #8
 80007e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80007e8:	eba6 1080 	sub.w	r0, r6, r0, lsl #6
				uint16_t newColor = platformImg[882 * (displayYPos) + (xPos + x)];
 80007ec:	f240 3972 	movw	r9, #882	; 0x372
		uint16_t displayXPos = (xPos + x) % 320;
 80007f0:	9d01      	ldr	r5, [sp, #4]
 80007f2:	f1a4 0b2e 	sub.w	fp, r4, #46	; 0x2e
 80007f6:	fa1f fa80 	uxth.w	sl, r0
		for (int y = 0; y < 23; y++) {
 80007fa:	e007      	b.n	800080c <displayKirbyFacingRight+0x4c>
			LCD_DrawDot(displayXPos, displayYPos, color);
 80007fc:	4629      	mov	r1, r5
 80007fe:	4650      	mov	r0, sl
 8000800:	f7ff ff44 	bl	800068c <LCD_DrawDot>
		for (int y = 0; y < 23; y++) {
 8000804:	3501      	adds	r5, #1
 8000806:	45a3      	cmp	fp, r4
 8000808:	b2ad      	uxth	r5, r5
 800080a:	d00f      	beq.n	800082c <displayKirbyFacingRight+0x6c>
			uint16_t color = frame[23 * x + y];
 800080c:	f83b 2f02 	ldrh.w	r2, [fp, #2]!
			if (color == 0x4B4E) {
 8000810:	42ba      	cmp	r2, r7
 8000812:	d1f3      	bne.n	80007fc <displayKirbyFacingRight+0x3c>
				uint16_t newColor = platformImg[882 * (displayYPos) + (xPos + x)];
 8000814:	fb09 6305 	mla	r3, r9, r5, r6
			LCD_DrawDot(displayXPos, displayYPos, color);
 8000818:	4629      	mov	r1, r5
 800081a:	4650      	mov	r0, sl
 800081c:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8000820:	f7ff ff34 	bl	800068c <LCD_DrawDot>
		for (int y = 0; y < 23; y++) {
 8000824:	3501      	adds	r5, #1
 8000826:	45a3      	cmp	fp, r4
 8000828:	b2ad      	uxth	r5, r5
 800082a:	d1ef      	bne.n	800080c <displayKirbyFacingRight+0x4c>
	for (int x = 0; x < 26; x++) {
 800082c:	9b00      	ldr	r3, [sp, #0]
 800082e:	342e      	adds	r4, #46	; 0x2e
 8000830:	42a3      	cmp	r3, r4
 8000832:	f106 0601 	add.w	r6, r6, #1
 8000836:	d1cf      	bne.n	80007d8 <displayKirbyFacingRight+0x18>
}
 8000838:	b003      	add	sp, #12
 800083a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800083e:	bf00      	nop
 8000840:	08006b78 	.word	0x08006b78
 8000844:	cccccccd 	.word	0xcccccccd

08000848 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000848:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800084a:	2201      	movs	r2, #1
{
 800084c:	b5d0      	push	{r4, r6, r7, lr}
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800084e:	2001      	movs	r0, #1
{
 8000850:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000852:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000856:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000858:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8000860:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000864:	9308      	str	r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000866:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000868:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000870:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000874:	e9cd 0106 	strd	r0, r1, [sp, #24]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000878:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800087a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087e:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	f000 ffe8 	bl	8001854 <HAL_RCC_OscConfig>
 8000884:	b108      	cbz	r0, 800088a <SystemClock_Config+0x42>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000886:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000888:	e7fe      	b.n	8000888 <SystemClock_Config+0x40>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800088a:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088c:	260f      	movs	r6, #15
 800088e:	2702      	movs	r7, #2
 8000890:	2200      	movs	r2, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000892:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000894:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000898:	4621      	mov	r1, r4
 800089a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089c:	e9cd 6700 	strd	r6, r7, [sp]
 80008a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008a4:	f001 f9c6 	bl	8001c34 <HAL_RCC_ClockConfig>
 80008a8:	b108      	cbz	r0, 80008ae <SystemClock_Config+0x66>
 80008aa:	b672      	cpsid	i
  while (1)
 80008ac:	e7fe      	b.n	80008ac <SystemClock_Config+0x64>
}
 80008ae:	b010      	add	sp, #64	; 0x40
 80008b0:	bdd0      	pop	{r4, r6, r7, pc}
 80008b2:	bf00      	nop

080008b4 <main>:
{
 80008b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	2600      	movs	r6, #0
{
 80008ba:	b09f      	sub	sp, #124	; 0x7c
  HAL_Init();
 80008bc:	f000 fc0a 	bl	80010d4 <HAL_Init>
  SystemClock_Config();
 80008c0:	f7ff ffc2 	bl	8000848 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	e9cd 6610 	strd	r6, r6, [sp, #64]	; 0x40
 80008c8:	e9cd 6612 	strd	r6, r6, [sp, #72]	; 0x48
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008cc:	4c3e      	ldr	r4, [pc, #248]	; (80009c8 <main+0x114>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008ce:	2702      	movs	r7, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d0:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80008d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	f043 0310 	orr.w	r3, r3, #16
 80008da:	61a3      	str	r3, [r4, #24]
 80008dc:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80008de:	4632      	mov	r2, r6
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e0:	f003 0310 	and.w	r3, r3, #16
 80008e4:	930a      	str	r3, [sp, #40]	; 0x28
 80008e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80008ea:	4838      	ldr	r0, [pc, #224]	; (80009cc <main+0x118>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	61a3      	str	r3, [r4, #24]
 80008f2:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008f4:	f04f 0800 	mov.w	r8, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f8:	f003 0304 	and.w	r3, r3, #4
 80008fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80008fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000900:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000902:	f04f 0903 	mov.w	r9, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800090a:	61a3      	str	r3, [r4, #24]
 800090c:	69a3      	ldr	r3, [r4, #24]
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 800090e:	4d30      	ldr	r5, [pc, #192]	; (80009d0 <main+0x11c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000914:	930c      	str	r3, [sp, #48]	; 0x30
 8000916:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000918:	69a3      	ldr	r3, [r4, #24]
 800091a:	f043 0320 	orr.w	r3, r3, #32
 800091e:	61a3      	str	r3, [r4, #24]
 8000920:	69a3      	ldr	r3, [r4, #24]
 8000922:	f003 0320 	and.w	r3, r3, #32
 8000926:	930d      	str	r3, [sp, #52]	; 0x34
 8000928:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800092a:	f000 ff8f 	bl	800184c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800092e:	4632      	mov	r2, r6
 8000930:	4639      	mov	r1, r7
 8000932:	4828      	ldr	r0, [pc, #160]	; (80009d4 <main+0x120>)
 8000934:	f000 ff8a 	bl	800184c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Key_2_Pin;
 8000938:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800093c:	2300      	movs	r3, #0
  HAL_GPIO_Init(Key_2_GPIO_Port, &GPIO_InitStruct);
 800093e:	4826      	ldr	r0, [pc, #152]	; (80009d8 <main+0x124>)
 8000940:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = Key_2_Pin;
 8000942:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000946:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(Key_2_GPIO_Port, &GPIO_InitStruct);
 8000948:	f000 fe52 	bl	80015f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Key_1_Pin;
 800094c:	2201      	movs	r2, #1
 800094e:	2300      	movs	r3, #0
  HAL_GPIO_Init(Key_1_GPIO_Port, &GPIO_InitStruct);
 8000950:	4822      	ldr	r0, [pc, #136]	; (80009dc <main+0x128>)
 8000952:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = Key_1_Pin;
 8000954:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000958:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(Key_1_GPIO_Port, &GPIO_InitStruct);
 800095a:	f000 fe49 	bl	80015f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800095e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000962:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000964:	4819      	ldr	r0, [pc, #100]	; (80009cc <main+0x118>)
 8000966:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000968:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800096c:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000970:	f000 fe3e 	bl	80015f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000974:	2202      	movs	r2, #2
 8000976:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000978:	4816      	ldr	r0, [pc, #88]	; (80009d4 <main+0x120>)
 800097a:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800097c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8000980:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000984:	f000 fe34 	bl	80015f0 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000988:	6963      	ldr	r3, [r4, #20]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_DISABLE;
 800098a:	60ee      	str	r6, [r5, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6163      	str	r3, [r4, #20]
 8000992:	6963      	ldr	r3, [r4, #20]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000994:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	9309      	str	r3, [sp, #36]	; 0x24
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <main+0x12c>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009a0:	9809      	ldr	r0, [sp, #36]	; 0x24
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009a2:	f44f 6080 	mov.w	r0, #1024	; 0x400
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 80009a6:	2240      	movs	r2, #64	; 0x40
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 80009a8:	602b      	str	r3, [r5, #0]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009aa:	f44f 7380 	mov.w	r3, #256	; 0x100
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009ae:	6168      	str	r0, [r5, #20]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 80009b0:	4628      	mov	r0, r5
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 80009b2:	e9c5 1201 	strd	r1, r2, [r5, #4]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 80009b6:	61ae      	str	r6, [r5, #24]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 80009b8:	61ee      	str	r6, [r5, #28]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009ba:	612b      	str	r3, [r5, #16]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 80009bc:	f000 fc36 	bl	800122c <HAL_DMA_Init>
 80009c0:	b180      	cbz	r0, 80009e4 <main+0x130>
 80009c2:	b672      	cpsid	i
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <main+0x110>
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40011400 	.word	0x40011400
 80009d0:	20000090 	.word	0x20000090
 80009d4:	40011800 	.word	0x40011800
 80009d8:	40011000 	.word	0x40011000
 80009dc:	40010800 	.word	0x40010800
 80009e0:	40020008 	.word	0x40020008
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009e4:	4604      	mov	r4, r0
 80009e6:	4602      	mov	r2, r0
 80009e8:	4601      	mov	r1, r0
 80009ea:	200b      	movs	r0, #11
 80009ec:	f000 fbba 	bl	8001164 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009f0:	200b      	movs	r0, #11
 80009f2:	f000 fbf5 	bl	80011e0 <HAL_NVIC_EnableIRQ>
  Timing.AddressSetupTime = 15;
 80009f6:	230f      	movs	r3, #15
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80009f8:	2110      	movs	r1, #16
  Timing.AddressHoldTime = 15;
 80009fa:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  Timing.BusTurnAroundDuration = 15;
 80009fe:	9313      	str	r3, [sp, #76]	; 0x4c
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000a00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000a04:	48c0      	ldr	r0, [pc, #768]	; (8000d08 <main+0x454>)
  Timing.CLKDivision = 16;
 8000a06:	9114      	str	r1, [sp, #80]	; 0x50
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000a08:	6141      	str	r1, [r0, #20]
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000a0a:	f04f 4620 	mov.w	r6, #2684354560	; 0xa0000000
  Timing.DataLatency = 17;
 8000a0e:	2111      	movs	r1, #17
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000a10:	6283      	str	r3, [r0, #40]	; 0x28
  Timing.DataSetupTime = 255;
 8000a12:	23ff      	movs	r3, #255	; 0xff
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000a14:	4fbd      	ldr	r7, [pc, #756]	; (8000d0c <main+0x458>)
  Timing.DataLatency = 17;
 8000a16:	9115      	str	r1, [sp, #84]	; 0x54
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000a18:	4622      	mov	r2, r4
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000a1a:	e9c0 6700 	strd	r6, r7, [r0]
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000a1e:	a910      	add	r1, sp, #64	; 0x40
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000a20:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000a24:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000a28:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000a2c:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000a30:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000a34:	9416      	str	r4, [sp, #88]	; 0x58
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000a36:	6104      	str	r4, [r0, #16]
  Timing.DataSetupTime = 255;
 8000a38:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000a3a:	f001 f9cb 	bl	8001dd4 <HAL_SRAM_Init>
 8000a3e:	9004      	str	r0, [sp, #16]
 8000a40:	2800      	cmp	r0, #0
 8000a42:	f040 80e1 	bne.w	8000c08 <main+0x354>
  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000a46:	4ab2      	ldr	r2, [pc, #712]	; (8000d10 <main+0x45c>)
 8000a48:	4cb2      	ldr	r4, [pc, #712]	; (8000d14 <main+0x460>)
 8000a4a:	69d3      	ldr	r3, [r2, #28]
 8000a4c:	4fb2      	ldr	r7, [pc, #712]	; (8000d18 <main+0x464>)
 8000a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a52:	61d3      	str	r3, [r2, #28]
  hdma_memtomem_dma1_channel1.XferCpltCallback = &XferCpltCallback;
 8000a54:	4bb1      	ldr	r3, [pc, #708]	; (8000d1c <main+0x468>)
	  HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel1, (uint32_t)(&platformImg[882 * y]), (uint32_t)0x60020000, 320);
 8000a56:	4eb2      	ldr	r6, [pc, #712]	; (8000d20 <main+0x46c>)
  hdma_memtomem_dma1_channel1.XferCpltCallback = &XferCpltCallback;
 8000a58:	62ab      	str	r3, [r5, #40]	; 0x28
  LCD_INIT();
 8000a5a:	f7ff fcdf 	bl	800041c <LCD_INIT>
  LCD_Write_Cmd(0x36);
 8000a5e:	2036      	movs	r0, #54	; 0x36
 8000a60:	f7ff fbe0 	bl	8000224 <LCD_Write_Cmd>
  LCD_Write_Data(0x68);
 8000a64:	2068      	movs	r0, #104	; 0x68
 8000a66:	f7ff fbe1 	bl	800022c <LCD_Write_Data>
  LCD_OpenWindow(0, 0, 320, 240);
 8000a6a:	9904      	ldr	r1, [sp, #16]
 8000a6c:	23f0      	movs	r3, #240	; 0xf0
 8000a6e:	4608      	mov	r0, r1
 8000a70:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000a74:	f7ff fd18 	bl	80004a8 <LCD_OpenWindow>
  LCD_Write_Cmd ( CMD_SetPixel );
 8000a78:	202c      	movs	r0, #44	; 0x2c
 8000a7a:	f7ff fbd3 	bl	8000224 <LCD_Write_Cmd>
	  HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel1, (uint32_t)(&platformImg[882 * y]), (uint32_t)0x60020000, 320);
 8000a7e:	4621      	mov	r1, r4
 8000a80:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000a84:	4632      	mov	r2, r6
 8000a86:	4628      	mov	r0, r5
 8000a88:	f000 fc16 	bl	80012b8 <HAL_DMA_Start_IT>
  for (int y = 0; y < 209; y++) {
 8000a8c:	f204 64e4 	addw	r4, r4, #1764	; 0x6e4
	  HAL_Delay(1);
 8000a90:	2001      	movs	r0, #1
 8000a92:	f000 fb43 	bl	800111c <HAL_Delay>
  for (int y = 0; y < 209; y++) {
 8000a96:	42a7      	cmp	r7, r4
 8000a98:	d1f1      	bne.n	8000a7e <main+0x1ca>
  struct Kirby kirby = {
 8000a9a:	2332      	movs	r3, #50	; 0x32
 8000a9c:	9303      	str	r3, [sp, #12]
 8000a9e:	2364      	movs	r3, #100	; 0x64
  uint8_t direction = 0;
 8000aa0:	2400      	movs	r4, #0
  struct Kirby kirby = {
 8000aa2:	4ea0      	ldr	r6, [pc, #640]	; (8000d24 <main+0x470>)
 8000aa4:	ad10      	add	r5, sp, #64	; 0x40
 8000aa6:	9307      	str	r3, [sp, #28]
 8000aa8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000aaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000aac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000aae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ab0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ab2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ab4:	e896 0003 	ldmia.w	r6, {r0, r1}
  displayKirbyFacingRight(kirby.idleKeyframes[currentFrame], kirby.xPos, kirby.yPos);
 8000ab8:	228c      	movs	r2, #140	; 0x8c
  struct Kirby kirby = {
 8000aba:	e885 0003 	stmia.w	r5, {r0, r1}
  displayKirbyFacingRight(kirby.idleKeyframes[currentFrame], kirby.xPos, kirby.yPos);
 8000abe:	489a      	ldr	r0, [pc, #616]	; (8000d28 <main+0x474>)
 8000ac0:	2132      	movs	r1, #50	; 0x32
  uint8_t direction = 0;
 8000ac2:	9406      	str	r4, [sp, #24]
  displayKirbyFacingRight(kirby.idleKeyframes[currentFrame], kirby.xPos, kirby.yPos);
 8000ac4:	f7ff fe7c 	bl	80007c0 <displayKirbyFacingRight>
  HAL_Delay(1000);
 8000ac8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000acc:	f000 fb26 	bl	800111c <HAL_Delay>
	  LCD_Clear(10, 210, 100, 20, 0xFFFF);
 8000ad0:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8000ad4:	2314      	movs	r3, #20
 8000ad6:	2264      	movs	r2, #100	; 0x64
 8000ad8:	21d2      	movs	r1, #210	; 0xd2
 8000ada:	200a      	movs	r0, #10
 8000adc:	9500      	str	r5, [sp, #0]
 8000ade:	f7ff fd0f 	bl	8000500 <LCD_Clear>
	  sprintf(buffer, "%d", kirby.xPos);
 8000ae2:	9a03      	ldr	r2, [sp, #12]
 8000ae4:	4991      	ldr	r1, [pc, #580]	; (8000d2c <main+0x478>)
 8000ae6:	a80e      	add	r0, sp, #56	; 0x38
 8000ae8:	f001 fa4c 	bl	8001f84 <siprintf>
	  LCD_DrawString(10, 210, buffer);
 8000aec:	aa0e      	add	r2, sp, #56	; 0x38
 8000aee:	21d2      	movs	r1, #210	; 0xd2
 8000af0:	200a      	movs	r0, #10
 8000af2:	f7ff fd43 	bl	800057c <LCD_DrawString>
	  key1State = HAL_GPIO_ReadPin(KEY1_GPIO_PORT, KEY1_GPIO_PIN);
 8000af6:	2101      	movs	r1, #1
 8000af8:	488d      	ldr	r0, [pc, #564]	; (8000d30 <main+0x47c>)
 8000afa:	f000 fea1 	bl	8001840 <HAL_GPIO_ReadPin>
 8000afe:	4683      	mov	fp, r0
	  key2State = HAL_GPIO_ReadPin(KEY2_GPIO_PORT, KEY2_GPIO_PIN);
 8000b00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b04:	488b      	ldr	r0, [pc, #556]	; (8000d34 <main+0x480>)
	  key1State = HAL_GPIO_ReadPin(KEY1_GPIO_PORT, KEY1_GPIO_PIN);
 8000b06:	f8cd b014 	str.w	fp, [sp, #20]
	  key2State = HAL_GPIO_ReadPin(KEY2_GPIO_PORT, KEY2_GPIO_PIN);
 8000b0a:	f000 fe99 	bl	8001840 <HAL_GPIO_ReadPin>
	  if (key1State) {
 8000b0e:	465b      	mov	r3, fp
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d07b      	beq.n	8000c0c <main+0x358>
		  if (state != 2) {
 8000b14:	2c02      	cmp	r4, #2
 8000b16:	f000 8169 	beq.w	8000dec <main+0x538>
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	2700      	movs	r7, #0
 8000b1e:	9304      	str	r3, [sp, #16]
			  direction = 1;
 8000b20:	9306      	str	r3, [sp, #24]
		uint16_t displayX = (kirby->xPos + 25) % 320;
 8000b22:	248c      	movs	r4, #140	; 0x8c
 8000b24:	f04f 0800 	mov.w	r8, #0
	for (int y = 0; y < 23; y++) {
 8000b28:	f644 763e 	movw	r6, #20286	; 0x4f3e
		uint16_t displayX = (kirby->xPos + 25) % 320;
 8000b2c:	9a03      	ldr	r2, [sp, #12]
 8000b2e:	4b82      	ldr	r3, [pc, #520]	; (8000d38 <main+0x484>)
 8000b30:	3219      	adds	r2, #25
 8000b32:	fba3 1302 	umull	r1, r3, r3, r2
 8000b36:	0a1b      	lsrs	r3, r3, #8
 8000b38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000b3c:	eba2 1383 	sub.w	r3, r2, r3, lsl #6
 8000b40:	9a07      	ldr	r2, [sp, #28]
 8000b42:	fa1f f983 	uxth.w	r9, r3
 8000b46:	f502 3571 	add.w	r5, r2, #246784	; 0x3c400
 8000b4a:	4b72      	ldr	r3, [pc, #456]	; (8000d14 <main+0x460>)
 8000b4c:	35e2      	adds	r5, #226	; 0xe2
 8000b4e:	441d      	add	r5, r3
		LCD_DrawDot(displayX, displayY, color);
 8000b50:	4621      	mov	r1, r4
 8000b52:	f835 2018 	ldrh.w	r2, [r5, r8, lsl #1]
 8000b56:	4648      	mov	r0, r9
	for (int y = 0; y < 23; y++) {
 8000b58:	f208 3872 	addw	r8, r8, #882	; 0x372
		LCD_DrawDot(displayX, displayY, color);
 8000b5c:	f7ff fd96 	bl	800068c <LCD_DrawDot>
	for (int y = 0; y < 23; y++) {
 8000b60:	3401      	adds	r4, #1
 8000b62:	45b0      	cmp	r8, r6
 8000b64:	b2a4      	uxth	r4, r4
 8000b66:	d1f3      	bne.n	8000b50 <main+0x29c>
		  if (kirby.xPos > 0) {
 8000b68:	9b03      	ldr	r3, [sp, #12]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f000 813c 	beq.w	8000de8 <main+0x534>
			  if (kirby.xPos > 160 && kirby.xPos < 696) {
 8000b70:	f240 2216 	movw	r2, #534	; 0x216
 8000b74:	3ba1      	subs	r3, #161	; 0xa1
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	f240 81b9 	bls.w	8000ef0 <main+0x63c>
			  kirby.xPos--;
 8000b7e:	9b03      	ldr	r3, [sp, #12]
 8000b80:	3b01      	subs	r3, #1
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	9303      	str	r3, [sp, #12]
		uint16_t displayXPos = (xPos + 25 - x) % 320;
 8000b86:	f103 0619 	add.w	r6, r3, #25
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	9307      	str	r3, [sp, #28]
			if (color == 0x4B4E) {
 8000b8e:	f644 354e 	movw	r5, #19278	; 0x4b4e
		  displayKirbyFacingLeft(kirby.walkingKeyframes[currentFrame], kirby.xPos, kirby.yPos);
 8000b92:	ab1e      	add	r3, sp, #120	; 0x78
 8000b94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8000b98:	f857 3c28 	ldr.w	r3, [r7, #-40]
	for (int x = 0; x < 26; x++) {
 8000b9c:	f506 38f1 	add.w	r8, r6, #123392	; 0x1e200
 8000ba0:	1e9f      	subs	r7, r3, #2
 8000ba2:	f203 43aa 	addw	r3, r3, #1194	; 0x4aa
 8000ba6:	9302      	str	r3, [sp, #8]
 8000ba8:	4b5a      	ldr	r3, [pc, #360]	; (8000d14 <main+0x460>)
 8000baa:	f108 0858 	add.w	r8, r8, #88	; 0x58
 8000bae:	eb03 0848 	add.w	r8, r3, r8, lsl #1
		uint16_t displayXPos = (xPos + 25 - x) % 320;
 8000bb2:	46c1      	mov	r9, r8
 8000bb4:	46ba      	mov	sl, r7
 8000bb6:	248c      	movs	r4, #140	; 0x8c
 8000bb8:	4b5f      	ldr	r3, [pc, #380]	; (8000d38 <main+0x484>)
 8000bba:	fba3 3006 	umull	r3, r0, r3, r6
 8000bbe:	0a00      	lsrs	r0, r0, #8
 8000bc0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000bc4:	eba6 1080 	sub.w	r0, r6, r0, lsl #6
 8000bc8:	fa1f fb80 	uxth.w	fp, r0
			uint16_t color = frame[23 * x + y];
 8000bcc:	f83a 2f02 	ldrh.w	r2, [sl, #2]!
			LCD_DrawDot(displayXPos, displayYPos, color);
 8000bd0:	4621      	mov	r1, r4
			if (color == 0x4B4E) {
 8000bd2:	42aa      	cmp	r2, r5
		for (int y = 0; y < 23; y++) {
 8000bd4:	f104 0401 	add.w	r4, r4, #1
			LCD_DrawDot(displayXPos, displayYPos, color);
 8000bd8:	bf08      	it	eq
 8000bda:	f8b9 2000 	ldrheq.w	r2, [r9]
 8000bde:	4658      	mov	r0, fp
		for (int y = 0; y < 23; y++) {
 8000be0:	b2a4      	uxth	r4, r4
			LCD_DrawDot(displayXPos, displayYPos, color);
 8000be2:	f7ff fd53 	bl	800068c <LCD_DrawDot>
		for (int y = 0; y < 23; y++) {
 8000be6:	2ca3      	cmp	r4, #163	; 0xa3
 8000be8:	f209 69e4 	addw	r9, r9, #1764	; 0x6e4
 8000bec:	d1ee      	bne.n	8000bcc <main+0x318>
	for (int x = 0; x < 26; x++) {
 8000bee:	9b02      	ldr	r3, [sp, #8]
 8000bf0:	372e      	adds	r7, #46	; 0x2e
 8000bf2:	42bb      	cmp	r3, r7
 8000bf4:	f106 36ff 	add.w	r6, r6, #4294967295
 8000bf8:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfc:	d1d9      	bne.n	8000bb2 <main+0x2fe>
		  HAL_Delay(20);
 8000bfe:	2014      	movs	r0, #20
 8000c00:	f000 fa8c 	bl	800111c <HAL_Delay>
 8000c04:	2402      	movs	r4, #2
 8000c06:	e763      	b.n	8000ad0 <main+0x21c>
 8000c08:	b672      	cpsid	i
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <main+0x356>
	  } else if (key2State) {
 8000c0c:	2800      	cmp	r0, #0
 8000c0e:	f000 8095 	beq.w	8000d3c <main+0x488>
		  if (state != 1) {
 8000c12:	2c01      	cmp	r4, #1
 8000c14:	f000 815c 	beq.w	8000ed0 <main+0x61c>
 8000c18:	2301      	movs	r3, #1
 8000c1a:	9e05      	ldr	r6, [sp, #20]
 8000c1c:	9304      	str	r3, [sp, #16]
	  uint16_t displayX = kirby->xPos % 320;
 8000c1e:	248c      	movs	r4, #140	; 0x8c
 8000c20:	f04f 0800 	mov.w	r8, #0
	for (int y = 0; y < 23; y++) {
 8000c24:	f644 773e 	movw	r7, #20286	; 0x4f3e
	  uint16_t displayX = kirby->xPos % 320;
 8000c28:	9a03      	ldr	r2, [sp, #12]
 8000c2a:	4b43      	ldr	r3, [pc, #268]	; (8000d38 <main+0x484>)
 8000c2c:	fba3 1302 	umull	r1, r3, r3, r2
 8000c30:	0a1b      	lsrs	r3, r3, #8
 8000c32:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000c36:	eba2 1983 	sub.w	r9, r2, r3, lsl #6
 8000c3a:	9b07      	ldr	r3, [sp, #28]
 8000c3c:	fa1f f989 	uxth.w	r9, r9
 8000c40:	f503 3571 	add.w	r5, r3, #246784	; 0x3c400
 8000c44:	4b33      	ldr	r3, [pc, #204]	; (8000d14 <main+0x460>)
 8000c46:	35b0      	adds	r5, #176	; 0xb0
 8000c48:	441d      	add	r5, r3
	  LCD_DrawDot(displayX, displayY, color);
 8000c4a:	4621      	mov	r1, r4
 8000c4c:	f835 2018 	ldrh.w	r2, [r5, r8, lsl #1]
 8000c50:	4648      	mov	r0, r9
	for (int y = 0; y < 23; y++) {
 8000c52:	f208 3872 	addw	r8, r8, #882	; 0x372
	  LCD_DrawDot(displayX, displayY, color);
 8000c56:	f7ff fd19 	bl	800068c <LCD_DrawDot>
	for (int y = 0; y < 23; y++) {
 8000c5a:	3401      	adds	r4, #1
 8000c5c:	45b8      	cmp	r8, r7
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	d1f3      	bne.n	8000c4a <main+0x396>
		  if (kirby.xPos < 829) {
 8000c62:	9b03      	ldr	r3, [sp, #12]
 8000c64:	f5b3 7f4f 	cmp.w	r3, #828	; 0x33c
 8000c68:	d80c      	bhi.n	8000c84 <main+0x3d0>
			  if (kirby.xPos > 160 && kirby.xPos < 696) {
 8000c6a:	f240 2216 	movw	r2, #534	; 0x216
 8000c6e:	3ba1      	subs	r3, #161	; 0xa1
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	4293      	cmp	r3, r2
 8000c74:	f240 8140 	bls.w	8000ef8 <main+0x644>
			  kirby.xPos++;
 8000c78:	9b03      	ldr	r3, [sp, #12]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	9303      	str	r3, [sp, #12]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	9307      	str	r3, [sp, #28]
			if (color == 0x4B4E) {
 8000c84:	f644 354e 	movw	r5, #19278	; 0x4b4e
		  displayKirbyFacingRight(kirby.walkingKeyframes[currentFrame], kirby.xPos, kirby.yPos);
 8000c88:	ab1e      	add	r3, sp, #120	; 0x78
 8000c8a:	9a03      	ldr	r2, [sp, #12]
 8000c8c:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8000c90:	f856 3c28 	ldr.w	r3, [r6, #-40]
	for (int x = 0; x < 26; x++) {
 8000c94:	f502 38f1 	add.w	r8, r2, #123392	; 0x1e200
 8000c98:	4617      	mov	r7, r2
 8000c9a:	4a1e      	ldr	r2, [pc, #120]	; (8000d14 <main+0x460>)
 8000c9c:	f108 0858 	add.w	r8, r8, #88	; 0x58
 8000ca0:	1e9e      	subs	r6, r3, #2
 8000ca2:	f203 43aa 	addw	r3, r3, #1194	; 0x4aa
 8000ca6:	eb02 0848 	add.w	r8, r2, r8, lsl #1
 8000caa:	9302      	str	r3, [sp, #8]
		uint16_t displayXPos = (xPos + x) % 320;
 8000cac:	46c1      	mov	r9, r8
 8000cae:	46b2      	mov	sl, r6
 8000cb0:	248c      	movs	r4, #140	; 0x8c
 8000cb2:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <main+0x484>)
 8000cb4:	fba3 2307 	umull	r2, r3, r3, r7
 8000cb8:	0a1b      	lsrs	r3, r3, #8
 8000cba:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8000cbe:	eba7 1080 	sub.w	r0, r7, r0, lsl #6
 8000cc2:	fa1f fb80 	uxth.w	fp, r0
			uint16_t color = frame[23 * x + y];
 8000cc6:	f83a 2f02 	ldrh.w	r2, [sl, #2]!
			LCD_DrawDot(displayXPos, displayYPos, color);
 8000cca:	4621      	mov	r1, r4
			if (color == 0x4B4E) {
 8000ccc:	42aa      	cmp	r2, r5
		for (int y = 0; y < 23; y++) {
 8000cce:	f104 0401 	add.w	r4, r4, #1
			LCD_DrawDot(displayXPos, displayYPos, color);
 8000cd2:	bf08      	it	eq
 8000cd4:	f8b9 2000 	ldrheq.w	r2, [r9]
 8000cd8:	4658      	mov	r0, fp
		for (int y = 0; y < 23; y++) {
 8000cda:	b2a4      	uxth	r4, r4
			LCD_DrawDot(displayXPos, displayYPos, color);
 8000cdc:	f7ff fcd6 	bl	800068c <LCD_DrawDot>
		for (int y = 0; y < 23; y++) {
 8000ce0:	2ca3      	cmp	r4, #163	; 0xa3
 8000ce2:	f209 69e4 	addw	r9, r9, #1764	; 0x6e4
 8000ce6:	d1ee      	bne.n	8000cc6 <main+0x412>
	for (int x = 0; x < 26; x++) {
 8000ce8:	9b02      	ldr	r3, [sp, #8]
 8000cea:	362e      	adds	r6, #46	; 0x2e
 8000cec:	42b3      	cmp	r3, r6
 8000cee:	f107 0701 	add.w	r7, r7, #1
 8000cf2:	f108 0802 	add.w	r8, r8, #2
 8000cf6:	d1d9      	bne.n	8000cac <main+0x3f8>
		  HAL_Delay(20);
 8000cf8:	2014      	movs	r0, #20
 8000cfa:	f000 fa0f 	bl	800111c <HAL_Delay>
 8000cfe:	9b05      	ldr	r3, [sp, #20]
 8000d00:	2401      	movs	r4, #1
 8000d02:	9306      	str	r3, [sp, #24]
 8000d04:	e6e4      	b.n	8000ad0 <main+0x21c>
 8000d06:	bf00      	nop
 8000d08:	200000d8 	.word	0x200000d8
 8000d0c:	a0000104 	.word	0xa0000104
 8000d10:	40010000 	.word	0x40010000
 8000d14:	08006b78 	.word	0x08006b78
 8000d18:	08060b9c 	.word	0x08060b9c
 8000d1c:	080006d1 	.word	0x080006d1
 8000d20:	60020000 	.word	0x60020000
 8000d24:	08002890 	.word	0x08002890
 8000d28:	08002ebc 	.word	0x08002ebc
 8000d2c:	08002eb8 	.word	0x08002eb8
 8000d30:	40010800 	.word	0x40010800
 8000d34:	40011000 	.word	0x40011000
 8000d38:	cccccccd 	.word	0xcccccccd
		  if (state != 0) {
 8000d3c:	2c00      	cmp	r4, #0
 8000d3e:	f040 80c3 	bne.w	8000ec8 <main+0x614>
		  currentFrame = (currentFrame + 1) % 3;
 8000d42:	9804      	ldr	r0, [sp, #16]
 8000d44:	4a6e      	ldr	r2, [pc, #440]	; (8000f00 <main+0x64c>)
 8000d46:	1c43      	adds	r3, r0, #1
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	fba2 1203 	umull	r1, r2, r2, r3
 8000d4e:	f002 01fe 	and.w	r1, r2, #254	; 0xfe
 8000d52:	eb01 0252 	add.w	r2, r1, r2, lsr #1
 8000d56:	1a9b      	subs	r3, r3, r2
 8000d58:	9305      	str	r3, [sp, #20]
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	9304      	str	r3, [sp, #16]
		  if (direction == 0) {
 8000d5e:	9b06      	ldr	r3, [sp, #24]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d151      	bne.n	8000e08 <main+0x554>
			if (color == 0x4B4E) {
 8000d64:	f644 354e 	movw	r5, #19278	; 0x4b4e
			  displayKirbyFacingRight(kirby.idleKeyframes[currentFrame], kirby.xPos, kirby.yPos);
 8000d68:	ab1e      	add	r3, sp, #120	; 0x78
 8000d6a:	9a03      	ldr	r2, [sp, #12]
 8000d6c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000d70:	f850 3c34 	ldr.w	r3, [r0, #-52]
	for (int x = 0; x < 26; x++) {
 8000d74:	f502 38f1 	add.w	r8, r2, #123392	; 0x1e200
 8000d78:	4617      	mov	r7, r2
 8000d7a:	4a62      	ldr	r2, [pc, #392]	; (8000f04 <main+0x650>)
 8000d7c:	f108 0858 	add.w	r8, r8, #88	; 0x58
 8000d80:	1e9e      	subs	r6, r3, #2
 8000d82:	f203 43aa 	addw	r3, r3, #1194	; 0x4aa
 8000d86:	eb02 0848 	add.w	r8, r2, r8, lsl #1
 8000d8a:	9302      	str	r3, [sp, #8]
		uint16_t displayXPos = (xPos + x) % 320;
 8000d8c:	46c1      	mov	r9, r8
 8000d8e:	46b2      	mov	sl, r6
 8000d90:	248c      	movs	r4, #140	; 0x8c
 8000d92:	4b5d      	ldr	r3, [pc, #372]	; (8000f08 <main+0x654>)
 8000d94:	fba3 2307 	umull	r2, r3, r3, r7
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000d9e:	eba7 1083 	sub.w	r0, r7, r3, lsl #6
 8000da2:	fa1f fb80 	uxth.w	fp, r0
			uint16_t color = frame[23 * x + y];
 8000da6:	f83a 2f02 	ldrh.w	r2, [sl, #2]!
			LCD_DrawDot(displayXPos, displayYPos, color);
 8000daa:	4621      	mov	r1, r4
			if (color == 0x4B4E) {
 8000dac:	42aa      	cmp	r2, r5
		for (int y = 0; y < 23; y++) {
 8000dae:	f104 0401 	add.w	r4, r4, #1
			LCD_DrawDot(displayXPos, displayYPos, color);
 8000db2:	bf08      	it	eq
 8000db4:	f8b9 2000 	ldrheq.w	r2, [r9]
 8000db8:	4658      	mov	r0, fp
		for (int y = 0; y < 23; y++) {
 8000dba:	b2a4      	uxth	r4, r4
			LCD_DrawDot(displayXPos, displayYPos, color);
 8000dbc:	f7ff fc66 	bl	800068c <LCD_DrawDot>
		for (int y = 0; y < 23; y++) {
 8000dc0:	2ca3      	cmp	r4, #163	; 0xa3
 8000dc2:	f209 69e4 	addw	r9, r9, #1764	; 0x6e4
 8000dc6:	d1ee      	bne.n	8000da6 <main+0x4f2>
	for (int x = 0; x < 26; x++) {
 8000dc8:	9b02      	ldr	r3, [sp, #8]
 8000dca:	362e      	adds	r6, #46	; 0x2e
 8000dcc:	42b3      	cmp	r3, r6
 8000dce:	f107 0701 	add.w	r7, r7, #1
 8000dd2:	f108 0802 	add.w	r8, r8, #2
 8000dd6:	d1d9      	bne.n	8000d8c <main+0x4d8>
		  HAL_Delay(50);
 8000dd8:	2032      	movs	r0, #50	; 0x32
 8000dda:	f000 f99f 	bl	800111c <HAL_Delay>
		  if (currentFrame == 1) {
 8000dde:	9b05      	ldr	r3, [sp, #20]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d052      	beq.n	8000e8a <main+0x5d6>
 8000de4:	2400      	movs	r4, #0
 8000de6:	e673      	b.n	8000ad0 <main+0x21c>
 8000de8:	2619      	movs	r6, #25
 8000dea:	e6d0      	b.n	8000b8e <main+0x2da>
		  displayKirbyFacingLeft(kirby.walkingKeyframes[currentFrame], kirby.xPos, kirby.yPos);
 8000dec:	9f04      	ldr	r7, [sp, #16]
		  currentFrame = (currentFrame + 1) % 10;
 8000dee:	4b46      	ldr	r3, [pc, #280]	; (8000f08 <main+0x654>)
 8000df0:	1c7a      	adds	r2, r7, #1
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	fba3 1302 	umull	r1, r3, r3, r2
 8000df8:	08db      	lsrs	r3, r3, #3
 8000dfa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000dfe:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	9304      	str	r3, [sp, #16]
 8000e06:	e68c      	b.n	8000b22 <main+0x26e>
			if (color == 0x4B4E) {
 8000e08:	f644 354e 	movw	r5, #19278	; 0x4b4e
			  displayKirbyFacingLeft(kirby.idleKeyframes[currentFrame], kirby.xPos, kirby.yPos);
 8000e0c:	ab1e      	add	r3, sp, #120	; 0x78
 8000e0e:	9a03      	ldr	r2, [sp, #12]
 8000e10:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000e14:	f850 3c34 	ldr.w	r3, [r0, #-52]
	for (int x = 0; x < 26; x++) {
 8000e18:	493a      	ldr	r1, [pc, #232]	; (8000f04 <main+0x650>)
 8000e1a:	f502 38f1 	add.w	r8, r2, #123392	; 0x1e200
 8000e1e:	f108 0871 	add.w	r8, r8, #113	; 0x71
 8000e22:	1e9e      	subs	r6, r3, #2
 8000e24:	f203 43aa 	addw	r3, r3, #1194	; 0x4aa
 8000e28:	eb01 0848 	add.w	r8, r1, r8, lsl #1
		uint16_t displayX = (kirby->xPos + 25) % 320;
 8000e2c:	f102 0719 	add.w	r7, r2, #25
 8000e30:	9302      	str	r3, [sp, #8]
		uint16_t displayXPos = (xPos + 25 - x) % 320;
 8000e32:	46c1      	mov	r9, r8
 8000e34:	46b2      	mov	sl, r6
 8000e36:	248c      	movs	r4, #140	; 0x8c
 8000e38:	4b33      	ldr	r3, [pc, #204]	; (8000f08 <main+0x654>)
 8000e3a:	fba3 2307 	umull	r2, r3, r3, r7
 8000e3e:	0a1b      	lsrs	r3, r3, #8
 8000e40:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000e44:	eba7 1083 	sub.w	r0, r7, r3, lsl #6
 8000e48:	fa1f fb80 	uxth.w	fp, r0
			uint16_t color = frame[23 * x + y];
 8000e4c:	f83a 2f02 	ldrh.w	r2, [sl, #2]!
			LCD_DrawDot(displayXPos, displayYPos, color);
 8000e50:	4621      	mov	r1, r4
			if (color == 0x4B4E) {
 8000e52:	42aa      	cmp	r2, r5
		for (int y = 0; y < 23; y++) {
 8000e54:	f104 0401 	add.w	r4, r4, #1
			LCD_DrawDot(displayXPos, displayYPos, color);
 8000e58:	bf08      	it	eq
 8000e5a:	f8b9 2000 	ldrheq.w	r2, [r9]
 8000e5e:	4658      	mov	r0, fp
		for (int y = 0; y < 23; y++) {
 8000e60:	b2a4      	uxth	r4, r4
			LCD_DrawDot(displayXPos, displayYPos, color);
 8000e62:	f7ff fc13 	bl	800068c <LCD_DrawDot>
		for (int y = 0; y < 23; y++) {
 8000e66:	2ca3      	cmp	r4, #163	; 0xa3
 8000e68:	f209 69e4 	addw	r9, r9, #1764	; 0x6e4
 8000e6c:	d1ee      	bne.n	8000e4c <main+0x598>
	for (int x = 0; x < 26; x++) {
 8000e6e:	9b02      	ldr	r3, [sp, #8]
 8000e70:	362e      	adds	r6, #46	; 0x2e
 8000e72:	42b3      	cmp	r3, r6
 8000e74:	f107 37ff 	add.w	r7, r7, #4294967295
 8000e78:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7c:	d1d9      	bne.n	8000e32 <main+0x57e>
		  HAL_Delay(50);
 8000e7e:	2032      	movs	r0, #50	; 0x32
 8000e80:	f000 f94c 	bl	800111c <HAL_Delay>
		  if (currentFrame == 1) {
 8000e84:	9b05      	ldr	r3, [sp, #20]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d1ac      	bne.n	8000de4 <main+0x530>
			  uint32_t tickstart = HAL_GetTick();
 8000e8a:	f000 f941 	bl	8001110 <HAL_GetTick>
				  wait += (uint32_t)(uwTickFreq);
 8000e8e:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <main+0x658>)
			  uint32_t tickstart = HAL_GetTick();
 8000e90:	4605      	mov	r5, r0
				  wait += (uint32_t)(uwTickFreq);
 8000e92:	781e      	ldrb	r6, [r3, #0]
 8000e94:	f606 16c4 	addw	r6, r6, #2500	; 0x9c4
 8000e98:	e00d      	b.n	8000eb6 <main+0x602>
				  key1State = HAL_GPIO_ReadPin(KEY1_GPIO_PORT, KEY1_GPIO_PIN);
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	481c      	ldr	r0, [pc, #112]	; (8000f10 <main+0x65c>)
 8000e9e:	f000 fccf 	bl	8001840 <HAL_GPIO_ReadPin>
				  key2State = HAL_GPIO_ReadPin(KEY2_GPIO_PORT, KEY2_GPIO_PIN);
 8000ea2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
				  key1State = HAL_GPIO_ReadPin(KEY1_GPIO_PORT, KEY1_GPIO_PIN);
 8000ea6:	4604      	mov	r4, r0
				  key2State = HAL_GPIO_ReadPin(KEY2_GPIO_PORT, KEY2_GPIO_PIN);
 8000ea8:	481a      	ldr	r0, [pc, #104]	; (8000f14 <main+0x660>)
 8000eaa:	f000 fcc9 	bl	8001840 <HAL_GPIO_ReadPin>
				  if (key2State || key1State) {
 8000eae:	ea44 0300 	orr.w	r3, r4, r0
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	b923      	cbnz	r3, 8000ec0 <main+0x60c>
			  while ((HAL_GetTick() - tickstart) < wait)
 8000eb6:	f000 f92b 	bl	8001110 <HAL_GetTick>
 8000eba:	1b43      	subs	r3, r0, r5
 8000ebc:	42b3      	cmp	r3, r6
 8000ebe:	d3ec      	bcc.n	8000e9a <main+0x5e6>
		  currentFrame = (currentFrame + 1) % 3;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	2400      	movs	r4, #0
 8000ec4:	9304      	str	r3, [sp, #16]
  {
 8000ec6:	e603      	b.n	8000ad0 <main+0x21c>
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000ece:	e746      	b.n	8000d5e <main+0x4aa>
		  currentFrame = (currentFrame + 1) % 10;
 8000ed0:	9b06      	ldr	r3, [sp, #24]
 8000ed2:	9e04      	ldr	r6, [sp, #16]
 8000ed4:	9305      	str	r3, [sp, #20]
 8000ed6:	1c72      	adds	r2, r6, #1
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <main+0x654>)
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	fba3 1302 	umull	r1, r3, r3, r2
 8000ee0:	08db      	lsrs	r3, r3, #3
 8000ee2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000ee6:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	9304      	str	r3, [sp, #16]
 8000eee:	e696      	b.n	8000c1e <main+0x36a>
				  movePlatform(kirby.xPos);
 8000ef0:	9803      	ldr	r0, [sp, #12]
 8000ef2:	f7ff fbef 	bl	80006d4 <movePlatform>
 8000ef6:	e642      	b.n	8000b7e <main+0x2ca>
				  movePlatform(kirby.xPos);
 8000ef8:	9803      	ldr	r0, [sp, #12]
 8000efa:	f7ff fbeb 	bl	80006d4 <movePlatform>
 8000efe:	e6bb      	b.n	8000c78 <main+0x3c4>
 8000f00:	aaaaaaab 	.word	0xaaaaaaab
 8000f04:	08006b78 	.word	0x08006b78
 8000f08:	cccccccd 	.word	0xcccccccd
 8000f0c:	20000004 	.word	0x20000004
 8000f10:	40010800 	.word	0x40010800
 8000f14:	40011000 	.word	0x40011000

08000f18 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f18:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <HAL_MspInit+0x3c>)
{
 8000f1a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f1c:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f1e:	490e      	ldr	r1, [pc, #56]	; (8000f58 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f20:	f042 0201 	orr.w	r2, r2, #1
 8000f24:	619a      	str	r2, [r3, #24]
 8000f26:	699a      	ldr	r2, [r3, #24]
 8000f28:	f002 0201 	and.w	r2, r2, #1
 8000f2c:	9200      	str	r2, [sp, #0]
 8000f2e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f30:	69da      	ldr	r2, [r3, #28]
 8000f32:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f36:	61da      	str	r2, [r3, #28]
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f42:	684b      	ldr	r3, [r1, #4]
 8000f44:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f4c:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4e:	b002      	add	sp, #8
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40021000 	.word	0x40021000
 8000f58:	40010000 	.word	0x40010000

08000f5c <HAL_SRAM_MspInit>:

static void HAL_FSMC_MspInit(void){
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000f5c:	2100      	movs	r1, #0
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000f5e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FSMC_Initialized) {
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_SRAM_MspInit+0x5c>)
void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000f62:	b087      	sub	sp, #28
  if (FSMC_Initialized) {
 8000f64:	681a      	ldr	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000f66:	9104      	str	r1, [sp, #16]
  if (FSMC_Initialized) {
 8000f68:	bb1a      	cbnz	r2, 8000fb2 <HAL_SRAM_MspInit+0x56>
  FSMC_Initialized = 1;
 8000f6a:	2701      	movs	r7, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f6c:	2603      	movs	r6, #3
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000f6e:	f64f 7480 	movw	r4, #65408	; 0xff80
 8000f72:	2502      	movs	r5, #2
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000f74:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8000f78:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
  FSMC_Initialized = 1;
 8000f7c:	601f      	str	r7, [r3, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000f7e:	6953      	ldr	r3, [r2, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f80:	480e      	ldr	r0, [pc, #56]	; (8000fbc <HAL_SRAM_MspInit+0x60>)
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f86:	6153      	str	r3, [r2, #20]
 8000f88:	6953      	ldr	r3, [r2, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f8a:	a902      	add	r1, sp, #8
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000f94:	e9cd 4502 	strd	r4, r5, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f98:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f9a:	f000 fb29 	bl	80015f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000f9e:	f64c 72b3 	movw	r2, #53171	; 0xcfb3
 8000fa2:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa4:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <HAL_SRAM_MspInit+0x64>)
 8000fa6:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000fa8:	e9cd 2302 	strd	r2, r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fac:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fae:	f000 fb1f 	bl	80015f0 <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000fb2:	b007      	add	sp, #28
 8000fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000120 	.word	0x20000120
 8000fbc:	40011800 	.word	0x40011800
 8000fc0:	40011400 	.word	0x40011400

08000fc4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <NMI_Handler>
 8000fc6:	bf00      	nop

08000fc8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <HardFault_Handler>
 8000fca:	bf00      	nop

08000fcc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <MemManage_Handler>
 8000fce:	bf00      	nop

08000fd0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <BusFault_Handler>
 8000fd2:	bf00      	nop

08000fd4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <UsageFault_Handler>
 8000fd6:	bf00      	nop

08000fd8 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <DebugMon_Handler>:
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <PendSV_Handler>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe4:	f000 b888 	b.w	80010f8 <HAL_IncTick>

08000fe8 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 8000fe8:	4801      	ldr	r0, [pc, #4]	; (8000ff0 <DMA1_Channel1_IRQHandler+0x8>)
 8000fea:	f000 b9ad 	b.w	8001348 <HAL_DMA_IRQHandler>
 8000fee:	bf00      	nop
 8000ff0:	20000090 	.word	0x20000090

08000ff4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff4:	490d      	ldr	r1, [pc, #52]	; (800102c <_sbrk+0x38>)
{
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ffa:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <_sbrk+0x3c>)
 8000ffc:	4c0d      	ldr	r4, [pc, #52]	; (8001034 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8000ffe:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001000:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001002:	b120      	cbz	r0, 800100e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001004:	4403      	add	r3, r0
 8001006:	4293      	cmp	r3, r2
 8001008:	d807      	bhi.n	800101a <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800100a:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 800100c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800100e:	4c0a      	ldr	r4, [pc, #40]	; (8001038 <_sbrk+0x44>)
 8001010:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8001012:	4403      	add	r3, r0
 8001014:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 8001016:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001018:	d9f7      	bls.n	800100a <_sbrk+0x16>
    errno = ENOMEM;
 800101a:	f000 ff89 	bl	8001f30 <__errno>
 800101e:	220c      	movs	r2, #12
 8001020:	4603      	mov	r3, r0
    return (void *)-1;
 8001022:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8001026:	601a      	str	r2, [r3, #0]
}
 8001028:	bd10      	pop	{r4, pc}
 800102a:	bf00      	nop
 800102c:	20000124 	.word	0x20000124
 8001030:	20010000 	.word	0x20010000
 8001034:	00000400 	.word	0x00000400
 8001038:	20000140 	.word	0x20000140

0800103c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001040:	480c      	ldr	r0, [pc, #48]	; (8001074 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001042:	490d      	ldr	r1, [pc, #52]	; (8001078 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001044:	4a0d      	ldr	r2, [pc, #52]	; (800107c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001048:	e002      	b.n	8001050 <LoopCopyDataInit>

0800104a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800104c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104e:	3304      	adds	r3, #4

08001050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001054:	d3f9      	bcc.n	800104a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001058:	4c0a      	ldr	r4, [pc, #40]	; (8001084 <LoopFillZerobss+0x22>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800105c:	e001      	b.n	8001062 <LoopFillZerobss>

0800105e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001060:	3204      	adds	r2, #4

08001062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001064:	d3fb      	bcc.n	800105e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001066:	f7ff ffe9 	bl	800103c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800106a:	f000 ff67 	bl	8001f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800106e:	f7ff fc21 	bl	80008b4 <main>
  bx lr
 8001072:	4770      	bx	lr
  ldr r0, =_sdata
 8001074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001078:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800107c:	08060bf8 	.word	0x08060bf8
  ldr r2, =_sbss
 8001080:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001084:	2000013c 	.word	0x2000013c

08001088 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001088:	e7fe      	b.n	8001088 <ADC1_2_IRQHandler>
	...

0800108c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800108c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800108e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001092:	4a0d      	ldr	r2, [pc, #52]	; (80010c8 <HAL_InitTick+0x3c>)
{
 8001094:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001096:	7811      	ldrb	r1, [r2, #0]
 8001098:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <HAL_InitTick+0x40>)
 800109a:	fbb3 f3f1 	udiv	r3, r3, r1
 800109e:	6812      	ldr	r2, [r2, #0]
 80010a0:	fbb2 f0f3 	udiv	r0, r2, r3
 80010a4:	f000 f8aa 	bl	80011fc <HAL_SYSTICK_Config>
 80010a8:	b908      	cbnz	r0, 80010ae <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010aa:	2d0f      	cmp	r5, #15
 80010ac:	d901      	bls.n	80010b2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80010ae:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80010b0:	bd38      	pop	{r3, r4, r5, pc}
 80010b2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b4:	4602      	mov	r2, r0
 80010b6:	4629      	mov	r1, r5
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f000 f852 	bl	8001164 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <HAL_InitTick+0x44>)
 80010c2:	4620      	mov	r0, r4
 80010c4:	601d      	str	r5, [r3, #0]
}
 80010c6:	bd38      	pop	{r3, r4, r5, pc}
 80010c8:	20000004 	.word	0x20000004
 80010cc:	20000000 	.word	0x20000000
 80010d0:	20000008 	.word	0x20000008

080010d4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d4:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <HAL_Init+0x20>)
{
 80010d6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010da:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010dc:	f043 0310 	orr.w	r3, r3, #16
 80010e0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e2:	f000 f82d 	bl	8001140 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e6:	200f      	movs	r0, #15
 80010e8:	f7ff ffd0 	bl	800108c <HAL_InitTick>
  HAL_MspInit();
 80010ec:	f7ff ff14 	bl	8000f18 <HAL_MspInit>
}
 80010f0:	2000      	movs	r0, #0
 80010f2:	bd08      	pop	{r3, pc}
 80010f4:	40022000 	.word	0x40022000

080010f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80010f8:	4a03      	ldr	r2, [pc, #12]	; (8001108 <HAL_IncTick+0x10>)
 80010fa:	4b04      	ldr	r3, [pc, #16]	; (800110c <HAL_IncTick+0x14>)
 80010fc:	6811      	ldr	r1, [r2, #0]
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	440b      	add	r3, r1
 8001102:	6013      	str	r3, [r2, #0]
}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000128 	.word	0x20000128
 800110c:	20000004 	.word	0x20000004

08001110 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001110:	4b01      	ldr	r3, [pc, #4]	; (8001118 <HAL_GetTick+0x8>)
 8001112:	6818      	ldr	r0, [r3, #0]
}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000128 	.word	0x20000128

0800111c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800111c:	b538      	push	{r3, r4, r5, lr}
 800111e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001120:	f7ff fff6 	bl	8001110 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001124:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001126:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001128:	d002      	beq.n	8001130 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800112a:	4b04      	ldr	r3, [pc, #16]	; (800113c <HAL_Delay+0x20>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001130:	f7ff ffee 	bl	8001110 <HAL_GetTick>
 8001134:	1b40      	subs	r0, r0, r5
 8001136:	42a0      	cmp	r0, r4
 8001138:	d3fa      	bcc.n	8001130 <HAL_Delay+0x14>
  {
  }
}
 800113a:	bd38      	pop	{r3, r4, r5, pc}
 800113c:	20000004 	.word	0x20000004

08001140 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001140:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001144:	4906      	ldr	r1, [pc, #24]	; (8001160 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001146:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001148:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800114a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114e:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001154:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800115c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001164:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001166:	b500      	push	{lr}
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800116e:	f1c3 0e07 	rsb	lr, r3, #7
 8001172:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001176:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800117a:	bf28      	it	cs
 800117c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001180:	f1bc 0f06 	cmp.w	ip, #6
 8001184:	d91b      	bls.n	80011be <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001186:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118a:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800118c:	fa0c fc03 	lsl.w	ip, ip, r3
 8001190:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	f04f 3cff 	mov.w	ip, #4294967295
 8001198:	fa0c fc0e 	lsl.w	ip, ip, lr
 800119c:	ea21 010c 	bic.w	r1, r1, ip
 80011a0:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80011a2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80011a8:	db0c      	blt.n	80011c4 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011aa:	0109      	lsls	r1, r1, #4
 80011ac:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80011b0:	b2c9      	uxtb	r1, r1
 80011b2:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80011b6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80011ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80011be:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c0:	4613      	mov	r3, r2
 80011c2:	e7e7      	b.n	8001194 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <HAL_NVIC_SetPriority+0x78>)
 80011c6:	f000 000f 	and.w	r0, r0, #15
 80011ca:	0109      	lsls	r1, r1, #4
 80011cc:	b2c9      	uxtb	r1, r1
 80011ce:	4403      	add	r3, r0
 80011d0:	7619      	strb	r1, [r3, #24]
 80011d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80011d6:	bf00      	nop
 80011d8:	e000ed00 	.word	0xe000ed00
 80011dc:	e000ecfc 	.word	0xe000ecfc

080011e0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80011e0:	2800      	cmp	r0, #0
 80011e2:	db07      	blt.n	80011f4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e4:	2301      	movs	r3, #1
 80011e6:	f000 011f 	and.w	r1, r0, #31
 80011ea:	4a03      	ldr	r2, [pc, #12]	; (80011f8 <HAL_NVIC_EnableIRQ+0x18>)
 80011ec:	0940      	lsrs	r0, r0, #5
 80011ee:	408b      	lsls	r3, r1
 80011f0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000e100 	.word	0xe000e100

080011fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011fc:	3801      	subs	r0, #1
 80011fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001202:	d20f      	bcs.n	8001224 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001204:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001208:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800120c:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120e:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001210:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001212:	4c05      	ldr	r4, [pc, #20]	; (8001228 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001214:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001216:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800121a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800121c:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800121e:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001220:	6119      	str	r1, [r3, #16]
 8001222:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001224:	2001      	movs	r0, #1
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800122c:	2800      	cmp	r0, #0
 800122e:	d035      	beq.n	800129c <HAL_DMA_Init+0x70>
 8001230:	4603      	mov	r3, r0
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001232:	4a1b      	ldr	r2, [pc, #108]	; (80012a0 <HAL_DMA_Init+0x74>)
 8001234:	6800      	ldr	r0, [r0, #0]
{
 8001236:	b530      	push	{r4, r5, lr}
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001238:	4290      	cmp	r0, r2
 800123a:	d926      	bls.n	800128a <HAL_DMA_Init+0x5e>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800123c:	4919      	ldr	r1, [pc, #100]	; (80012a4 <HAL_DMA_Init+0x78>)
 800123e:	4a1a      	ldr	r2, [pc, #104]	; (80012a8 <HAL_DMA_Init+0x7c>)
 8001240:	4401      	add	r1, r0
 8001242:	fba2 2101 	umull	r2, r1, r2, r1
    hdma->DmaBaseAddress = DMA2;
 8001246:	4d19      	ldr	r5, [pc, #100]	; (80012ac <HAL_DMA_Init+0x80>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001248:	0909      	lsrs	r1, r1, #4
 800124a:	0089      	lsls	r1, r1, #2
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800124c:	f44f 7e80 	mov.w	lr, #256	; 0x100
  tmp = hdma->Instance->CCR;
 8001250:	6804      	ldr	r4, [r0, #0]
 8001252:	6419      	str	r1, [r3, #64]	; 0x40
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001254:	2100      	movs	r1, #0
  tmp |=  hdma->Init.Direction        |
 8001256:	685a      	ldr	r2, [r3, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001258:	f424 5c7f 	bic.w	ip, r4, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 800125c:	689c      	ldr	r4, [r3, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800125e:	f02c 0c30 	bic.w	ip, ip, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8001262:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001264:	68dc      	ldr	r4, [r3, #12]
 8001266:	63dd      	str	r5, [r3, #60]	; 0x3c
 8001268:	4322      	orrs	r2, r4
 800126a:	691c      	ldr	r4, [r3, #16]
 800126c:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800126e:	695c      	ldr	r4, [r3, #20]
 8001270:	4322      	orrs	r2, r4
 8001272:	699c      	ldr	r4, [r3, #24]
 8001274:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001276:	69dc      	ldr	r4, [r3, #28]
 8001278:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 800127a:	ea42 020c 	orr.w	r2, r2, ip
  hdma->Instance->CCR = tmp;
 800127e:	6002      	str	r2, [r0, #0]
  hdma->Lock = HAL_UNLOCKED;
 8001280:	f8a3 e020 	strh.w	lr, [r3, #32]

  return HAL_OK;
 8001284:	4608      	mov	r0, r1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001286:	6399      	str	r1, [r3, #56]	; 0x38
}
 8001288:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800128a:	4909      	ldr	r1, [pc, #36]	; (80012b0 <HAL_DMA_Init+0x84>)
 800128c:	4a06      	ldr	r2, [pc, #24]	; (80012a8 <HAL_DMA_Init+0x7c>)
 800128e:	4401      	add	r1, r0
 8001290:	fba2 2101 	umull	r2, r1, r2, r1
 8001294:	0909      	lsrs	r1, r1, #4
    hdma->DmaBaseAddress = DMA1;
 8001296:	4d07      	ldr	r5, [pc, #28]	; (80012b4 <HAL_DMA_Init+0x88>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001298:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 800129a:	e7d7      	b.n	800124c <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 800129c:	2001      	movs	r0, #1
}
 800129e:	4770      	bx	lr
 80012a0:	40020407 	.word	0x40020407
 80012a4:	bffdfbf8 	.word	0xbffdfbf8
 80012a8:	cccccccd 	.word	0xcccccccd
 80012ac:	40020400 	.word	0x40020400
 80012b0:	bffdfff8 	.word	0xbffdfff8
 80012b4:	40020000 	.word	0x40020000

080012b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012b8:	4684      	mov	ip, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80012ba:	f890 0020 	ldrb.w	r0, [r0, #32]
 80012be:	2801      	cmp	r0, #1
 80012c0:	d03f      	beq.n	8001342 <HAL_DMA_Start_IT+0x8a>
{
 80012c2:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma);
 80012c4:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012c6:	f89c 0021 	ldrb.w	r0, [ip, #33]	; 0x21
  __HAL_LOCK(hdma);
 80012ca:	f88c 4020 	strb.w	r4, [ip, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80012ce:	42a0      	cmp	r0, r4
 80012d0:	d005      	beq.n	80012de <HAL_DMA_Start_IT+0x26>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80012d2:	2300      	movs	r3, #0
 80012d4:	f88c 3020 	strb.w	r3, [ip, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80012d8:	2002      	movs	r0, #2
  }    
  return status;
}
 80012da:	bc30      	pop	{r4, r5}
 80012dc:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80012de:	2402      	movs	r4, #2
 80012e0:	f88c 4021 	strb.w	r4, [ip, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012e4:	2400      	movs	r4, #0
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012e6:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012ea:	f8cc 4038 	str.w	r4, [ip, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80012ee:	f8dc 4000 	ldr.w	r4, [ip]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012f2:	40a8      	lsls	r0, r5
    __HAL_DMA_DISABLE(hdma);
 80012f4:	6825      	ldr	r5, [r4, #0]
 80012f6:	f025 0501 	bic.w	r5, r5, #1
 80012fa:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012fc:	f8dc 503c 	ldr.w	r5, [ip, #60]	; 0x3c
 8001300:	6068      	str	r0, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001302:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001304:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8001308:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 800130a:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800130e:	bf0b      	itete	eq
 8001310:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001312:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001314:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001316:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001318:	b153      	cbz	r3, 8001330 <HAL_DMA_Start_IT+0x78>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800131a:	6823      	ldr	r3, [r4, #0]
 800131c:	f043 030e 	orr.w	r3, r3, #14
 8001320:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001322:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001324:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	6023      	str	r3, [r4, #0]
}
 800132c:	bc30      	pop	{r4, r5}
 800132e:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001330:	6823      	ldr	r3, [r4, #0]
 8001332:	f023 0304 	bic.w	r3, r3, #4
 8001336:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001338:	6823      	ldr	r3, [r4, #0]
 800133a:	f043 030a 	orr.w	r3, r3, #10
 800133e:	6023      	str	r3, [r4, #0]
 8001340:	e7ef      	b.n	8001322 <HAL_DMA_Start_IT+0x6a>
  __HAL_LOCK(hdma);
 8001342:	2002      	movs	r0, #2
}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop

08001348 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001348:	2204      	movs	r2, #4
{
 800134a:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800134c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800134e:	6c01      	ldr	r1, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001350:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001352:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001354:	408a      	lsls	r2, r1
 8001356:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001358:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800135a:	d043      	beq.n	80013e4 <HAL_DMA_IRQHandler+0x9c>
 800135c:	076a      	lsls	r2, r5, #29
 800135e:	d541      	bpl.n	80013e4 <HAL_DMA_IRQHandler+0x9c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	0691      	lsls	r1, r2, #26
 8001364:	d403      	bmi.n	800136e <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	f022 0204 	bic.w	r2, r2, #4
 800136c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800136e:	4a9b      	ldr	r2, [pc, #620]	; (80015dc <HAL_DMA_IRQHandler+0x294>)
 8001370:	499b      	ldr	r1, [pc, #620]	; (80015e0 <HAL_DMA_IRQHandler+0x298>)
 8001372:	4293      	cmp	r3, r2
 8001374:	f240 8091 	bls.w	800149a <HAL_DMA_IRQHandler+0x152>
 8001378:	428b      	cmp	r3, r1
 800137a:	f000 80ef 	beq.w	800155c <HAL_DMA_IRQHandler+0x214>
 800137e:	3114      	adds	r1, #20
 8001380:	428b      	cmp	r3, r1
 8001382:	f000 80f3 	beq.w	800156c <HAL_DMA_IRQHandler+0x224>
 8001386:	3114      	adds	r1, #20
 8001388:	428b      	cmp	r3, r1
 800138a:	f000 80e2 	beq.w	8001552 <HAL_DMA_IRQHandler+0x20a>
 800138e:	3114      	adds	r1, #20
 8001390:	428b      	cmp	r3, r1
 8001392:	f000 80f6 	beq.w	8001582 <HAL_DMA_IRQHandler+0x23a>
 8001396:	3114      	adds	r1, #20
 8001398:	428b      	cmp	r3, r1
 800139a:	f000 80fe 	beq.w	800159a <HAL_DMA_IRQHandler+0x252>
 800139e:	3114      	adds	r1, #20
 80013a0:	428b      	cmp	r3, r1
 80013a2:	f000 8103 	beq.w	80015ac <HAL_DMA_IRQHandler+0x264>
 80013a6:	4293      	cmp	r3, r2
 80013a8:	f000 810c 	beq.w	80015c4 <HAL_DMA_IRQHandler+0x27c>
 80013ac:	f502 7262 	add.w	r2, r2, #904	; 0x388
 80013b0:	4293      	cmp	r3, r2
 80013b2:	f000 80d3 	beq.w	800155c <HAL_DMA_IRQHandler+0x214>
 80013b6:	3214      	adds	r2, #20
 80013b8:	4293      	cmp	r3, r2
 80013ba:	f000 80d7 	beq.w	800156c <HAL_DMA_IRQHandler+0x224>
 80013be:	3214      	adds	r2, #20
 80013c0:	4293      	cmp	r3, r2
 80013c2:	f000 80c6 	beq.w	8001552 <HAL_DMA_IRQHandler+0x20a>
 80013c6:	3214      	adds	r2, #20
 80013c8:	4293      	cmp	r3, r2
 80013ca:	bf14      	ite	ne
 80013cc:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 80013d0:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 80013d4:	4a83      	ldr	r2, [pc, #524]	; (80015e4 <HAL_DMA_IRQHandler+0x29c>)
 80013d6:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80013d8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f040 80b0 	bne.w	8001540 <HAL_DMA_IRQHandler+0x1f8>
}
 80013e0:	bc70      	pop	{r4, r5, r6}
 80013e2:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80013e4:	2202      	movs	r2, #2
 80013e6:	408a      	lsls	r2, r1
 80013e8:	4222      	tst	r2, r4
 80013ea:	d03f      	beq.n	800146c <HAL_DMA_IRQHandler+0x124>
 80013ec:	07aa      	lsls	r2, r5, #30
 80013ee:	d53d      	bpl.n	800146c <HAL_DMA_IRQHandler+0x124>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	0691      	lsls	r1, r2, #26
 80013f4:	d406      	bmi.n	8001404 <HAL_DMA_IRQHandler+0xbc>
      hdma->State = HAL_DMA_STATE_READY;
 80013f6:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	f022 020a 	bic.w	r2, r2, #10
 80013fe:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001400:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001404:	4a75      	ldr	r2, [pc, #468]	; (80015dc <HAL_DMA_IRQHandler+0x294>)
 8001406:	4976      	ldr	r1, [pc, #472]	; (80015e0 <HAL_DMA_IRQHandler+0x298>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d96d      	bls.n	80014e8 <HAL_DMA_IRQHandler+0x1a0>
 800140c:	428b      	cmp	r3, r1
 800140e:	f000 80a7 	beq.w	8001560 <HAL_DMA_IRQHandler+0x218>
 8001412:	3114      	adds	r1, #20
 8001414:	428b      	cmp	r3, r1
 8001416:	f000 8097 	beq.w	8001548 <HAL_DMA_IRQHandler+0x200>
 800141a:	3114      	adds	r1, #20
 800141c:	428b      	cmp	r3, r1
 800141e:	f000 80a7 	beq.w	8001570 <HAL_DMA_IRQHandler+0x228>
 8001422:	3114      	adds	r1, #20
 8001424:	428b      	cmp	r3, r1
 8001426:	f000 80af 	beq.w	8001588 <HAL_DMA_IRQHandler+0x240>
 800142a:	3114      	adds	r1, #20
 800142c:	428b      	cmp	r3, r1
 800142e:	f000 80ba 	beq.w	80015a6 <HAL_DMA_IRQHandler+0x25e>
 8001432:	3114      	adds	r1, #20
 8001434:	428b      	cmp	r3, r1
 8001436:	f000 80c2 	beq.w	80015be <HAL_DMA_IRQHandler+0x276>
 800143a:	4293      	cmp	r3, r2
 800143c:	f000 80cb 	beq.w	80015d6 <HAL_DMA_IRQHandler+0x28e>
 8001440:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001444:	4293      	cmp	r3, r2
 8001446:	f000 808b 	beq.w	8001560 <HAL_DMA_IRQHandler+0x218>
 800144a:	3214      	adds	r2, #20
 800144c:	4293      	cmp	r3, r2
 800144e:	d07b      	beq.n	8001548 <HAL_DMA_IRQHandler+0x200>
 8001450:	3214      	adds	r2, #20
 8001452:	4293      	cmp	r3, r2
 8001454:	f000 808c 	beq.w	8001570 <HAL_DMA_IRQHandler+0x228>
 8001458:	3214      	adds	r2, #20
 800145a:	4293      	cmp	r3, r2
 800145c:	bf14      	ite	ne
 800145e:	f44f 3200 	movne.w	r2, #131072	; 0x20000
 8001462:	f44f 5200 	moveq.w	r2, #8192	; 0x2000
 8001466:	4b5f      	ldr	r3, [pc, #380]	; (80015e4 <HAL_DMA_IRQHandler+0x29c>)
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	e062      	b.n	8001532 <HAL_DMA_IRQHandler+0x1ea>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800146c:	2208      	movs	r2, #8
 800146e:	408a      	lsls	r2, r1
 8001470:	4222      	tst	r2, r4
 8001472:	d0b5      	beq.n	80013e0 <HAL_DMA_IRQHandler+0x98>
 8001474:	072a      	lsls	r2, r5, #28
 8001476:	d5b3      	bpl.n	80013e0 <HAL_DMA_IRQHandler+0x98>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001478:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(hdma);
 800147a:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800147e:	f022 020e 	bic.w	r2, r2, #14
 8001482:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001484:	2301      	movs	r3, #1
    if (hdma->XferErrorCallback != NULL)
 8001486:	6b02      	ldr	r2, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001488:	fa03 f101 	lsl.w	r1, r3, r1
 800148c:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800148e:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001490:	8404      	strh	r4, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001492:	2a00      	cmp	r2, #0
 8001494:	d0a4      	beq.n	80013e0 <HAL_DMA_IRQHandler+0x98>
}
 8001496:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001498:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800149a:	428b      	cmp	r3, r1
 800149c:	d05c      	beq.n	8001558 <HAL_DMA_IRQHandler+0x210>
 800149e:	3114      	adds	r1, #20
 80014a0:	428b      	cmp	r3, r1
 80014a2:	d061      	beq.n	8001568 <HAL_DMA_IRQHandler+0x220>
 80014a4:	3114      	adds	r1, #20
 80014a6:	428b      	cmp	r3, r1
 80014a8:	d050      	beq.n	800154c <HAL_DMA_IRQHandler+0x204>
 80014aa:	3114      	adds	r1, #20
 80014ac:	428b      	cmp	r3, r1
 80014ae:	d065      	beq.n	800157c <HAL_DMA_IRQHandler+0x234>
 80014b0:	3114      	adds	r1, #20
 80014b2:	428b      	cmp	r3, r1
 80014b4:	d06e      	beq.n	8001594 <HAL_DMA_IRQHandler+0x24c>
 80014b6:	3114      	adds	r1, #20
 80014b8:	428b      	cmp	r3, r1
 80014ba:	d07a      	beq.n	80015b2 <HAL_DMA_IRQHandler+0x26a>
 80014bc:	4293      	cmp	r3, r2
 80014be:	f000 8084 	beq.w	80015ca <HAL_DMA_IRQHandler+0x282>
 80014c2:	4a49      	ldr	r2, [pc, #292]	; (80015e8 <HAL_DMA_IRQHandler+0x2a0>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d047      	beq.n	8001558 <HAL_DMA_IRQHandler+0x210>
 80014c8:	3214      	adds	r2, #20
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d04c      	beq.n	8001568 <HAL_DMA_IRQHandler+0x220>
 80014ce:	3214      	adds	r2, #20
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d03b      	beq.n	800154c <HAL_DMA_IRQHandler+0x204>
 80014d4:	3214      	adds	r2, #20
 80014d6:	4293      	cmp	r3, r2
 80014d8:	bf14      	ite	ne
 80014da:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 80014de:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 80014e2:	4a42      	ldr	r2, [pc, #264]	; (80015ec <HAL_DMA_IRQHandler+0x2a4>)
 80014e4:	6053      	str	r3, [r2, #4]
 80014e6:	e777      	b.n	80013d8 <HAL_DMA_IRQHandler+0x90>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80014e8:	428b      	cmp	r3, r1
 80014ea:	d03b      	beq.n	8001564 <HAL_DMA_IRQHandler+0x21c>
 80014ec:	3114      	adds	r1, #20
 80014ee:	428b      	cmp	r3, r1
 80014f0:	d028      	beq.n	8001544 <HAL_DMA_IRQHandler+0x1fc>
 80014f2:	3114      	adds	r1, #20
 80014f4:	428b      	cmp	r3, r1
 80014f6:	d03e      	beq.n	8001576 <HAL_DMA_IRQHandler+0x22e>
 80014f8:	3114      	adds	r1, #20
 80014fa:	428b      	cmp	r3, r1
 80014fc:	d047      	beq.n	800158e <HAL_DMA_IRQHandler+0x246>
 80014fe:	3114      	adds	r1, #20
 8001500:	428b      	cmp	r3, r1
 8001502:	d04d      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x258>
 8001504:	3114      	adds	r1, #20
 8001506:	428b      	cmp	r3, r1
 8001508:	d056      	beq.n	80015b8 <HAL_DMA_IRQHandler+0x270>
 800150a:	4293      	cmp	r3, r2
 800150c:	d060      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x288>
 800150e:	4a36      	ldr	r2, [pc, #216]	; (80015e8 <HAL_DMA_IRQHandler+0x2a0>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d027      	beq.n	8001564 <HAL_DMA_IRQHandler+0x21c>
 8001514:	3214      	adds	r2, #20
 8001516:	4293      	cmp	r3, r2
 8001518:	d014      	beq.n	8001544 <HAL_DMA_IRQHandler+0x1fc>
 800151a:	3214      	adds	r2, #20
 800151c:	4293      	cmp	r3, r2
 800151e:	d02a      	beq.n	8001576 <HAL_DMA_IRQHandler+0x22e>
 8001520:	3214      	adds	r2, #20
 8001522:	4293      	cmp	r3, r2
 8001524:	bf14      	ite	ne
 8001526:	f44f 3200 	movne.w	r2, #131072	; 0x20000
 800152a:	f44f 5200 	moveq.w	r2, #8192	; 0x2000
 800152e:	4b2f      	ldr	r3, [pc, #188]	; (80015ec <HAL_DMA_IRQHandler+0x2a4>)
 8001530:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8001532:	2200      	movs	r2, #0
    if(hdma->XferCpltCallback != NULL)
 8001534:	6a83      	ldr	r3, [r0, #40]	; 0x28
    __HAL_UNLOCK(hdma);
 8001536:	f880 2020 	strb.w	r2, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800153a:	2b00      	cmp	r3, #0
 800153c:	f43f af50 	beq.w	80013e0 <HAL_DMA_IRQHandler+0x98>
}
 8001540:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8001542:	4718      	bx	r3
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001544:	2220      	movs	r2, #32
 8001546:	e7f2      	b.n	800152e <HAL_DMA_IRQHandler+0x1e6>
 8001548:	2220      	movs	r2, #32
 800154a:	e78c      	b.n	8001466 <HAL_DMA_IRQHandler+0x11e>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800154c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001550:	e7c7      	b.n	80014e2 <HAL_DMA_IRQHandler+0x19a>
 8001552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001556:	e73d      	b.n	80013d4 <HAL_DMA_IRQHandler+0x8c>
 8001558:	2304      	movs	r3, #4
 800155a:	e7c2      	b.n	80014e2 <HAL_DMA_IRQHandler+0x19a>
 800155c:	2304      	movs	r3, #4
 800155e:	e739      	b.n	80013d4 <HAL_DMA_IRQHandler+0x8c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001560:	2202      	movs	r2, #2
 8001562:	e780      	b.n	8001466 <HAL_DMA_IRQHandler+0x11e>
 8001564:	2202      	movs	r2, #2
 8001566:	e7e2      	b.n	800152e <HAL_DMA_IRQHandler+0x1e6>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001568:	2340      	movs	r3, #64	; 0x40
 800156a:	e7ba      	b.n	80014e2 <HAL_DMA_IRQHandler+0x19a>
 800156c:	2340      	movs	r3, #64	; 0x40
 800156e:	e731      	b.n	80013d4 <HAL_DMA_IRQHandler+0x8c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001574:	e777      	b.n	8001466 <HAL_DMA_IRQHandler+0x11e>
 8001576:	f44f 7200 	mov.w	r2, #512	; 0x200
 800157a:	e7d8      	b.n	800152e <HAL_DMA_IRQHandler+0x1e6>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800157c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001580:	e7af      	b.n	80014e2 <HAL_DMA_IRQHandler+0x19a>
 8001582:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001586:	e725      	b.n	80013d4 <HAL_DMA_IRQHandler+0x8c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001588:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800158c:	e76b      	b.n	8001466 <HAL_DMA_IRQHandler+0x11e>
 800158e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001592:	e7cc      	b.n	800152e <HAL_DMA_IRQHandler+0x1e6>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001594:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001598:	e7a3      	b.n	80014e2 <HAL_DMA_IRQHandler+0x19a>
 800159a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800159e:	e719      	b.n	80013d4 <HAL_DMA_IRQHandler+0x8c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80015a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015a4:	e7c3      	b.n	800152e <HAL_DMA_IRQHandler+0x1e6>
 80015a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015aa:	e75c      	b.n	8001466 <HAL_DMA_IRQHandler+0x11e>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80015ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015b0:	e710      	b.n	80013d4 <HAL_DMA_IRQHandler+0x8c>
 80015b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015b6:	e794      	b.n	80014e2 <HAL_DMA_IRQHandler+0x19a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80015b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80015bc:	e7b7      	b.n	800152e <HAL_DMA_IRQHandler+0x1e6>
 80015be:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80015c2:	e750      	b.n	8001466 <HAL_DMA_IRQHandler+0x11e>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80015c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80015c8:	e704      	b.n	80013d4 <HAL_DMA_IRQHandler+0x8c>
 80015ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80015ce:	e788      	b.n	80014e2 <HAL_DMA_IRQHandler+0x19a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80015d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015d4:	e7ab      	b.n	800152e <HAL_DMA_IRQHandler+0x1e6>
 80015d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015da:	e744      	b.n	8001466 <HAL_DMA_IRQHandler+0x11e>
 80015dc:	40020080 	.word	0x40020080
 80015e0:	40020008 	.word	0x40020008
 80015e4:	40020400 	.word	0x40020400
 80015e8:	40020408 	.word	0x40020408
 80015ec:	40020000 	.word	0x40020000

080015f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f4:	680e      	ldr	r6, [r1, #0]
{
 80015f6:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f8:	2e00      	cmp	r6, #0
 80015fa:	f000 80be 	beq.w	800177a <HAL_GPIO_Init+0x18a>
 80015fe:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001600:	4f85      	ldr	r7, [pc, #532]	; (8001818 <HAL_GPIO_Init+0x228>)
  uint32_t config = 0x00u;
 8001602:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8001604:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001606:	4d85      	ldr	r5, [pc, #532]	; (800181c <HAL_GPIO_Init+0x22c>)
      switch (GPIO_Init->Mode)
 8001608:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8001820 <HAL_GPIO_Init+0x230>
 800160c:	e006      	b.n	800161c <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 800160e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001610:	fa36 f403 	lsrs.w	r4, r6, r3
 8001614:	f102 0204 	add.w	r2, r2, #4
 8001618:	f000 80af 	beq.w	800177a <HAL_GPIO_Init+0x18a>
    ioposition = (0x01uL << position);
 800161c:	2401      	movs	r4, #1
 800161e:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8001620:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001624:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 8001628:	d1f1      	bne.n	800160e <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 800162a:	684e      	ldr	r6, [r1, #4]
 800162c:	2e12      	cmp	r6, #18
 800162e:	f200 80a7 	bhi.w	8001780 <HAL_GPIO_Init+0x190>
 8001632:	2e12      	cmp	r6, #18
 8001634:	d81a      	bhi.n	800166c <HAL_GPIO_Init+0x7c>
 8001636:	e8df f006 	tbb	[pc, r6]
 800163a:	c2b0      	.short	0xc2b0
 800163c:	1919d7be 	.word	0x1919d7be
 8001640:	19191919 	.word	0x19191919
 8001644:	19191919 	.word	0x19191919
 8001648:	ba191919 	.word	0xba191919
 800164c:	c5          	.byte	0xc5
 800164d:	00          	.byte	0x00
 800164e:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8001824 <HAL_GPIO_Init+0x234>
 8001652:	4576      	cmp	r6, lr
 8001654:	f000 80a1 	beq.w	800179a <HAL_GPIO_Init+0x1aa>
 8001658:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 800165c:	4576      	cmp	r6, lr
 800165e:	f000 809c 	beq.w	800179a <HAL_GPIO_Init+0x1aa>
 8001662:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8001666:	4576      	cmp	r6, lr
 8001668:	f000 8097 	beq.w	800179a <HAL_GPIO_Init+0x1aa>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800166c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8001670:	bf9c      	itt	ls
 8001672:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001674:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001676:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800167a:	bf84      	itt	hi
 800167c:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001680:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001684:	f8de 4000 	ldr.w	r4, [lr]
 8001688:	fa0a f90b 	lsl.w	r9, sl, fp
 800168c:	fa06 fb0b 	lsl.w	fp, r6, fp
 8001690:	ea24 040b 	bic.w	r4, r4, fp
 8001694:	ea44 0409 	orr.w	r4, r4, r9
 8001698:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800169c:	684c      	ldr	r4, [r1, #4]
 800169e:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80016a2:	f000 8082 	beq.w	80017aa <HAL_GPIO_Init+0x1ba>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016a6:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016aa:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016ae:	f04e 0e01 	orr.w	lr, lr, #1
 80016b2:	f8c7 e018 	str.w	lr, [r7, #24]
 80016b6:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016ba:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016be:	f00e 0e01 	and.w	lr, lr, #1
 80016c2:	f8cd e004 	str.w	lr, [sp, #4]
 80016c6:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80016ca:	f023 0e03 	bic.w	lr, r3, #3
 80016ce:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 80016d2:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 80016d6:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016da:	fa06 f609 	lsl.w	r6, r6, r9
 80016de:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016e2:	f8df b144 	ldr.w	fp, [pc, #324]	; 8001828 <HAL_GPIO_Init+0x238>
 80016e6:	4558      	cmp	r0, fp
 80016e8:	d01b      	beq.n	8001722 <HAL_GPIO_Init+0x132>
 80016ea:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 80016ee:	4558      	cmp	r0, fp
 80016f0:	d073      	beq.n	80017da <HAL_GPIO_Init+0x1ea>
 80016f2:	f8df b138 	ldr.w	fp, [pc, #312]	; 800182c <HAL_GPIO_Init+0x23c>
 80016f6:	4558      	cmp	r0, fp
 80016f8:	d068      	beq.n	80017cc <HAL_GPIO_Init+0x1dc>
 80016fa:	f8df b134 	ldr.w	fp, [pc, #308]	; 8001830 <HAL_GPIO_Init+0x240>
 80016fe:	4558      	cmp	r0, fp
 8001700:	d07c      	beq.n	80017fc <HAL_GPIO_Init+0x20c>
 8001702:	f8df b130 	ldr.w	fp, [pc, #304]	; 8001834 <HAL_GPIO_Init+0x244>
 8001706:	4558      	cmp	r0, fp
 8001708:	d07f      	beq.n	800180a <HAL_GPIO_Init+0x21a>
 800170a:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8001838 <HAL_GPIO_Init+0x248>
 800170e:	4558      	cmp	r0, fp
 8001710:	bf0c      	ite	eq
 8001712:	f04f 0b05 	moveq.w	fp, #5
 8001716:	f04f 0b06 	movne.w	fp, #6
 800171a:	fa0b f909 	lsl.w	r9, fp, r9
 800171e:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001722:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8001726:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001728:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800172c:	bf14      	ite	ne
 800172e:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001732:	ea26 060c 	biceq.w	r6, r6, ip
 8001736:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8001738:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800173a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800173e:	bf14      	ite	ne
 8001740:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001744:	ea26 060c 	biceq.w	r6, r6, ip
 8001748:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800174a:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800174c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001750:	bf14      	ite	ne
 8001752:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001756:	ea26 060c 	biceq.w	r6, r6, ip
 800175a:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800175c:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001760:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001762:	d01f      	beq.n	80017a4 <HAL_GPIO_Init+0x1b4>
          SET_BIT(EXTI->FTSR, iocurrent);
 8001764:	ea44 040c 	orr.w	r4, r4, ip
 8001768:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800176a:	680e      	ldr	r6, [r1, #0]
	position++;
 800176c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800176e:	fa36 f403 	lsrs.w	r4, r6, r3
 8001772:	f102 0204 	add.w	r2, r2, #4
 8001776:	f47f af51 	bne.w	800161c <HAL_GPIO_Init+0x2c>
  }
}
 800177a:	b003      	add	sp, #12
 800177c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001780:	4546      	cmp	r6, r8
 8001782:	d00a      	beq.n	800179a <HAL_GPIO_Init+0x1aa>
 8001784:	f67f af63 	bls.w	800164e <HAL_GPIO_Init+0x5e>
 8001788:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 800183c <HAL_GPIO_Init+0x24c>
 800178c:	4576      	cmp	r6, lr
 800178e:	d004      	beq.n	800179a <HAL_GPIO_Init+0x1aa>
 8001790:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8001794:	4576      	cmp	r6, lr
 8001796:	f47f af69 	bne.w	800166c <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800179a:	688e      	ldr	r6, [r1, #8]
 800179c:	bb3e      	cbnz	r6, 80017ee <HAL_GPIO_Init+0x1fe>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800179e:	f04f 0a04 	mov.w	sl, #4
 80017a2:	e763      	b.n	800166c <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017a4:	ea24 040c 	bic.w	r4, r4, ip
 80017a8:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017aa:	680e      	ldr	r6, [r1, #0]
 80017ac:	e72f      	b.n	800160e <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017ae:	68cc      	ldr	r4, [r1, #12]
 80017b0:	f104 0a04 	add.w	sl, r4, #4
          break;
 80017b4:	e75a      	b.n	800166c <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017b6:	68cc      	ldr	r4, [r1, #12]
 80017b8:	f104 0a08 	add.w	sl, r4, #8
          break;
 80017bc:	e756      	b.n	800166c <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017be:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 80017c2:	e753      	b.n	800166c <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017c4:	68cc      	ldr	r4, [r1, #12]
 80017c6:	f104 0a0c 	add.w	sl, r4, #12
          break;
 80017ca:	e74f      	b.n	800166c <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017cc:	f04f 0b02 	mov.w	fp, #2
 80017d0:	fa0b f909 	lsl.w	r9, fp, r9
 80017d4:	ea46 0609 	orr.w	r6, r6, r9
 80017d8:	e7a3      	b.n	8001722 <HAL_GPIO_Init+0x132>
 80017da:	f04f 0b01 	mov.w	fp, #1
 80017de:	fa0b f909 	lsl.w	r9, fp, r9
 80017e2:	ea46 0609 	orr.w	r6, r6, r9
 80017e6:	e79c      	b.n	8001722 <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 80017e8:	f04f 0a00 	mov.w	sl, #0
 80017ec:	e73e      	b.n	800166c <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017ee:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017f0:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 80017f4:	bf0c      	ite	eq
 80017f6:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 80017f8:	6144      	strne	r4, [r0, #20]
 80017fa:	e737      	b.n	800166c <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017fc:	f04f 0b03 	mov.w	fp, #3
 8001800:	fa0b f909 	lsl.w	r9, fp, r9
 8001804:	ea46 0609 	orr.w	r6, r6, r9
 8001808:	e78b      	b.n	8001722 <HAL_GPIO_Init+0x132>
 800180a:	f04f 0b04 	mov.w	fp, #4
 800180e:	fa0b f909 	lsl.w	r9, fp, r9
 8001812:	ea46 0609 	orr.w	r6, r6, r9
 8001816:	e784      	b.n	8001722 <HAL_GPIO_Init+0x132>
 8001818:	40021000 	.word	0x40021000
 800181c:	40010400 	.word	0x40010400
 8001820:	10220000 	.word	0x10220000
 8001824:	10120000 	.word	0x10120000
 8001828:	40010800 	.word	0x40010800
 800182c:	40011000 	.word	0x40011000
 8001830:	40011400 	.word	0x40011400
 8001834:	40011800 	.word	0x40011800
 8001838:	40011c00 	.word	0x40011c00
 800183c:	10310000 	.word	0x10310000

08001840 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001840:	6883      	ldr	r3, [r0, #8]
 8001842:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001844:	bf14      	ite	ne
 8001846:	2001      	movne	r0, #1
 8001848:	2000      	moveq	r0, #0
 800184a:	4770      	bx	lr

0800184c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800184c:	b902      	cbnz	r2, 8001850 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800184e:	0409      	lsls	r1, r1, #16
 8001850:	6101      	str	r1, [r0, #16]
  }
}
 8001852:	4770      	bx	lr

08001854 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001854:	2800      	cmp	r0, #0
 8001856:	f000 81b6 	beq.w	8001bc6 <HAL_RCC_OscConfig+0x372>
{
 800185a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800185e:	6803      	ldr	r3, [r0, #0]
 8001860:	4604      	mov	r4, r0
 8001862:	07dd      	lsls	r5, r3, #31
{
 8001864:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001866:	d535      	bpl.n	80018d4 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001868:	499a      	ldr	r1, [pc, #616]	; (8001ad4 <HAL_RCC_OscConfig+0x280>)
 800186a:	684a      	ldr	r2, [r1, #4]
 800186c:	f002 020c 	and.w	r2, r2, #12
 8001870:	2a04      	cmp	r2, #4
 8001872:	f000 80ef 	beq.w	8001a54 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001876:	684a      	ldr	r2, [r1, #4]
 8001878:	f002 020c 	and.w	r2, r2, #12
 800187c:	2a08      	cmp	r2, #8
 800187e:	f000 80e5 	beq.w	8001a4c <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001882:	6863      	ldr	r3, [r4, #4]
 8001884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001888:	d010      	beq.n	80018ac <HAL_RCC_OscConfig+0x58>
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 810c 	beq.w	8001aa8 <HAL_RCC_OscConfig+0x254>
 8001890:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001894:	f000 8182 	beq.w	8001b9c <HAL_RCC_OscConfig+0x348>
 8001898:	4b8e      	ldr	r3, [pc, #568]	; (8001ad4 <HAL_RCC_OscConfig+0x280>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	e004      	b.n	80018b6 <HAL_RCC_OscConfig+0x62>
 80018ac:	4a89      	ldr	r2, [pc, #548]	; (8001ad4 <HAL_RCC_OscConfig+0x280>)
 80018ae:	6813      	ldr	r3, [r2, #0]
 80018b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b6:	f7ff fc2b 	bl	8001110 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ba:	4e86      	ldr	r6, [pc, #536]	; (8001ad4 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 80018bc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018be:	e005      	b.n	80018cc <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c0:	f7ff fc26 	bl	8001110 <HAL_GetTick>
 80018c4:	1b40      	subs	r0, r0, r5
 80018c6:	2864      	cmp	r0, #100	; 0x64
 80018c8:	f200 80ea 	bhi.w	8001aa0 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018cc:	6833      	ldr	r3, [r6, #0]
 80018ce:	039a      	lsls	r2, r3, #14
 80018d0:	d5f6      	bpl.n	80018c0 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	079f      	lsls	r7, r3, #30
 80018d6:	d528      	bpl.n	800192a <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018d8:	4a7e      	ldr	r2, [pc, #504]	; (8001ad4 <HAL_RCC_OscConfig+0x280>)
 80018da:	6851      	ldr	r1, [r2, #4]
 80018dc:	f011 0f0c 	tst.w	r1, #12
 80018e0:	f000 808d 	beq.w	80019fe <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018e4:	6851      	ldr	r1, [r2, #4]
 80018e6:	f001 010c 	and.w	r1, r1, #12
 80018ea:	2908      	cmp	r1, #8
 80018ec:	f000 8083 	beq.w	80019f6 <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018f0:	6923      	ldr	r3, [r4, #16]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 8118 	beq.w	8001b28 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f8:	2201      	movs	r2, #1
 80018fa:	4b77      	ldr	r3, [pc, #476]	; (8001ad8 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fc:	4e75      	ldr	r6, [pc, #468]	; (8001ad4 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 80018fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001900:	f7ff fc06 	bl	8001110 <HAL_GetTick>
 8001904:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001906:	e005      	b.n	8001914 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001908:	f7ff fc02 	bl	8001110 <HAL_GetTick>
 800190c:	1b40      	subs	r0, r0, r5
 800190e:	2802      	cmp	r0, #2
 8001910:	f200 80c6 	bhi.w	8001aa0 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001914:	6833      	ldr	r3, [r6, #0]
 8001916:	0798      	lsls	r0, r3, #30
 8001918:	d5f6      	bpl.n	8001908 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191a:	6833      	ldr	r3, [r6, #0]
 800191c:	6962      	ldr	r2, [r4, #20]
 800191e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001922:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001926:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001928:	6823      	ldr	r3, [r4, #0]
 800192a:	071a      	lsls	r2, r3, #28
 800192c:	d41f      	bmi.n	800196e <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800192e:	075d      	lsls	r5, r3, #29
 8001930:	d542      	bpl.n	80019b8 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001932:	4b68      	ldr	r3, [pc, #416]	; (8001ad4 <HAL_RCC_OscConfig+0x280>)
 8001934:	69da      	ldr	r2, [r3, #28]
 8001936:	00d0      	lsls	r0, r2, #3
 8001938:	d57d      	bpl.n	8001a36 <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 800193a:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193c:	4e67      	ldr	r6, [pc, #412]	; (8001adc <HAL_RCC_OscConfig+0x288>)
 800193e:	6833      	ldr	r3, [r6, #0]
 8001940:	05d9      	lsls	r1, r3, #23
 8001942:	f140 809d 	bpl.w	8001a80 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001946:	68e3      	ldr	r3, [r4, #12]
 8001948:	2b01      	cmp	r3, #1
 800194a:	f000 80fe 	beq.w	8001b4a <HAL_RCC_OscConfig+0x2f6>
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 80ca 	beq.w	8001ae8 <HAL_RCC_OscConfig+0x294>
 8001954:	2b05      	cmp	r3, #5
 8001956:	4b5f      	ldr	r3, [pc, #380]	; (8001ad4 <HAL_RCC_OscConfig+0x280>)
 8001958:	6a1a      	ldr	r2, [r3, #32]
 800195a:	f000 812c 	beq.w	8001bb6 <HAL_RCC_OscConfig+0x362>
 800195e:	f022 0201 	bic.w	r2, r2, #1
 8001962:	621a      	str	r2, [r3, #32]
 8001964:	6a1a      	ldr	r2, [r3, #32]
 8001966:	f022 0204 	bic.w	r2, r2, #4
 800196a:	621a      	str	r2, [r3, #32]
 800196c:	e0f2      	b.n	8001b54 <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800196e:	69a3      	ldr	r3, [r4, #24]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d04f      	beq.n	8001a14 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 8001974:	2201      	movs	r2, #1
 8001976:	4b58      	ldr	r3, [pc, #352]	; (8001ad8 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001978:	4e56      	ldr	r6, [pc, #344]	; (8001ad4 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 800197a:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800197e:	f7ff fbc7 	bl	8001110 <HAL_GetTick>
 8001982:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001984:	e005      	b.n	8001992 <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001986:	f7ff fbc3 	bl	8001110 <HAL_GetTick>
 800198a:	1b40      	subs	r0, r0, r5
 800198c:	2802      	cmp	r0, #2
 800198e:	f200 8087 	bhi.w	8001aa0 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001992:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001994:	079b      	lsls	r3, r3, #30
 8001996:	d5f6      	bpl.n	8001986 <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001998:	4b51      	ldr	r3, [pc, #324]	; (8001ae0 <HAL_RCC_OscConfig+0x28c>)
 800199a:	4a52      	ldr	r2, [pc, #328]	; (8001ae4 <HAL_RCC_OscConfig+0x290>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	fba2 2303 	umull	r2, r3, r2, r3
 80019a2:	0a5b      	lsrs	r3, r3, #9
 80019a4:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80019a6:	bf00      	nop
  }
  while (Delay --);
 80019a8:	9b01      	ldr	r3, [sp, #4]
 80019aa:	1e5a      	subs	r2, r3, #1
 80019ac:	9201      	str	r2, [sp, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f9      	bne.n	80019a6 <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019b2:	6823      	ldr	r3, [r4, #0]
 80019b4:	075d      	lsls	r5, r3, #29
 80019b6:	d4bc      	bmi.n	8001932 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019b8:	69e0      	ldr	r0, [r4, #28]
 80019ba:	b1c0      	cbz	r0, 80019ee <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019bc:	4d45      	ldr	r5, [pc, #276]	; (8001ad4 <HAL_RCC_OscConfig+0x280>)
 80019be:	686b      	ldr	r3, [r5, #4]
 80019c0:	f003 030c 	and.w	r3, r3, #12
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	f000 80d8 	beq.w	8001b7a <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 80019ca:	2200      	movs	r2, #0
 80019cc:	4b42      	ldr	r3, [pc, #264]	; (8001ad8 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ce:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80019d0:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d2:	f000 80fa 	beq.w	8001bca <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 80019d6:	f7ff fb9b 	bl	8001110 <HAL_GetTick>
 80019da:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019dc:	e004      	b.n	80019e8 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019de:	f7ff fb97 	bl	8001110 <HAL_GetTick>
 80019e2:	1b00      	subs	r0, r0, r4
 80019e4:	2802      	cmp	r0, #2
 80019e6:	d85b      	bhi.n	8001aa0 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e8:	682b      	ldr	r3, [r5, #0]
 80019ea:	019b      	lsls	r3, r3, #6
 80019ec:	d4f7      	bmi.n	80019de <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 80019ee:	2000      	movs	r0, #0
}
 80019f0:	b002      	add	sp, #8
 80019f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019f6:	6852      	ldr	r2, [r2, #4]
 80019f8:	03d6      	lsls	r6, r2, #15
 80019fa:	f53f af79 	bmi.w	80018f0 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fe:	4a35      	ldr	r2, [pc, #212]	; (8001ad4 <HAL_RCC_OscConfig+0x280>)
 8001a00:	6812      	ldr	r2, [r2, #0]
 8001a02:	0795      	lsls	r5, r2, #30
 8001a04:	d530      	bpl.n	8001a68 <HAL_RCC_OscConfig+0x214>
 8001a06:	6922      	ldr	r2, [r4, #16]
 8001a08:	2a01      	cmp	r2, #1
 8001a0a:	d02d      	beq.n	8001a68 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 8001a0c:	2001      	movs	r0, #1
}
 8001a0e:	b002      	add	sp, #8
 8001a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8001a14:	4a30      	ldr	r2, [pc, #192]	; (8001ad8 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a16:	4e2f      	ldr	r6, [pc, #188]	; (8001ad4 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 8001a18:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001a1c:	f7ff fb78 	bl	8001110 <HAL_GetTick>
 8001a20:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a22:	e004      	b.n	8001a2e <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a24:	f7ff fb74 	bl	8001110 <HAL_GetTick>
 8001a28:	1b40      	subs	r0, r0, r5
 8001a2a:	2802      	cmp	r0, #2
 8001a2c:	d838      	bhi.n	8001aa0 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a2e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001a30:	079f      	lsls	r7, r3, #30
 8001a32:	d4f7      	bmi.n	8001a24 <HAL_RCC_OscConfig+0x1d0>
 8001a34:	e7bd      	b.n	80019b2 <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a36:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8001a38:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a3a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a3e:	61da      	str	r2, [r3, #28]
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8001a4a:	e777      	b.n	800193c <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a4c:	684a      	ldr	r2, [r1, #4]
 8001a4e:	03d0      	lsls	r0, r2, #15
 8001a50:	f57f af17 	bpl.w	8001882 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	4a1f      	ldr	r2, [pc, #124]	; (8001ad4 <HAL_RCC_OscConfig+0x280>)
 8001a56:	6812      	ldr	r2, [r2, #0]
 8001a58:	0391      	lsls	r1, r2, #14
 8001a5a:	f57f af3b 	bpl.w	80018d4 <HAL_RCC_OscConfig+0x80>
 8001a5e:	6862      	ldr	r2, [r4, #4]
 8001a60:	2a00      	cmp	r2, #0
 8001a62:	f47f af37 	bne.w	80018d4 <HAL_RCC_OscConfig+0x80>
 8001a66:	e7d1      	b.n	8001a0c <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a68:	491a      	ldr	r1, [pc, #104]	; (8001ad4 <HAL_RCC_OscConfig+0x280>)
 8001a6a:	6960      	ldr	r0, [r4, #20]
 8001a6c:	680a      	ldr	r2, [r1, #0]
 8001a6e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001a72:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001a76:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a78:	071a      	lsls	r2, r3, #28
 8001a7a:	f57f af58 	bpl.w	800192e <HAL_RCC_OscConfig+0xda>
 8001a7e:	e776      	b.n	800196e <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a80:	6833      	ldr	r3, [r6, #0]
 8001a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a86:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001a88:	f7ff fb42 	bl	8001110 <HAL_GetTick>
 8001a8c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8e:	6833      	ldr	r3, [r6, #0]
 8001a90:	05da      	lsls	r2, r3, #23
 8001a92:	f53f af58 	bmi.w	8001946 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a96:	f7ff fb3b 	bl	8001110 <HAL_GetTick>
 8001a9a:	1bc0      	subs	r0, r0, r7
 8001a9c:	2864      	cmp	r0, #100	; 0x64
 8001a9e:	d9f6      	bls.n	8001a8e <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 8001aa0:	2003      	movs	r0, #3
}
 8001aa2:	b002      	add	sp, #8
 8001aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa8:	4d0a      	ldr	r5, [pc, #40]	; (8001ad4 <HAL_RCC_OscConfig+0x280>)
 8001aaa:	682b      	ldr	r3, [r5, #0]
 8001aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ab0:	602b      	str	r3, [r5, #0]
 8001ab2:	682b      	ldr	r3, [r5, #0]
 8001ab4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001aba:	f7ff fb29 	bl	8001110 <HAL_GetTick>
 8001abe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac0:	e004      	b.n	8001acc <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac2:	f7ff fb25 	bl	8001110 <HAL_GetTick>
 8001ac6:	1b80      	subs	r0, r0, r6
 8001ac8:	2864      	cmp	r0, #100	; 0x64
 8001aca:	d8e9      	bhi.n	8001aa0 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001acc:	682b      	ldr	r3, [r5, #0]
 8001ace:	039b      	lsls	r3, r3, #14
 8001ad0:	d4f7      	bmi.n	8001ac2 <HAL_RCC_OscConfig+0x26e>
 8001ad2:	e6fe      	b.n	80018d2 <HAL_RCC_OscConfig+0x7e>
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	42420000 	.word	0x42420000
 8001adc:	40007000 	.word	0x40007000
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae8:	4e50      	ldr	r6, [pc, #320]	; (8001c2c <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aea:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aee:	6a33      	ldr	r3, [r6, #32]
 8001af0:	f023 0301 	bic.w	r3, r3, #1
 8001af4:	6233      	str	r3, [r6, #32]
 8001af6:	6a33      	ldr	r3, [r6, #32]
 8001af8:	f023 0304 	bic.w	r3, r3, #4
 8001afc:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8001afe:	f7ff fb07 	bl	8001110 <HAL_GetTick>
 8001b02:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b04:	e004      	b.n	8001b10 <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b06:	f7ff fb03 	bl	8001110 <HAL_GetTick>
 8001b0a:	1bc0      	subs	r0, r0, r7
 8001b0c:	4540      	cmp	r0, r8
 8001b0e:	d8c7      	bhi.n	8001aa0 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b10:	6a33      	ldr	r3, [r6, #32]
 8001b12:	0798      	lsls	r0, r3, #30
 8001b14:	d4f7      	bmi.n	8001b06 <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 8001b16:	2d00      	cmp	r5, #0
 8001b18:	f43f af4e 	beq.w	80019b8 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b1c:	4a43      	ldr	r2, [pc, #268]	; (8001c2c <HAL_RCC_OscConfig+0x3d8>)
 8001b1e:	69d3      	ldr	r3, [r2, #28]
 8001b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b24:	61d3      	str	r3, [r2, #28]
 8001b26:	e747      	b.n	80019b8 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8001b28:	4a41      	ldr	r2, [pc, #260]	; (8001c30 <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2a:	4e40      	ldr	r6, [pc, #256]	; (8001c2c <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 8001b2c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001b2e:	f7ff faef 	bl	8001110 <HAL_GetTick>
 8001b32:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b34:	e004      	b.n	8001b40 <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b36:	f7ff faeb 	bl	8001110 <HAL_GetTick>
 8001b3a:	1b40      	subs	r0, r0, r5
 8001b3c:	2802      	cmp	r0, #2
 8001b3e:	d8af      	bhi.n	8001aa0 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b40:	6833      	ldr	r3, [r6, #0]
 8001b42:	0799      	lsls	r1, r3, #30
 8001b44:	d4f7      	bmi.n	8001b36 <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b46:	6823      	ldr	r3, [r4, #0]
 8001b48:	e6ef      	b.n	800192a <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b4a:	4a38      	ldr	r2, [pc, #224]	; (8001c2c <HAL_RCC_OscConfig+0x3d8>)
 8001b4c:	6a13      	ldr	r3, [r2, #32]
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8001b54:	f7ff fadc 	bl	8001110 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b58:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001b5c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b5e:	4f33      	ldr	r7, [pc, #204]	; (8001c2c <HAL_RCC_OscConfig+0x3d8>)
 8001b60:	e004      	b.n	8001b6c <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b62:	f7ff fad5 	bl	8001110 <HAL_GetTick>
 8001b66:	1b80      	subs	r0, r0, r6
 8001b68:	4540      	cmp	r0, r8
 8001b6a:	d899      	bhi.n	8001aa0 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	079b      	lsls	r3, r3, #30
 8001b70:	d5f7      	bpl.n	8001b62 <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 8001b72:	2d00      	cmp	r5, #0
 8001b74:	f43f af20 	beq.w	80019b8 <HAL_RCC_OscConfig+0x164>
 8001b78:	e7d0      	b.n	8001b1c <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b7a:	2801      	cmp	r0, #1
 8001b7c:	f43f af38 	beq.w	80019f0 <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 8001b80:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b82:	6a22      	ldr	r2, [r4, #32]
 8001b84:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001b88:	4291      	cmp	r1, r2
 8001b8a:	f47f af3f 	bne.w	8001a0c <HAL_RCC_OscConfig+0x1b8>
 8001b8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b90:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8001b94:	1a18      	subs	r0, r3, r0
 8001b96:	bf18      	it	ne
 8001b98:	2001      	movne	r0, #1
 8001b9a:	e729      	b.n	80019f0 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ba0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	e67f      	b.n	80018b6 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb6:	f042 0204 	orr.w	r2, r2, #4
 8001bba:	621a      	str	r2, [r3, #32]
 8001bbc:	6a1a      	ldr	r2, [r3, #32]
 8001bbe:	f042 0201 	orr.w	r2, r2, #1
 8001bc2:	621a      	str	r2, [r3, #32]
 8001bc4:	e7c6      	b.n	8001b54 <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 8001bc6:	2001      	movs	r0, #1
}
 8001bc8:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8001bca:	f7ff faa1 	bl	8001110 <HAL_GetTick>
 8001bce:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd0:	e005      	b.n	8001bde <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd2:	f7ff fa9d 	bl	8001110 <HAL_GetTick>
 8001bd6:	1b80      	subs	r0, r0, r6
 8001bd8:	2802      	cmp	r0, #2
 8001bda:	f63f af61 	bhi.w	8001aa0 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bde:	682b      	ldr	r3, [r5, #0]
 8001be0:	0199      	lsls	r1, r3, #6
 8001be2:	d4f6      	bmi.n	8001bd2 <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001be4:	6a23      	ldr	r3, [r4, #32]
 8001be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bea:	d105      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bec:	686a      	ldr	r2, [r5, #4]
 8001bee:	68a1      	ldr	r1, [r4, #8]
 8001bf0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001bf8:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bfa:	4d0c      	ldr	r5, [pc, #48]	; (8001c2c <HAL_RCC_OscConfig+0x3d8>)
 8001bfc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001bfe:	686a      	ldr	r2, [r5, #4]
 8001c00:	430b      	orrs	r3, r1
 8001c02:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8001c06:	490a      	ldr	r1, [pc, #40]	; (8001c30 <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001c0c:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001c0e:	f7ff fa7f 	bl	8001110 <HAL_GetTick>
 8001c12:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c14:	e005      	b.n	8001c22 <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c16:	f7ff fa7b 	bl	8001110 <HAL_GetTick>
 8001c1a:	1b00      	subs	r0, r0, r4
 8001c1c:	2802      	cmp	r0, #2
 8001c1e:	f63f af3f 	bhi.w	8001aa0 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c22:	682b      	ldr	r3, [r5, #0]
 8001c24:	019a      	lsls	r2, r3, #6
 8001c26:	d5f6      	bpl.n	8001c16 <HAL_RCC_OscConfig+0x3c2>
 8001c28:	e6e1      	b.n	80019ee <HAL_RCC_OscConfig+0x19a>
 8001c2a:	bf00      	nop
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	42420000 	.word	0x42420000

08001c34 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001c34:	2800      	cmp	r0, #0
 8001c36:	f000 80b1 	beq.w	8001d9c <HAL_RCC_ClockConfig+0x168>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c3a:	4a5e      	ldr	r2, [pc, #376]	; (8001db4 <HAL_RCC_ClockConfig+0x180>)
{
 8001c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c40:	6813      	ldr	r3, [r2, #0]
 8001c42:	4604      	mov	r4, r0
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	428b      	cmp	r3, r1
 8001c4a:	460d      	mov	r5, r1
{
 8001c4c:	b086      	sub	sp, #24
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c4e:	d20d      	bcs.n	8001c6c <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c50:	6813      	ldr	r3, [r2, #0]
 8001c52:	f023 0307 	bic.w	r3, r3, #7
 8001c56:	430b      	orrs	r3, r1
 8001c58:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5a:	6813      	ldr	r3, [r2, #0]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	428b      	cmp	r3, r1
 8001c62:	d003      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 8001c64:	2001      	movs	r0, #1
}
 8001c66:	b006      	add	sp, #24
 8001c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c6c:	6823      	ldr	r3, [r4, #0]
 8001c6e:	079e      	lsls	r6, r3, #30
 8001c70:	d514      	bpl.n	8001c9c <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c72:	0758      	lsls	r0, r3, #29
 8001c74:	d504      	bpl.n	8001c80 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c76:	4950      	ldr	r1, [pc, #320]	; (8001db8 <HAL_RCC_ClockConfig+0x184>)
 8001c78:	684a      	ldr	r2, [r1, #4]
 8001c7a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001c7e:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c80:	0719      	lsls	r1, r3, #28
 8001c82:	d504      	bpl.n	8001c8e <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c84:	494c      	ldr	r1, [pc, #304]	; (8001db8 <HAL_RCC_ClockConfig+0x184>)
 8001c86:	684a      	ldr	r2, [r1, #4]
 8001c88:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8001c8c:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c8e:	494a      	ldr	r1, [pc, #296]	; (8001db8 <HAL_RCC_ClockConfig+0x184>)
 8001c90:	68a0      	ldr	r0, [r4, #8]
 8001c92:	684a      	ldr	r2, [r1, #4]
 8001c94:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001c98:	4302      	orrs	r2, r0
 8001c9a:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c9c:	07da      	lsls	r2, r3, #31
 8001c9e:	d520      	bpl.n	8001ce2 <HAL_RCC_ClockConfig+0xae>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca0:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	4b45      	ldr	r3, [pc, #276]	; (8001db8 <HAL_RCC_ClockConfig+0x184>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca4:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca6:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca8:	d07a      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x16c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001caa:	2a02      	cmp	r2, #2
 8001cac:	d073      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x162>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cae:	079e      	lsls	r6, r3, #30
 8001cb0:	d5d8      	bpl.n	8001c64 <HAL_RCC_ClockConfig+0x30>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cb2:	4e41      	ldr	r6, [pc, #260]	; (8001db8 <HAL_RCC_ClockConfig+0x184>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cb8:	6873      	ldr	r3, [r6, #4]
 8001cba:	f023 0303 	bic.w	r3, r3, #3
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001cc2:	f7ff fa25 	bl	8001110 <HAL_GetTick>
 8001cc6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc8:	e004      	b.n	8001cd4 <HAL_RCC_ClockConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cca:	f7ff fa21 	bl	8001110 <HAL_GetTick>
 8001cce:	1bc0      	subs	r0, r0, r7
 8001cd0:	4540      	cmp	r0, r8
 8001cd2:	d868      	bhi.n	8001da6 <HAL_RCC_ClockConfig+0x172>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd4:	6873      	ldr	r3, [r6, #4]
 8001cd6:	6862      	ldr	r2, [r4, #4]
 8001cd8:	f003 030c 	and.w	r3, r3, #12
 8001cdc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001ce0:	d1f3      	bne.n	8001cca <HAL_RCC_ClockConfig+0x96>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce2:	4a34      	ldr	r2, [pc, #208]	; (8001db4 <HAL_RCC_ClockConfig+0x180>)
 8001ce4:	6813      	ldr	r3, [r2, #0]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	42ab      	cmp	r3, r5
 8001cec:	d909      	bls.n	8001d02 <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cee:	6813      	ldr	r3, [r2, #0]
 8001cf0:	f023 0307 	bic.w	r3, r3, #7
 8001cf4:	432b      	orrs	r3, r5
 8001cf6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf8:	6813      	ldr	r3, [r2, #0]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	42ab      	cmp	r3, r5
 8001d00:	d1b0      	bne.n	8001c64 <HAL_RCC_ClockConfig+0x30>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d02:	6823      	ldr	r3, [r4, #0]
 8001d04:	0758      	lsls	r0, r3, #29
 8001d06:	d506      	bpl.n	8001d16 <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d08:	492b      	ldr	r1, [pc, #172]	; (8001db8 <HAL_RCC_ClockConfig+0x184>)
 8001d0a:	68e0      	ldr	r0, [r4, #12]
 8001d0c:	684a      	ldr	r2, [r1, #4]
 8001d0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d12:	4302      	orrs	r2, r0
 8001d14:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d16:	0719      	lsls	r1, r3, #28
 8001d18:	d507      	bpl.n	8001d2a <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d1a:	4a27      	ldr	r2, [pc, #156]	; (8001db8 <HAL_RCC_ClockConfig+0x184>)
 8001d1c:	6921      	ldr	r1, [r4, #16]
 8001d1e:	6853      	ldr	r3, [r2, #4]
 8001d20:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001d24:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001d28:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d2a:	f240 2401 	movw	r4, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d2e:	4b23      	ldr	r3, [pc, #140]	; (8001dbc <HAL_RCC_ClockConfig+0x188>)
 8001d30:	ad06      	add	r5, sp, #24
 8001d32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d34:	e905 000f 	stmdb	r5, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8001d38:	491f      	ldr	r1, [pc, #124]	; (8001db8 <HAL_RCC_ClockConfig+0x184>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d3a:	f8ad 4004 	strh.w	r4, [sp, #4]
  tmpreg = RCC->CFGR;
 8001d3e:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001d40:	f002 030c 	and.w	r3, r2, #12
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d011      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x138>
      sysclockfreq = HSE_VALUE;
 8001d48:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <HAL_RCC_ClockConfig+0x18c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d4a:	4a1b      	ldr	r2, [pc, #108]	; (8001db8 <HAL_RCC_ClockConfig+0x184>)
 8001d4c:	481d      	ldr	r0, [pc, #116]	; (8001dc4 <HAL_RCC_ClockConfig+0x190>)
 8001d4e:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8001d50:	491d      	ldr	r1, [pc, #116]	; (8001dc8 <HAL_RCC_ClockConfig+0x194>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d52:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001d56:	5c80      	ldrb	r0, [r0, r2]
 8001d58:	4a1c      	ldr	r2, [pc, #112]	; (8001dcc <HAL_RCC_ClockConfig+0x198>)
 8001d5a:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8001d5c:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d5e:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8001d60:	f7ff f994 	bl	800108c <HAL_InitTick>
  return HAL_OK;
 8001d64:	2000      	movs	r0, #0
}
 8001d66:	b006      	add	sp, #24
 8001d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d6c:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8001d70:	3318      	adds	r3, #24
 8001d72:	446b      	add	r3, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d74:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d76:	f813 3c10 	ldrb.w	r3, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d7a:	d516      	bpl.n	8001daa <HAL_RCC_ClockConfig+0x176>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d7c:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d7e:	4910      	ldr	r1, [pc, #64]	; (8001dc0 <HAL_RCC_ClockConfig+0x18c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d80:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d84:	fb01 f303 	mul.w	r3, r1, r3
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d88:	3218      	adds	r2, #24
 8001d8a:	446a      	add	r2, sp
 8001d8c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d90:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d94:	e7d9      	b.n	8001d4a <HAL_RCC_ClockConfig+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d96:	019f      	lsls	r7, r3, #6
 8001d98:	d48b      	bmi.n	8001cb2 <HAL_RCC_ClockConfig+0x7e>
 8001d9a:	e763      	b.n	8001c64 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8001d9c:	2001      	movs	r0, #1
}
 8001d9e:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da0:	039b      	lsls	r3, r3, #14
 8001da2:	d486      	bmi.n	8001cb2 <HAL_RCC_ClockConfig+0x7e>
 8001da4:	e75e      	b.n	8001c64 <HAL_RCC_ClockConfig+0x30>
        return HAL_TIMEOUT;
 8001da6:	2003      	movs	r0, #3
 8001da8:	e75d      	b.n	8001c66 <HAL_RCC_ClockConfig+0x32>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001daa:	4a09      	ldr	r2, [pc, #36]	; (8001dd0 <HAL_RCC_ClockConfig+0x19c>)
 8001dac:	fb02 f303 	mul.w	r3, r2, r3
 8001db0:	e7cb      	b.n	8001d4a <HAL_RCC_ClockConfig+0x116>
 8001db2:	bf00      	nop
 8001db4:	40022000 	.word	0x40022000
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	08060bac 	.word	0x08060bac
 8001dc0:	007a1200 	.word	0x007a1200
 8001dc4:	08060b9c 	.word	0x08060b9c
 8001dc8:	20000008 	.word	0x20000008
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	003d0900 	.word	0x003d0900

08001dd4 <HAL_SRAM_Init>:
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8001dd4:	b368      	cbz	r0, 8001e32 <HAL_SRAM_Init+0x5e>
 8001dd6:	6983      	ldr	r3, [r0, #24]
{
 8001dd8:	b570      	push	{r4, r5, r6, lr}
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8001dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dde:	4604      	mov	r4, r0
 8001de0:	d029      	beq.n	8001e36 <HAL_SRAM_Init+0x62>
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8001de2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001de6:	4615      	mov	r5, r2
 8001de8:	460e      	mov	r6, r1
 8001dea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001dee:	b1db      	cbz	r3, 8001e28 <HAL_SRAM_Init+0x54>
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8001df0:	4621      	mov	r1, r4
 8001df2:	f851 0b08 	ldr.w	r0, [r1], #8
 8001df6:	f000 f821 	bl	8001e3c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8001dfa:	4631      	mov	r1, r6
 8001dfc:	68a2      	ldr	r2, [r4, #8]
 8001dfe:	6820      	ldr	r0, [r4, #0]
 8001e00:	f000 f852 	bl	8001ea8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8001e04:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
 8001e08:	4629      	mov	r1, r5

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8001e0a:	2501      	movs	r5, #1
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8001e0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e0e:	f000 f86d 	bl	8001eec <FSMC_NORSRAM_Extended_Timing_Init>
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8001e12:	6822      	ldr	r2, [r4, #0]
 8001e14:	68a1      	ldr	r1, [r4, #8]

  return HAL_OK;
 8001e16:	2000      	movs	r0, #0
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8001e18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001e1c:	432b      	orrs	r3, r5
 8001e1e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  hsram->State = HAL_SRAM_STATE_READY;
 8001e22:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
}
 8001e26:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 8001e28:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_SRAM_MspInit(hsram);
 8001e2c:	f7ff f896 	bl	8000f5c <HAL_SRAM_MspInit>
 8001e30:	e7de      	b.n	8001df0 <HAL_SRAM_Init+0x1c>
    return HAL_ERROR;
 8001e32:	2001      	movs	r0, #1
}
 8001e34:	4770      	bx	lr
    return HAL_ERROR;
 8001e36:	2001      	movs	r0, #1
}
 8001e38:	bd70      	pop	{r4, r5, r6, pc}
 8001e3a:	bf00      	nop

08001e3c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8001e3c:	4602      	mov	r2, r0

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);


  return HAL_OK;
}
 8001e3e:	2000      	movs	r0, #0
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8001e40:	688b      	ldr	r3, [r1, #8]
{
 8001e42:	b470      	push	{r4, r5, r6}
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	bf0c      	ite	eq
 8001e48:	f04f 0c40 	moveq.w	ip, #64	; 0x40
 8001e4c:	4684      	movne	ip, r0
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8001e4e:	684e      	ldr	r6, [r1, #4]
 8001e50:	680c      	ldr	r4, [r1, #0]
 8001e52:	4333      	orrs	r3, r6
 8001e54:	68ce      	ldr	r6, [r1, #12]
 8001e56:	4d13      	ldr	r5, [pc, #76]	; (8001ea4 <FSMC_NORSRAM_Init+0x68>)
 8001e58:	4333      	orrs	r3, r6
 8001e5a:	690e      	ldr	r6, [r1, #16]
 8001e5c:	4333      	orrs	r3, r6
 8001e5e:	694e      	ldr	r6, [r1, #20]
 8001e60:	4333      	orrs	r3, r6
 8001e62:	69ce      	ldr	r6, [r1, #28]
 8001e64:	4333      	orrs	r3, r6
 8001e66:	6a0e      	ldr	r6, [r1, #32]
 8001e68:	4333      	orrs	r3, r6
 8001e6a:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8001e6c:	4333      	orrs	r3, r6
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8001e6e:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
 8001e72:	f026 0601 	bic.w	r6, r6, #1
 8001e76:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8001e7a:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8001e7c:	4333      	orrs	r3, r6
 8001e7e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8001e80:	4333      	orrs	r3, r6
 8001e82:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8001e84:	4333      	orrs	r3, r6
 8001e86:	698e      	ldr	r6, [r1, #24]
 8001e88:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8001e8a:	4333      	orrs	r3, r6
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 8001e92:	400d      	ands	r5, r1
 8001e94:	432b      	orrs	r3, r5
 8001e96:	ea43 030c 	orr.w	r3, r3, ip
 8001e9a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
 8001e9e:	bc70      	pop	{r4, r5, r6}
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	fff00080 	.word	0xfff00080

08001ea8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8001eae:	6853      	ldr	r3, [r2, #4]
{
 8001eb0:	b510      	push	{r4, lr}
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8001eb2:	f003 4c40 	and.w	ip, r3, #3221225472	; 0xc0000000
 8001eb6:	698c      	ldr	r4, [r1, #24]
 8001eb8:	680b      	ldr	r3, [r1, #0]
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
}
 8001eba:	2000      	movs	r0, #0
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8001ebc:	4323      	orrs	r3, r4
 8001ebe:	684c      	ldr	r4, [r1, #4]
 8001ec0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8001ec4:	688c      	ldr	r4, [r1, #8]
 8001ec6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8001eca:	68cc      	ldr	r4, [r1, #12]
 8001ecc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001ed0:	e9d1 4104 	ldrd	r4, r1, [r1, #16]
 8001ed4:	f104 3eff 	add.w	lr, r4, #4294967295
 8001ed8:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
 8001edc:	3902      	subs	r1, #2
 8001ede:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001ee2:	ea43 030c 	orr.w	r3, r3, ip
 8001ee6:	6053      	str	r3, [r2, #4]
}
 8001ee8:	bd10      	pop	{r4, pc}
 8001eea:	bf00      	nop

08001eec <FSMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8001eec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ef0:	d005      	beq.n	8001efe <FSMC_NORSRAM_Extended_Timing_Init+0x12>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8001ef2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8001ef6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8001efa:	2000      	movs	r0, #0
 8001efc:	4770      	bx	lr
{
 8001efe:	b430      	push	{r4, r5}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8001f00:	680b      	ldr	r3, [r1, #0]
 8001f02:	698d      	ldr	r5, [r1, #24]
 8001f04:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8001f08:	432b      	orrs	r3, r5
 8001f0a:	684d      	ldr	r5, [r1, #4]
 8001f0c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8001f10:	688d      	ldr	r5, [r1, #8]
 8001f12:	68c9      	ldr	r1, [r1, #12]
 8001f14:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8001f18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001f1c:	4903      	ldr	r1, [pc, #12]	; (8001f2c <FSMC_NORSRAM_Extended_Timing_Init+0x40>)
 8001f1e:	4021      	ands	r1, r4
 8001f20:	430b      	orrs	r3, r1
 8001f22:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 8001f26:	bc30      	pop	{r4, r5}
 8001f28:	2000      	movs	r0, #0
 8001f2a:	4770      	bx	lr
 8001f2c:	cff00000 	.word	0xcff00000

08001f30 <__errno>:
 8001f30:	4b01      	ldr	r3, [pc, #4]	; (8001f38 <__errno+0x8>)
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	2000000c 	.word	0x2000000c

08001f3c <__libc_init_array>:
 8001f3c:	b570      	push	{r4, r5, r6, lr}
 8001f3e:	2600      	movs	r6, #0
 8001f40:	4d0c      	ldr	r5, [pc, #48]	; (8001f74 <__libc_init_array+0x38>)
 8001f42:	4c0d      	ldr	r4, [pc, #52]	; (8001f78 <__libc_init_array+0x3c>)
 8001f44:	1b64      	subs	r4, r4, r5
 8001f46:	10a4      	asrs	r4, r4, #2
 8001f48:	42a6      	cmp	r6, r4
 8001f4a:	d109      	bne.n	8001f60 <__libc_init_array+0x24>
 8001f4c:	f000 fc94 	bl	8002878 <_init>
 8001f50:	2600      	movs	r6, #0
 8001f52:	4d0a      	ldr	r5, [pc, #40]	; (8001f7c <__libc_init_array+0x40>)
 8001f54:	4c0a      	ldr	r4, [pc, #40]	; (8001f80 <__libc_init_array+0x44>)
 8001f56:	1b64      	subs	r4, r4, r5
 8001f58:	10a4      	asrs	r4, r4, #2
 8001f5a:	42a6      	cmp	r6, r4
 8001f5c:	d105      	bne.n	8001f6a <__libc_init_array+0x2e>
 8001f5e:	bd70      	pop	{r4, r5, r6, pc}
 8001f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f64:	4798      	blx	r3
 8001f66:	3601      	adds	r6, #1
 8001f68:	e7ee      	b.n	8001f48 <__libc_init_array+0xc>
 8001f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f6e:	4798      	blx	r3
 8001f70:	3601      	adds	r6, #1
 8001f72:	e7f2      	b.n	8001f5a <__libc_init_array+0x1e>
 8001f74:	08060bf0 	.word	0x08060bf0
 8001f78:	08060bf0 	.word	0x08060bf0
 8001f7c:	08060bf0 	.word	0x08060bf0
 8001f80:	08060bf4 	.word	0x08060bf4

08001f84 <siprintf>:
 8001f84:	b40e      	push	{r1, r2, r3}
 8001f86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001f8a:	b500      	push	{lr}
 8001f8c:	b09c      	sub	sp, #112	; 0x70
 8001f8e:	ab1d      	add	r3, sp, #116	; 0x74
 8001f90:	9002      	str	r0, [sp, #8]
 8001f92:	9006      	str	r0, [sp, #24]
 8001f94:	9107      	str	r1, [sp, #28]
 8001f96:	9104      	str	r1, [sp, #16]
 8001f98:	4808      	ldr	r0, [pc, #32]	; (8001fbc <siprintf+0x38>)
 8001f9a:	4909      	ldr	r1, [pc, #36]	; (8001fc0 <siprintf+0x3c>)
 8001f9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8001fa0:	9105      	str	r1, [sp, #20]
 8001fa2:	6800      	ldr	r0, [r0, #0]
 8001fa4:	a902      	add	r1, sp, #8
 8001fa6:	9301      	str	r3, [sp, #4]
 8001fa8:	f000 f868 	bl	800207c <_svfiprintf_r>
 8001fac:	2200      	movs	r2, #0
 8001fae:	9b02      	ldr	r3, [sp, #8]
 8001fb0:	701a      	strb	r2, [r3, #0]
 8001fb2:	b01c      	add	sp, #112	; 0x70
 8001fb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8001fb8:	b003      	add	sp, #12
 8001fba:	4770      	bx	lr
 8001fbc:	2000000c 	.word	0x2000000c
 8001fc0:	ffff0208 	.word	0xffff0208

08001fc4 <__ssputs_r>:
 8001fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001fc8:	688e      	ldr	r6, [r1, #8]
 8001fca:	4682      	mov	sl, r0
 8001fcc:	429e      	cmp	r6, r3
 8001fce:	460c      	mov	r4, r1
 8001fd0:	4690      	mov	r8, r2
 8001fd2:	461f      	mov	r7, r3
 8001fd4:	d838      	bhi.n	8002048 <__ssputs_r+0x84>
 8001fd6:	898a      	ldrh	r2, [r1, #12]
 8001fd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001fdc:	d032      	beq.n	8002044 <__ssputs_r+0x80>
 8001fde:	6825      	ldr	r5, [r4, #0]
 8001fe0:	6909      	ldr	r1, [r1, #16]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	eba5 0901 	sub.w	r9, r5, r1
 8001fe8:	6965      	ldr	r5, [r4, #20]
 8001fea:	444b      	add	r3, r9
 8001fec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001ff0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001ff4:	106d      	asrs	r5, r5, #1
 8001ff6:	429d      	cmp	r5, r3
 8001ff8:	bf38      	it	cc
 8001ffa:	461d      	movcc	r5, r3
 8001ffc:	0553      	lsls	r3, r2, #21
 8001ffe:	d531      	bpl.n	8002064 <__ssputs_r+0xa0>
 8002000:	4629      	mov	r1, r5
 8002002:	f000 fb6f 	bl	80026e4 <_malloc_r>
 8002006:	4606      	mov	r6, r0
 8002008:	b950      	cbnz	r0, 8002020 <__ssputs_r+0x5c>
 800200a:	230c      	movs	r3, #12
 800200c:	f04f 30ff 	mov.w	r0, #4294967295
 8002010:	f8ca 3000 	str.w	r3, [sl]
 8002014:	89a3      	ldrh	r3, [r4, #12]
 8002016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800201a:	81a3      	strh	r3, [r4, #12]
 800201c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002020:	464a      	mov	r2, r9
 8002022:	6921      	ldr	r1, [r4, #16]
 8002024:	f000 face 	bl	80025c4 <memcpy>
 8002028:	89a3      	ldrh	r3, [r4, #12]
 800202a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800202e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002032:	81a3      	strh	r3, [r4, #12]
 8002034:	6126      	str	r6, [r4, #16]
 8002036:	444e      	add	r6, r9
 8002038:	6026      	str	r6, [r4, #0]
 800203a:	463e      	mov	r6, r7
 800203c:	6165      	str	r5, [r4, #20]
 800203e:	eba5 0509 	sub.w	r5, r5, r9
 8002042:	60a5      	str	r5, [r4, #8]
 8002044:	42be      	cmp	r6, r7
 8002046:	d900      	bls.n	800204a <__ssputs_r+0x86>
 8002048:	463e      	mov	r6, r7
 800204a:	4632      	mov	r2, r6
 800204c:	4641      	mov	r1, r8
 800204e:	6820      	ldr	r0, [r4, #0]
 8002050:	f000 fac6 	bl	80025e0 <memmove>
 8002054:	68a3      	ldr	r3, [r4, #8]
 8002056:	2000      	movs	r0, #0
 8002058:	1b9b      	subs	r3, r3, r6
 800205a:	60a3      	str	r3, [r4, #8]
 800205c:	6823      	ldr	r3, [r4, #0]
 800205e:	4433      	add	r3, r6
 8002060:	6023      	str	r3, [r4, #0]
 8002062:	e7db      	b.n	800201c <__ssputs_r+0x58>
 8002064:	462a      	mov	r2, r5
 8002066:	f000 fbb1 	bl	80027cc <_realloc_r>
 800206a:	4606      	mov	r6, r0
 800206c:	2800      	cmp	r0, #0
 800206e:	d1e1      	bne.n	8002034 <__ssputs_r+0x70>
 8002070:	4650      	mov	r0, sl
 8002072:	6921      	ldr	r1, [r4, #16]
 8002074:	f000 face 	bl	8002614 <_free_r>
 8002078:	e7c7      	b.n	800200a <__ssputs_r+0x46>
	...

0800207c <_svfiprintf_r>:
 800207c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002080:	4698      	mov	r8, r3
 8002082:	898b      	ldrh	r3, [r1, #12]
 8002084:	4607      	mov	r7, r0
 8002086:	061b      	lsls	r3, r3, #24
 8002088:	460d      	mov	r5, r1
 800208a:	4614      	mov	r4, r2
 800208c:	b09d      	sub	sp, #116	; 0x74
 800208e:	d50e      	bpl.n	80020ae <_svfiprintf_r+0x32>
 8002090:	690b      	ldr	r3, [r1, #16]
 8002092:	b963      	cbnz	r3, 80020ae <_svfiprintf_r+0x32>
 8002094:	2140      	movs	r1, #64	; 0x40
 8002096:	f000 fb25 	bl	80026e4 <_malloc_r>
 800209a:	6028      	str	r0, [r5, #0]
 800209c:	6128      	str	r0, [r5, #16]
 800209e:	b920      	cbnz	r0, 80020aa <_svfiprintf_r+0x2e>
 80020a0:	230c      	movs	r3, #12
 80020a2:	603b      	str	r3, [r7, #0]
 80020a4:	f04f 30ff 	mov.w	r0, #4294967295
 80020a8:	e0d1      	b.n	800224e <_svfiprintf_r+0x1d2>
 80020aa:	2340      	movs	r3, #64	; 0x40
 80020ac:	616b      	str	r3, [r5, #20]
 80020ae:	2300      	movs	r3, #0
 80020b0:	9309      	str	r3, [sp, #36]	; 0x24
 80020b2:	2320      	movs	r3, #32
 80020b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80020b8:	2330      	movs	r3, #48	; 0x30
 80020ba:	f04f 0901 	mov.w	r9, #1
 80020be:	f8cd 800c 	str.w	r8, [sp, #12]
 80020c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002268 <_svfiprintf_r+0x1ec>
 80020c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80020ca:	4623      	mov	r3, r4
 80020cc:	469a      	mov	sl, r3
 80020ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80020d2:	b10a      	cbz	r2, 80020d8 <_svfiprintf_r+0x5c>
 80020d4:	2a25      	cmp	r2, #37	; 0x25
 80020d6:	d1f9      	bne.n	80020cc <_svfiprintf_r+0x50>
 80020d8:	ebba 0b04 	subs.w	fp, sl, r4
 80020dc:	d00b      	beq.n	80020f6 <_svfiprintf_r+0x7a>
 80020de:	465b      	mov	r3, fp
 80020e0:	4622      	mov	r2, r4
 80020e2:	4629      	mov	r1, r5
 80020e4:	4638      	mov	r0, r7
 80020e6:	f7ff ff6d 	bl	8001fc4 <__ssputs_r>
 80020ea:	3001      	adds	r0, #1
 80020ec:	f000 80aa 	beq.w	8002244 <_svfiprintf_r+0x1c8>
 80020f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80020f2:	445a      	add	r2, fp
 80020f4:	9209      	str	r2, [sp, #36]	; 0x24
 80020f6:	f89a 3000 	ldrb.w	r3, [sl]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 80a2 	beq.w	8002244 <_svfiprintf_r+0x1c8>
 8002100:	2300      	movs	r3, #0
 8002102:	f04f 32ff 	mov.w	r2, #4294967295
 8002106:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800210a:	f10a 0a01 	add.w	sl, sl, #1
 800210e:	9304      	str	r3, [sp, #16]
 8002110:	9307      	str	r3, [sp, #28]
 8002112:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002116:	931a      	str	r3, [sp, #104]	; 0x68
 8002118:	4654      	mov	r4, sl
 800211a:	2205      	movs	r2, #5
 800211c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002120:	4851      	ldr	r0, [pc, #324]	; (8002268 <_svfiprintf_r+0x1ec>)
 8002122:	f000 fa41 	bl	80025a8 <memchr>
 8002126:	9a04      	ldr	r2, [sp, #16]
 8002128:	b9d8      	cbnz	r0, 8002162 <_svfiprintf_r+0xe6>
 800212a:	06d0      	lsls	r0, r2, #27
 800212c:	bf44      	itt	mi
 800212e:	2320      	movmi	r3, #32
 8002130:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002134:	0711      	lsls	r1, r2, #28
 8002136:	bf44      	itt	mi
 8002138:	232b      	movmi	r3, #43	; 0x2b
 800213a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800213e:	f89a 3000 	ldrb.w	r3, [sl]
 8002142:	2b2a      	cmp	r3, #42	; 0x2a
 8002144:	d015      	beq.n	8002172 <_svfiprintf_r+0xf6>
 8002146:	4654      	mov	r4, sl
 8002148:	2000      	movs	r0, #0
 800214a:	f04f 0c0a 	mov.w	ip, #10
 800214e:	9a07      	ldr	r2, [sp, #28]
 8002150:	4621      	mov	r1, r4
 8002152:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002156:	3b30      	subs	r3, #48	; 0x30
 8002158:	2b09      	cmp	r3, #9
 800215a:	d94e      	bls.n	80021fa <_svfiprintf_r+0x17e>
 800215c:	b1b0      	cbz	r0, 800218c <_svfiprintf_r+0x110>
 800215e:	9207      	str	r2, [sp, #28]
 8002160:	e014      	b.n	800218c <_svfiprintf_r+0x110>
 8002162:	eba0 0308 	sub.w	r3, r0, r8
 8002166:	fa09 f303 	lsl.w	r3, r9, r3
 800216a:	4313      	orrs	r3, r2
 800216c:	46a2      	mov	sl, r4
 800216e:	9304      	str	r3, [sp, #16]
 8002170:	e7d2      	b.n	8002118 <_svfiprintf_r+0x9c>
 8002172:	9b03      	ldr	r3, [sp, #12]
 8002174:	1d19      	adds	r1, r3, #4
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	9103      	str	r1, [sp, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	bfbb      	ittet	lt
 800217e:	425b      	neglt	r3, r3
 8002180:	f042 0202 	orrlt.w	r2, r2, #2
 8002184:	9307      	strge	r3, [sp, #28]
 8002186:	9307      	strlt	r3, [sp, #28]
 8002188:	bfb8      	it	lt
 800218a:	9204      	strlt	r2, [sp, #16]
 800218c:	7823      	ldrb	r3, [r4, #0]
 800218e:	2b2e      	cmp	r3, #46	; 0x2e
 8002190:	d10c      	bne.n	80021ac <_svfiprintf_r+0x130>
 8002192:	7863      	ldrb	r3, [r4, #1]
 8002194:	2b2a      	cmp	r3, #42	; 0x2a
 8002196:	d135      	bne.n	8002204 <_svfiprintf_r+0x188>
 8002198:	9b03      	ldr	r3, [sp, #12]
 800219a:	3402      	adds	r4, #2
 800219c:	1d1a      	adds	r2, r3, #4
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	9203      	str	r2, [sp, #12]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	bfb8      	it	lt
 80021a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80021aa:	9305      	str	r3, [sp, #20]
 80021ac:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800226c <_svfiprintf_r+0x1f0>
 80021b0:	2203      	movs	r2, #3
 80021b2:	4650      	mov	r0, sl
 80021b4:	7821      	ldrb	r1, [r4, #0]
 80021b6:	f000 f9f7 	bl	80025a8 <memchr>
 80021ba:	b140      	cbz	r0, 80021ce <_svfiprintf_r+0x152>
 80021bc:	2340      	movs	r3, #64	; 0x40
 80021be:	eba0 000a 	sub.w	r0, r0, sl
 80021c2:	fa03 f000 	lsl.w	r0, r3, r0
 80021c6:	9b04      	ldr	r3, [sp, #16]
 80021c8:	3401      	adds	r4, #1
 80021ca:	4303      	orrs	r3, r0
 80021cc:	9304      	str	r3, [sp, #16]
 80021ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021d2:	2206      	movs	r2, #6
 80021d4:	4826      	ldr	r0, [pc, #152]	; (8002270 <_svfiprintf_r+0x1f4>)
 80021d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80021da:	f000 f9e5 	bl	80025a8 <memchr>
 80021de:	2800      	cmp	r0, #0
 80021e0:	d038      	beq.n	8002254 <_svfiprintf_r+0x1d8>
 80021e2:	4b24      	ldr	r3, [pc, #144]	; (8002274 <_svfiprintf_r+0x1f8>)
 80021e4:	bb1b      	cbnz	r3, 800222e <_svfiprintf_r+0x1b2>
 80021e6:	9b03      	ldr	r3, [sp, #12]
 80021e8:	3307      	adds	r3, #7
 80021ea:	f023 0307 	bic.w	r3, r3, #7
 80021ee:	3308      	adds	r3, #8
 80021f0:	9303      	str	r3, [sp, #12]
 80021f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021f4:	4433      	add	r3, r6
 80021f6:	9309      	str	r3, [sp, #36]	; 0x24
 80021f8:	e767      	b.n	80020ca <_svfiprintf_r+0x4e>
 80021fa:	460c      	mov	r4, r1
 80021fc:	2001      	movs	r0, #1
 80021fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8002202:	e7a5      	b.n	8002150 <_svfiprintf_r+0xd4>
 8002204:	2300      	movs	r3, #0
 8002206:	f04f 0c0a 	mov.w	ip, #10
 800220a:	4619      	mov	r1, r3
 800220c:	3401      	adds	r4, #1
 800220e:	9305      	str	r3, [sp, #20]
 8002210:	4620      	mov	r0, r4
 8002212:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002216:	3a30      	subs	r2, #48	; 0x30
 8002218:	2a09      	cmp	r2, #9
 800221a:	d903      	bls.n	8002224 <_svfiprintf_r+0x1a8>
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0c5      	beq.n	80021ac <_svfiprintf_r+0x130>
 8002220:	9105      	str	r1, [sp, #20]
 8002222:	e7c3      	b.n	80021ac <_svfiprintf_r+0x130>
 8002224:	4604      	mov	r4, r0
 8002226:	2301      	movs	r3, #1
 8002228:	fb0c 2101 	mla	r1, ip, r1, r2
 800222c:	e7f0      	b.n	8002210 <_svfiprintf_r+0x194>
 800222e:	ab03      	add	r3, sp, #12
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	462a      	mov	r2, r5
 8002234:	4638      	mov	r0, r7
 8002236:	4b10      	ldr	r3, [pc, #64]	; (8002278 <_svfiprintf_r+0x1fc>)
 8002238:	a904      	add	r1, sp, #16
 800223a:	f3af 8000 	nop.w
 800223e:	1c42      	adds	r2, r0, #1
 8002240:	4606      	mov	r6, r0
 8002242:	d1d6      	bne.n	80021f2 <_svfiprintf_r+0x176>
 8002244:	89ab      	ldrh	r3, [r5, #12]
 8002246:	065b      	lsls	r3, r3, #25
 8002248:	f53f af2c 	bmi.w	80020a4 <_svfiprintf_r+0x28>
 800224c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800224e:	b01d      	add	sp, #116	; 0x74
 8002250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002254:	ab03      	add	r3, sp, #12
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	462a      	mov	r2, r5
 800225a:	4638      	mov	r0, r7
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <_svfiprintf_r+0x1fc>)
 800225e:	a904      	add	r1, sp, #16
 8002260:	f000 f87c 	bl	800235c <_printf_i>
 8002264:	e7eb      	b.n	800223e <_svfiprintf_r+0x1c2>
 8002266:	bf00      	nop
 8002268:	08060bbd 	.word	0x08060bbd
 800226c:	08060bc3 	.word	0x08060bc3
 8002270:	08060bc7 	.word	0x08060bc7
 8002274:	00000000 	.word	0x00000000
 8002278:	08001fc5 	.word	0x08001fc5

0800227c <_printf_common>:
 800227c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002280:	4616      	mov	r6, r2
 8002282:	4699      	mov	r9, r3
 8002284:	688a      	ldr	r2, [r1, #8]
 8002286:	690b      	ldr	r3, [r1, #16]
 8002288:	4607      	mov	r7, r0
 800228a:	4293      	cmp	r3, r2
 800228c:	bfb8      	it	lt
 800228e:	4613      	movlt	r3, r2
 8002290:	6033      	str	r3, [r6, #0]
 8002292:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002296:	460c      	mov	r4, r1
 8002298:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800229c:	b10a      	cbz	r2, 80022a2 <_printf_common+0x26>
 800229e:	3301      	adds	r3, #1
 80022a0:	6033      	str	r3, [r6, #0]
 80022a2:	6823      	ldr	r3, [r4, #0]
 80022a4:	0699      	lsls	r1, r3, #26
 80022a6:	bf42      	ittt	mi
 80022a8:	6833      	ldrmi	r3, [r6, #0]
 80022aa:	3302      	addmi	r3, #2
 80022ac:	6033      	strmi	r3, [r6, #0]
 80022ae:	6825      	ldr	r5, [r4, #0]
 80022b0:	f015 0506 	ands.w	r5, r5, #6
 80022b4:	d106      	bne.n	80022c4 <_printf_common+0x48>
 80022b6:	f104 0a19 	add.w	sl, r4, #25
 80022ba:	68e3      	ldr	r3, [r4, #12]
 80022bc:	6832      	ldr	r2, [r6, #0]
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	42ab      	cmp	r3, r5
 80022c2:	dc28      	bgt.n	8002316 <_printf_common+0x9a>
 80022c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80022c8:	1e13      	subs	r3, r2, #0
 80022ca:	6822      	ldr	r2, [r4, #0]
 80022cc:	bf18      	it	ne
 80022ce:	2301      	movne	r3, #1
 80022d0:	0692      	lsls	r2, r2, #26
 80022d2:	d42d      	bmi.n	8002330 <_printf_common+0xb4>
 80022d4:	4649      	mov	r1, r9
 80022d6:	4638      	mov	r0, r7
 80022d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80022dc:	47c0      	blx	r8
 80022de:	3001      	adds	r0, #1
 80022e0:	d020      	beq.n	8002324 <_printf_common+0xa8>
 80022e2:	6823      	ldr	r3, [r4, #0]
 80022e4:	68e5      	ldr	r5, [r4, #12]
 80022e6:	f003 0306 	and.w	r3, r3, #6
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	bf18      	it	ne
 80022ee:	2500      	movne	r5, #0
 80022f0:	6832      	ldr	r2, [r6, #0]
 80022f2:	f04f 0600 	mov.w	r6, #0
 80022f6:	68a3      	ldr	r3, [r4, #8]
 80022f8:	bf08      	it	eq
 80022fa:	1aad      	subeq	r5, r5, r2
 80022fc:	6922      	ldr	r2, [r4, #16]
 80022fe:	bf08      	it	eq
 8002300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002304:	4293      	cmp	r3, r2
 8002306:	bfc4      	itt	gt
 8002308:	1a9b      	subgt	r3, r3, r2
 800230a:	18ed      	addgt	r5, r5, r3
 800230c:	341a      	adds	r4, #26
 800230e:	42b5      	cmp	r5, r6
 8002310:	d11a      	bne.n	8002348 <_printf_common+0xcc>
 8002312:	2000      	movs	r0, #0
 8002314:	e008      	b.n	8002328 <_printf_common+0xac>
 8002316:	2301      	movs	r3, #1
 8002318:	4652      	mov	r2, sl
 800231a:	4649      	mov	r1, r9
 800231c:	4638      	mov	r0, r7
 800231e:	47c0      	blx	r8
 8002320:	3001      	adds	r0, #1
 8002322:	d103      	bne.n	800232c <_printf_common+0xb0>
 8002324:	f04f 30ff 	mov.w	r0, #4294967295
 8002328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800232c:	3501      	adds	r5, #1
 800232e:	e7c4      	b.n	80022ba <_printf_common+0x3e>
 8002330:	2030      	movs	r0, #48	; 0x30
 8002332:	18e1      	adds	r1, r4, r3
 8002334:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800233e:	4422      	add	r2, r4
 8002340:	3302      	adds	r3, #2
 8002342:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002346:	e7c5      	b.n	80022d4 <_printf_common+0x58>
 8002348:	2301      	movs	r3, #1
 800234a:	4622      	mov	r2, r4
 800234c:	4649      	mov	r1, r9
 800234e:	4638      	mov	r0, r7
 8002350:	47c0      	blx	r8
 8002352:	3001      	adds	r0, #1
 8002354:	d0e6      	beq.n	8002324 <_printf_common+0xa8>
 8002356:	3601      	adds	r6, #1
 8002358:	e7d9      	b.n	800230e <_printf_common+0x92>
	...

0800235c <_printf_i>:
 800235c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002360:	7e0f      	ldrb	r7, [r1, #24]
 8002362:	4691      	mov	r9, r2
 8002364:	2f78      	cmp	r7, #120	; 0x78
 8002366:	4680      	mov	r8, r0
 8002368:	460c      	mov	r4, r1
 800236a:	469a      	mov	sl, r3
 800236c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800236e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002372:	d807      	bhi.n	8002384 <_printf_i+0x28>
 8002374:	2f62      	cmp	r7, #98	; 0x62
 8002376:	d80a      	bhi.n	800238e <_printf_i+0x32>
 8002378:	2f00      	cmp	r7, #0
 800237a:	f000 80d9 	beq.w	8002530 <_printf_i+0x1d4>
 800237e:	2f58      	cmp	r7, #88	; 0x58
 8002380:	f000 80a4 	beq.w	80024cc <_printf_i+0x170>
 8002384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002388:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800238c:	e03a      	b.n	8002404 <_printf_i+0xa8>
 800238e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002392:	2b15      	cmp	r3, #21
 8002394:	d8f6      	bhi.n	8002384 <_printf_i+0x28>
 8002396:	a101      	add	r1, pc, #4	; (adr r1, 800239c <_printf_i+0x40>)
 8002398:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800239c:	080023f5 	.word	0x080023f5
 80023a0:	08002409 	.word	0x08002409
 80023a4:	08002385 	.word	0x08002385
 80023a8:	08002385 	.word	0x08002385
 80023ac:	08002385 	.word	0x08002385
 80023b0:	08002385 	.word	0x08002385
 80023b4:	08002409 	.word	0x08002409
 80023b8:	08002385 	.word	0x08002385
 80023bc:	08002385 	.word	0x08002385
 80023c0:	08002385 	.word	0x08002385
 80023c4:	08002385 	.word	0x08002385
 80023c8:	08002517 	.word	0x08002517
 80023cc:	08002439 	.word	0x08002439
 80023d0:	080024f9 	.word	0x080024f9
 80023d4:	08002385 	.word	0x08002385
 80023d8:	08002385 	.word	0x08002385
 80023dc:	08002539 	.word	0x08002539
 80023e0:	08002385 	.word	0x08002385
 80023e4:	08002439 	.word	0x08002439
 80023e8:	08002385 	.word	0x08002385
 80023ec:	08002385 	.word	0x08002385
 80023f0:	08002501 	.word	0x08002501
 80023f4:	682b      	ldr	r3, [r5, #0]
 80023f6:	1d1a      	adds	r2, r3, #4
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	602a      	str	r2, [r5, #0]
 80023fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002400:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002404:	2301      	movs	r3, #1
 8002406:	e0a4      	b.n	8002552 <_printf_i+0x1f6>
 8002408:	6820      	ldr	r0, [r4, #0]
 800240a:	6829      	ldr	r1, [r5, #0]
 800240c:	0606      	lsls	r6, r0, #24
 800240e:	f101 0304 	add.w	r3, r1, #4
 8002412:	d50a      	bpl.n	800242a <_printf_i+0xce>
 8002414:	680e      	ldr	r6, [r1, #0]
 8002416:	602b      	str	r3, [r5, #0]
 8002418:	2e00      	cmp	r6, #0
 800241a:	da03      	bge.n	8002424 <_printf_i+0xc8>
 800241c:	232d      	movs	r3, #45	; 0x2d
 800241e:	4276      	negs	r6, r6
 8002420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002424:	230a      	movs	r3, #10
 8002426:	485e      	ldr	r0, [pc, #376]	; (80025a0 <_printf_i+0x244>)
 8002428:	e019      	b.n	800245e <_printf_i+0x102>
 800242a:	680e      	ldr	r6, [r1, #0]
 800242c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002430:	602b      	str	r3, [r5, #0]
 8002432:	bf18      	it	ne
 8002434:	b236      	sxthne	r6, r6
 8002436:	e7ef      	b.n	8002418 <_printf_i+0xbc>
 8002438:	682b      	ldr	r3, [r5, #0]
 800243a:	6820      	ldr	r0, [r4, #0]
 800243c:	1d19      	adds	r1, r3, #4
 800243e:	6029      	str	r1, [r5, #0]
 8002440:	0601      	lsls	r1, r0, #24
 8002442:	d501      	bpl.n	8002448 <_printf_i+0xec>
 8002444:	681e      	ldr	r6, [r3, #0]
 8002446:	e002      	b.n	800244e <_printf_i+0xf2>
 8002448:	0646      	lsls	r6, r0, #25
 800244a:	d5fb      	bpl.n	8002444 <_printf_i+0xe8>
 800244c:	881e      	ldrh	r6, [r3, #0]
 800244e:	2f6f      	cmp	r7, #111	; 0x6f
 8002450:	bf0c      	ite	eq
 8002452:	2308      	moveq	r3, #8
 8002454:	230a      	movne	r3, #10
 8002456:	4852      	ldr	r0, [pc, #328]	; (80025a0 <_printf_i+0x244>)
 8002458:	2100      	movs	r1, #0
 800245a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800245e:	6865      	ldr	r5, [r4, #4]
 8002460:	2d00      	cmp	r5, #0
 8002462:	bfa8      	it	ge
 8002464:	6821      	ldrge	r1, [r4, #0]
 8002466:	60a5      	str	r5, [r4, #8]
 8002468:	bfa4      	itt	ge
 800246a:	f021 0104 	bicge.w	r1, r1, #4
 800246e:	6021      	strge	r1, [r4, #0]
 8002470:	b90e      	cbnz	r6, 8002476 <_printf_i+0x11a>
 8002472:	2d00      	cmp	r5, #0
 8002474:	d04d      	beq.n	8002512 <_printf_i+0x1b6>
 8002476:	4615      	mov	r5, r2
 8002478:	fbb6 f1f3 	udiv	r1, r6, r3
 800247c:	fb03 6711 	mls	r7, r3, r1, r6
 8002480:	5dc7      	ldrb	r7, [r0, r7]
 8002482:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002486:	4637      	mov	r7, r6
 8002488:	42bb      	cmp	r3, r7
 800248a:	460e      	mov	r6, r1
 800248c:	d9f4      	bls.n	8002478 <_printf_i+0x11c>
 800248e:	2b08      	cmp	r3, #8
 8002490:	d10b      	bne.n	80024aa <_printf_i+0x14e>
 8002492:	6823      	ldr	r3, [r4, #0]
 8002494:	07de      	lsls	r6, r3, #31
 8002496:	d508      	bpl.n	80024aa <_printf_i+0x14e>
 8002498:	6923      	ldr	r3, [r4, #16]
 800249a:	6861      	ldr	r1, [r4, #4]
 800249c:	4299      	cmp	r1, r3
 800249e:	bfde      	ittt	le
 80024a0:	2330      	movle	r3, #48	; 0x30
 80024a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80024a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80024aa:	1b52      	subs	r2, r2, r5
 80024ac:	6122      	str	r2, [r4, #16]
 80024ae:	464b      	mov	r3, r9
 80024b0:	4621      	mov	r1, r4
 80024b2:	4640      	mov	r0, r8
 80024b4:	f8cd a000 	str.w	sl, [sp]
 80024b8:	aa03      	add	r2, sp, #12
 80024ba:	f7ff fedf 	bl	800227c <_printf_common>
 80024be:	3001      	adds	r0, #1
 80024c0:	d14c      	bne.n	800255c <_printf_i+0x200>
 80024c2:	f04f 30ff 	mov.w	r0, #4294967295
 80024c6:	b004      	add	sp, #16
 80024c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024cc:	4834      	ldr	r0, [pc, #208]	; (80025a0 <_printf_i+0x244>)
 80024ce:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80024d2:	6829      	ldr	r1, [r5, #0]
 80024d4:	6823      	ldr	r3, [r4, #0]
 80024d6:	f851 6b04 	ldr.w	r6, [r1], #4
 80024da:	6029      	str	r1, [r5, #0]
 80024dc:	061d      	lsls	r5, r3, #24
 80024de:	d514      	bpl.n	800250a <_printf_i+0x1ae>
 80024e0:	07df      	lsls	r7, r3, #31
 80024e2:	bf44      	itt	mi
 80024e4:	f043 0320 	orrmi.w	r3, r3, #32
 80024e8:	6023      	strmi	r3, [r4, #0]
 80024ea:	b91e      	cbnz	r6, 80024f4 <_printf_i+0x198>
 80024ec:	6823      	ldr	r3, [r4, #0]
 80024ee:	f023 0320 	bic.w	r3, r3, #32
 80024f2:	6023      	str	r3, [r4, #0]
 80024f4:	2310      	movs	r3, #16
 80024f6:	e7af      	b.n	8002458 <_printf_i+0xfc>
 80024f8:	6823      	ldr	r3, [r4, #0]
 80024fa:	f043 0320 	orr.w	r3, r3, #32
 80024fe:	6023      	str	r3, [r4, #0]
 8002500:	2378      	movs	r3, #120	; 0x78
 8002502:	4828      	ldr	r0, [pc, #160]	; (80025a4 <_printf_i+0x248>)
 8002504:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002508:	e7e3      	b.n	80024d2 <_printf_i+0x176>
 800250a:	0659      	lsls	r1, r3, #25
 800250c:	bf48      	it	mi
 800250e:	b2b6      	uxthmi	r6, r6
 8002510:	e7e6      	b.n	80024e0 <_printf_i+0x184>
 8002512:	4615      	mov	r5, r2
 8002514:	e7bb      	b.n	800248e <_printf_i+0x132>
 8002516:	682b      	ldr	r3, [r5, #0]
 8002518:	6826      	ldr	r6, [r4, #0]
 800251a:	1d18      	adds	r0, r3, #4
 800251c:	6961      	ldr	r1, [r4, #20]
 800251e:	6028      	str	r0, [r5, #0]
 8002520:	0635      	lsls	r5, r6, #24
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	d501      	bpl.n	800252a <_printf_i+0x1ce>
 8002526:	6019      	str	r1, [r3, #0]
 8002528:	e002      	b.n	8002530 <_printf_i+0x1d4>
 800252a:	0670      	lsls	r0, r6, #25
 800252c:	d5fb      	bpl.n	8002526 <_printf_i+0x1ca>
 800252e:	8019      	strh	r1, [r3, #0]
 8002530:	2300      	movs	r3, #0
 8002532:	4615      	mov	r5, r2
 8002534:	6123      	str	r3, [r4, #16]
 8002536:	e7ba      	b.n	80024ae <_printf_i+0x152>
 8002538:	682b      	ldr	r3, [r5, #0]
 800253a:	2100      	movs	r1, #0
 800253c:	1d1a      	adds	r2, r3, #4
 800253e:	602a      	str	r2, [r5, #0]
 8002540:	681d      	ldr	r5, [r3, #0]
 8002542:	6862      	ldr	r2, [r4, #4]
 8002544:	4628      	mov	r0, r5
 8002546:	f000 f82f 	bl	80025a8 <memchr>
 800254a:	b108      	cbz	r0, 8002550 <_printf_i+0x1f4>
 800254c:	1b40      	subs	r0, r0, r5
 800254e:	6060      	str	r0, [r4, #4]
 8002550:	6863      	ldr	r3, [r4, #4]
 8002552:	6123      	str	r3, [r4, #16]
 8002554:	2300      	movs	r3, #0
 8002556:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800255a:	e7a8      	b.n	80024ae <_printf_i+0x152>
 800255c:	462a      	mov	r2, r5
 800255e:	4649      	mov	r1, r9
 8002560:	4640      	mov	r0, r8
 8002562:	6923      	ldr	r3, [r4, #16]
 8002564:	47d0      	blx	sl
 8002566:	3001      	adds	r0, #1
 8002568:	d0ab      	beq.n	80024c2 <_printf_i+0x166>
 800256a:	6823      	ldr	r3, [r4, #0]
 800256c:	079b      	lsls	r3, r3, #30
 800256e:	d413      	bmi.n	8002598 <_printf_i+0x23c>
 8002570:	68e0      	ldr	r0, [r4, #12]
 8002572:	9b03      	ldr	r3, [sp, #12]
 8002574:	4298      	cmp	r0, r3
 8002576:	bfb8      	it	lt
 8002578:	4618      	movlt	r0, r3
 800257a:	e7a4      	b.n	80024c6 <_printf_i+0x16a>
 800257c:	2301      	movs	r3, #1
 800257e:	4632      	mov	r2, r6
 8002580:	4649      	mov	r1, r9
 8002582:	4640      	mov	r0, r8
 8002584:	47d0      	blx	sl
 8002586:	3001      	adds	r0, #1
 8002588:	d09b      	beq.n	80024c2 <_printf_i+0x166>
 800258a:	3501      	adds	r5, #1
 800258c:	68e3      	ldr	r3, [r4, #12]
 800258e:	9903      	ldr	r1, [sp, #12]
 8002590:	1a5b      	subs	r3, r3, r1
 8002592:	42ab      	cmp	r3, r5
 8002594:	dcf2      	bgt.n	800257c <_printf_i+0x220>
 8002596:	e7eb      	b.n	8002570 <_printf_i+0x214>
 8002598:	2500      	movs	r5, #0
 800259a:	f104 0619 	add.w	r6, r4, #25
 800259e:	e7f5      	b.n	800258c <_printf_i+0x230>
 80025a0:	08060bce 	.word	0x08060bce
 80025a4:	08060bdf 	.word	0x08060bdf

080025a8 <memchr>:
 80025a8:	4603      	mov	r3, r0
 80025aa:	b510      	push	{r4, lr}
 80025ac:	b2c9      	uxtb	r1, r1
 80025ae:	4402      	add	r2, r0
 80025b0:	4293      	cmp	r3, r2
 80025b2:	4618      	mov	r0, r3
 80025b4:	d101      	bne.n	80025ba <memchr+0x12>
 80025b6:	2000      	movs	r0, #0
 80025b8:	e003      	b.n	80025c2 <memchr+0x1a>
 80025ba:	7804      	ldrb	r4, [r0, #0]
 80025bc:	3301      	adds	r3, #1
 80025be:	428c      	cmp	r4, r1
 80025c0:	d1f6      	bne.n	80025b0 <memchr+0x8>
 80025c2:	bd10      	pop	{r4, pc}

080025c4 <memcpy>:
 80025c4:	440a      	add	r2, r1
 80025c6:	4291      	cmp	r1, r2
 80025c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80025cc:	d100      	bne.n	80025d0 <memcpy+0xc>
 80025ce:	4770      	bx	lr
 80025d0:	b510      	push	{r4, lr}
 80025d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80025d6:	4291      	cmp	r1, r2
 80025d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80025dc:	d1f9      	bne.n	80025d2 <memcpy+0xe>
 80025de:	bd10      	pop	{r4, pc}

080025e0 <memmove>:
 80025e0:	4288      	cmp	r0, r1
 80025e2:	b510      	push	{r4, lr}
 80025e4:	eb01 0402 	add.w	r4, r1, r2
 80025e8:	d902      	bls.n	80025f0 <memmove+0x10>
 80025ea:	4284      	cmp	r4, r0
 80025ec:	4623      	mov	r3, r4
 80025ee:	d807      	bhi.n	8002600 <memmove+0x20>
 80025f0:	1e43      	subs	r3, r0, #1
 80025f2:	42a1      	cmp	r1, r4
 80025f4:	d008      	beq.n	8002608 <memmove+0x28>
 80025f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80025fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80025fe:	e7f8      	b.n	80025f2 <memmove+0x12>
 8002600:	4601      	mov	r1, r0
 8002602:	4402      	add	r2, r0
 8002604:	428a      	cmp	r2, r1
 8002606:	d100      	bne.n	800260a <memmove+0x2a>
 8002608:	bd10      	pop	{r4, pc}
 800260a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800260e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002612:	e7f7      	b.n	8002604 <memmove+0x24>

08002614 <_free_r>:
 8002614:	b538      	push	{r3, r4, r5, lr}
 8002616:	4605      	mov	r5, r0
 8002618:	2900      	cmp	r1, #0
 800261a:	d040      	beq.n	800269e <_free_r+0x8a>
 800261c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002620:	1f0c      	subs	r4, r1, #4
 8002622:	2b00      	cmp	r3, #0
 8002624:	bfb8      	it	lt
 8002626:	18e4      	addlt	r4, r4, r3
 8002628:	f000 f910 	bl	800284c <__malloc_lock>
 800262c:	4a1c      	ldr	r2, [pc, #112]	; (80026a0 <_free_r+0x8c>)
 800262e:	6813      	ldr	r3, [r2, #0]
 8002630:	b933      	cbnz	r3, 8002640 <_free_r+0x2c>
 8002632:	6063      	str	r3, [r4, #4]
 8002634:	6014      	str	r4, [r2, #0]
 8002636:	4628      	mov	r0, r5
 8002638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800263c:	f000 b90c 	b.w	8002858 <__malloc_unlock>
 8002640:	42a3      	cmp	r3, r4
 8002642:	d908      	bls.n	8002656 <_free_r+0x42>
 8002644:	6820      	ldr	r0, [r4, #0]
 8002646:	1821      	adds	r1, r4, r0
 8002648:	428b      	cmp	r3, r1
 800264a:	bf01      	itttt	eq
 800264c:	6819      	ldreq	r1, [r3, #0]
 800264e:	685b      	ldreq	r3, [r3, #4]
 8002650:	1809      	addeq	r1, r1, r0
 8002652:	6021      	streq	r1, [r4, #0]
 8002654:	e7ed      	b.n	8002632 <_free_r+0x1e>
 8002656:	461a      	mov	r2, r3
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	b10b      	cbz	r3, 8002660 <_free_r+0x4c>
 800265c:	42a3      	cmp	r3, r4
 800265e:	d9fa      	bls.n	8002656 <_free_r+0x42>
 8002660:	6811      	ldr	r1, [r2, #0]
 8002662:	1850      	adds	r0, r2, r1
 8002664:	42a0      	cmp	r0, r4
 8002666:	d10b      	bne.n	8002680 <_free_r+0x6c>
 8002668:	6820      	ldr	r0, [r4, #0]
 800266a:	4401      	add	r1, r0
 800266c:	1850      	adds	r0, r2, r1
 800266e:	4283      	cmp	r3, r0
 8002670:	6011      	str	r1, [r2, #0]
 8002672:	d1e0      	bne.n	8002636 <_free_r+0x22>
 8002674:	6818      	ldr	r0, [r3, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4401      	add	r1, r0
 800267a:	6011      	str	r1, [r2, #0]
 800267c:	6053      	str	r3, [r2, #4]
 800267e:	e7da      	b.n	8002636 <_free_r+0x22>
 8002680:	d902      	bls.n	8002688 <_free_r+0x74>
 8002682:	230c      	movs	r3, #12
 8002684:	602b      	str	r3, [r5, #0]
 8002686:	e7d6      	b.n	8002636 <_free_r+0x22>
 8002688:	6820      	ldr	r0, [r4, #0]
 800268a:	1821      	adds	r1, r4, r0
 800268c:	428b      	cmp	r3, r1
 800268e:	bf01      	itttt	eq
 8002690:	6819      	ldreq	r1, [r3, #0]
 8002692:	685b      	ldreq	r3, [r3, #4]
 8002694:	1809      	addeq	r1, r1, r0
 8002696:	6021      	streq	r1, [r4, #0]
 8002698:	6063      	str	r3, [r4, #4]
 800269a:	6054      	str	r4, [r2, #4]
 800269c:	e7cb      	b.n	8002636 <_free_r+0x22>
 800269e:	bd38      	pop	{r3, r4, r5, pc}
 80026a0:	2000012c 	.word	0x2000012c

080026a4 <sbrk_aligned>:
 80026a4:	b570      	push	{r4, r5, r6, lr}
 80026a6:	4e0e      	ldr	r6, [pc, #56]	; (80026e0 <sbrk_aligned+0x3c>)
 80026a8:	460c      	mov	r4, r1
 80026aa:	6831      	ldr	r1, [r6, #0]
 80026ac:	4605      	mov	r5, r0
 80026ae:	b911      	cbnz	r1, 80026b6 <sbrk_aligned+0x12>
 80026b0:	f000 f8bc 	bl	800282c <_sbrk_r>
 80026b4:	6030      	str	r0, [r6, #0]
 80026b6:	4621      	mov	r1, r4
 80026b8:	4628      	mov	r0, r5
 80026ba:	f000 f8b7 	bl	800282c <_sbrk_r>
 80026be:	1c43      	adds	r3, r0, #1
 80026c0:	d00a      	beq.n	80026d8 <sbrk_aligned+0x34>
 80026c2:	1cc4      	adds	r4, r0, #3
 80026c4:	f024 0403 	bic.w	r4, r4, #3
 80026c8:	42a0      	cmp	r0, r4
 80026ca:	d007      	beq.n	80026dc <sbrk_aligned+0x38>
 80026cc:	1a21      	subs	r1, r4, r0
 80026ce:	4628      	mov	r0, r5
 80026d0:	f000 f8ac 	bl	800282c <_sbrk_r>
 80026d4:	3001      	adds	r0, #1
 80026d6:	d101      	bne.n	80026dc <sbrk_aligned+0x38>
 80026d8:	f04f 34ff 	mov.w	r4, #4294967295
 80026dc:	4620      	mov	r0, r4
 80026de:	bd70      	pop	{r4, r5, r6, pc}
 80026e0:	20000130 	.word	0x20000130

080026e4 <_malloc_r>:
 80026e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026e8:	1ccd      	adds	r5, r1, #3
 80026ea:	f025 0503 	bic.w	r5, r5, #3
 80026ee:	3508      	adds	r5, #8
 80026f0:	2d0c      	cmp	r5, #12
 80026f2:	bf38      	it	cc
 80026f4:	250c      	movcc	r5, #12
 80026f6:	2d00      	cmp	r5, #0
 80026f8:	4607      	mov	r7, r0
 80026fa:	db01      	blt.n	8002700 <_malloc_r+0x1c>
 80026fc:	42a9      	cmp	r1, r5
 80026fe:	d905      	bls.n	800270c <_malloc_r+0x28>
 8002700:	230c      	movs	r3, #12
 8002702:	2600      	movs	r6, #0
 8002704:	603b      	str	r3, [r7, #0]
 8002706:	4630      	mov	r0, r6
 8002708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800270c:	4e2e      	ldr	r6, [pc, #184]	; (80027c8 <_malloc_r+0xe4>)
 800270e:	f000 f89d 	bl	800284c <__malloc_lock>
 8002712:	6833      	ldr	r3, [r6, #0]
 8002714:	461c      	mov	r4, r3
 8002716:	bb34      	cbnz	r4, 8002766 <_malloc_r+0x82>
 8002718:	4629      	mov	r1, r5
 800271a:	4638      	mov	r0, r7
 800271c:	f7ff ffc2 	bl	80026a4 <sbrk_aligned>
 8002720:	1c43      	adds	r3, r0, #1
 8002722:	4604      	mov	r4, r0
 8002724:	d14d      	bne.n	80027c2 <_malloc_r+0xde>
 8002726:	6834      	ldr	r4, [r6, #0]
 8002728:	4626      	mov	r6, r4
 800272a:	2e00      	cmp	r6, #0
 800272c:	d140      	bne.n	80027b0 <_malloc_r+0xcc>
 800272e:	6823      	ldr	r3, [r4, #0]
 8002730:	4631      	mov	r1, r6
 8002732:	4638      	mov	r0, r7
 8002734:	eb04 0803 	add.w	r8, r4, r3
 8002738:	f000 f878 	bl	800282c <_sbrk_r>
 800273c:	4580      	cmp	r8, r0
 800273e:	d13a      	bne.n	80027b6 <_malloc_r+0xd2>
 8002740:	6821      	ldr	r1, [r4, #0]
 8002742:	3503      	adds	r5, #3
 8002744:	1a6d      	subs	r5, r5, r1
 8002746:	f025 0503 	bic.w	r5, r5, #3
 800274a:	3508      	adds	r5, #8
 800274c:	2d0c      	cmp	r5, #12
 800274e:	bf38      	it	cc
 8002750:	250c      	movcc	r5, #12
 8002752:	4638      	mov	r0, r7
 8002754:	4629      	mov	r1, r5
 8002756:	f7ff ffa5 	bl	80026a4 <sbrk_aligned>
 800275a:	3001      	adds	r0, #1
 800275c:	d02b      	beq.n	80027b6 <_malloc_r+0xd2>
 800275e:	6823      	ldr	r3, [r4, #0]
 8002760:	442b      	add	r3, r5
 8002762:	6023      	str	r3, [r4, #0]
 8002764:	e00e      	b.n	8002784 <_malloc_r+0xa0>
 8002766:	6822      	ldr	r2, [r4, #0]
 8002768:	1b52      	subs	r2, r2, r5
 800276a:	d41e      	bmi.n	80027aa <_malloc_r+0xc6>
 800276c:	2a0b      	cmp	r2, #11
 800276e:	d916      	bls.n	800279e <_malloc_r+0xba>
 8002770:	1961      	adds	r1, r4, r5
 8002772:	42a3      	cmp	r3, r4
 8002774:	6025      	str	r5, [r4, #0]
 8002776:	bf18      	it	ne
 8002778:	6059      	strne	r1, [r3, #4]
 800277a:	6863      	ldr	r3, [r4, #4]
 800277c:	bf08      	it	eq
 800277e:	6031      	streq	r1, [r6, #0]
 8002780:	5162      	str	r2, [r4, r5]
 8002782:	604b      	str	r3, [r1, #4]
 8002784:	4638      	mov	r0, r7
 8002786:	f104 060b 	add.w	r6, r4, #11
 800278a:	f000 f865 	bl	8002858 <__malloc_unlock>
 800278e:	f026 0607 	bic.w	r6, r6, #7
 8002792:	1d23      	adds	r3, r4, #4
 8002794:	1af2      	subs	r2, r6, r3
 8002796:	d0b6      	beq.n	8002706 <_malloc_r+0x22>
 8002798:	1b9b      	subs	r3, r3, r6
 800279a:	50a3      	str	r3, [r4, r2]
 800279c:	e7b3      	b.n	8002706 <_malloc_r+0x22>
 800279e:	6862      	ldr	r2, [r4, #4]
 80027a0:	42a3      	cmp	r3, r4
 80027a2:	bf0c      	ite	eq
 80027a4:	6032      	streq	r2, [r6, #0]
 80027a6:	605a      	strne	r2, [r3, #4]
 80027a8:	e7ec      	b.n	8002784 <_malloc_r+0xa0>
 80027aa:	4623      	mov	r3, r4
 80027ac:	6864      	ldr	r4, [r4, #4]
 80027ae:	e7b2      	b.n	8002716 <_malloc_r+0x32>
 80027b0:	4634      	mov	r4, r6
 80027b2:	6876      	ldr	r6, [r6, #4]
 80027b4:	e7b9      	b.n	800272a <_malloc_r+0x46>
 80027b6:	230c      	movs	r3, #12
 80027b8:	4638      	mov	r0, r7
 80027ba:	603b      	str	r3, [r7, #0]
 80027bc:	f000 f84c 	bl	8002858 <__malloc_unlock>
 80027c0:	e7a1      	b.n	8002706 <_malloc_r+0x22>
 80027c2:	6025      	str	r5, [r4, #0]
 80027c4:	e7de      	b.n	8002784 <_malloc_r+0xa0>
 80027c6:	bf00      	nop
 80027c8:	2000012c 	.word	0x2000012c

080027cc <_realloc_r>:
 80027cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027d0:	4680      	mov	r8, r0
 80027d2:	4614      	mov	r4, r2
 80027d4:	460e      	mov	r6, r1
 80027d6:	b921      	cbnz	r1, 80027e2 <_realloc_r+0x16>
 80027d8:	4611      	mov	r1, r2
 80027da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80027de:	f7ff bf81 	b.w	80026e4 <_malloc_r>
 80027e2:	b92a      	cbnz	r2, 80027f0 <_realloc_r+0x24>
 80027e4:	f7ff ff16 	bl	8002614 <_free_r>
 80027e8:	4625      	mov	r5, r4
 80027ea:	4628      	mov	r0, r5
 80027ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027f0:	f000 f838 	bl	8002864 <_malloc_usable_size_r>
 80027f4:	4284      	cmp	r4, r0
 80027f6:	4607      	mov	r7, r0
 80027f8:	d802      	bhi.n	8002800 <_realloc_r+0x34>
 80027fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80027fe:	d812      	bhi.n	8002826 <_realloc_r+0x5a>
 8002800:	4621      	mov	r1, r4
 8002802:	4640      	mov	r0, r8
 8002804:	f7ff ff6e 	bl	80026e4 <_malloc_r>
 8002808:	4605      	mov	r5, r0
 800280a:	2800      	cmp	r0, #0
 800280c:	d0ed      	beq.n	80027ea <_realloc_r+0x1e>
 800280e:	42bc      	cmp	r4, r7
 8002810:	4622      	mov	r2, r4
 8002812:	4631      	mov	r1, r6
 8002814:	bf28      	it	cs
 8002816:	463a      	movcs	r2, r7
 8002818:	f7ff fed4 	bl	80025c4 <memcpy>
 800281c:	4631      	mov	r1, r6
 800281e:	4640      	mov	r0, r8
 8002820:	f7ff fef8 	bl	8002614 <_free_r>
 8002824:	e7e1      	b.n	80027ea <_realloc_r+0x1e>
 8002826:	4635      	mov	r5, r6
 8002828:	e7df      	b.n	80027ea <_realloc_r+0x1e>
	...

0800282c <_sbrk_r>:
 800282c:	b538      	push	{r3, r4, r5, lr}
 800282e:	2300      	movs	r3, #0
 8002830:	4d05      	ldr	r5, [pc, #20]	; (8002848 <_sbrk_r+0x1c>)
 8002832:	4604      	mov	r4, r0
 8002834:	4608      	mov	r0, r1
 8002836:	602b      	str	r3, [r5, #0]
 8002838:	f7fe fbdc 	bl	8000ff4 <_sbrk>
 800283c:	1c43      	adds	r3, r0, #1
 800283e:	d102      	bne.n	8002846 <_sbrk_r+0x1a>
 8002840:	682b      	ldr	r3, [r5, #0]
 8002842:	b103      	cbz	r3, 8002846 <_sbrk_r+0x1a>
 8002844:	6023      	str	r3, [r4, #0]
 8002846:	bd38      	pop	{r3, r4, r5, pc}
 8002848:	20000134 	.word	0x20000134

0800284c <__malloc_lock>:
 800284c:	4801      	ldr	r0, [pc, #4]	; (8002854 <__malloc_lock+0x8>)
 800284e:	f000 b811 	b.w	8002874 <__retarget_lock_acquire_recursive>
 8002852:	bf00      	nop
 8002854:	20000138 	.word	0x20000138

08002858 <__malloc_unlock>:
 8002858:	4801      	ldr	r0, [pc, #4]	; (8002860 <__malloc_unlock+0x8>)
 800285a:	f000 b80c 	b.w	8002876 <__retarget_lock_release_recursive>
 800285e:	bf00      	nop
 8002860:	20000138 	.word	0x20000138

08002864 <_malloc_usable_size_r>:
 8002864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002868:	1f18      	subs	r0, r3, #4
 800286a:	2b00      	cmp	r3, #0
 800286c:	bfbc      	itt	lt
 800286e:	580b      	ldrlt	r3, [r1, r0]
 8002870:	18c0      	addlt	r0, r0, r3
 8002872:	4770      	bx	lr

08002874 <__retarget_lock_acquire_recursive>:
 8002874:	4770      	bx	lr

08002876 <__retarget_lock_release_recursive>:
 8002876:	4770      	bx	lr

08002878 <_init>:
 8002878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800287a:	bf00      	nop
 800287c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800287e:	bc08      	pop	{r3}
 8002880:	469e      	mov	lr, r3
 8002882:	4770      	bx	lr

08002884 <_fini>:
 8002884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002886:	bf00      	nop
 8002888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800288a:	bc08      	pop	{r3}
 800288c:	469e      	mov	lr, r3
 800288e:	4770      	bx	lr
