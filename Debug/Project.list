
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000276c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005a6c4  08002950  08002950  00012950  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0805d014  0805d014  0007b8d8  2**0
                  CONTENTS
  4 .ARM          00000000  0805d014  0805d014  0007b8d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0805d014  0805d014  0007b8d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0805d014  0805d014  0006d014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0805d018  0805d018  0006d018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000b8d8  20000000  0805d01c  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000b8d8  080688f4  0007b8d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b9a0  080688f4  0007b9a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0007b8d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a7a9  00000000  00000000  0007b901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021db  00000000  00000000  000860aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000688  00000000  00000000  00088288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00019da9  00000000  00000000  00088910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000b4e0  00000000  00000000  000a26b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00092b9b  00000000  00000000  000adb99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00140734  2**0
                  CONTENTS, READONLY
 19 .debug_loc    00005398  00000000  00000000  00140784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 000011b0  00000000  00000000  00145b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001468  00000000  00000000  00146cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000b8d8 	.word	0x2000b8d8
 8000200:	00000000 	.word	0x00000000
 8000204:	08002938 	.word	0x08002938

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000b8dc 	.word	0x2000b8dc
 8000220:	08002938 	.word	0x08002938

08000224 <Kirby_movePlatform>:
/*
 * Moves the platform image one pixel off from the original position.
 *
 * uint16_t xPos: the updated x Position of the first column
 * */
void Kirby_movePlatform(uint16_t kirbyX) {
 8000224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t xPos = kirbyX - 160;
	if (currentPos < xPos) {
 8000228:	4f33      	ldr	r7, [pc, #204]	; (80002f8 <Kirby_movePlatform+0xd4>)
	uint16_t xPos = kirbyX - 160;
 800022a:	f1a0 04a0 	sub.w	r4, r0, #160	; 0xa0
	if (currentPos < xPos) {
 800022e:	883b      	ldrh	r3, [r7, #0]
	uint16_t xPos = kirbyX - 160;
 8000230:	b2a4      	uxth	r4, r4
	if (currentPos < xPos) {
 8000232:	42a3      	cmp	r3, r4
 8000234:	d243      	bcs.n	80002be <Kirby_movePlatform+0x9a>
		// Scrolling to the right
		uint16_t targetCol = (xPos - 1) % 320;
 8000236:	f44f 75a0 	mov.w	r5, #320	; 0x140
 800023a:	1e60      	subs	r0, r4, #1
 800023c:	fb90 f3f5 	sdiv	r3, r0, r5
 8000240:	f04f 0800 	mov.w	r8, #0
 8000244:	fb05 0013 	mls	r0, r5, r3, r0
 8000248:	4e2c      	ldr	r6, [pc, #176]	; (80002fc <Kirby_movePlatform+0xd8>)
 800024a:	b285      	uxth	r5, r0
		for (uint16_t row = 0; row < 209; row++) {
 800024c:	eb06 0644 	add.w	r6, r6, r4, lsl #1
			LCD_DrawDot(targetCol, row, platformImg[882 * row + xPos + 320 - 1]);
 8000250:	f8b6 227e 	ldrh.w	r2, [r6, #638]	; 0x27e
 8000254:	fa1f f188 	uxth.w	r1, r8
 8000258:	4628      	mov	r0, r5
		for (uint16_t row = 0; row < 209; row++) {
 800025a:	f108 0801 	add.w	r8, r8, #1
			LCD_DrawDot(targetCol, row, platformImg[882 * row + xPos + 320 - 1]);
 800025e:	f000 fdf3 	bl	8000e48 <LCD_DrawDot>
		for (uint16_t row = 0; row < 209; row++) {
 8000262:	f1b8 0fd1 	cmp.w	r8, #209	; 0xd1
 8000266:	f206 66e4 	addw	r6, r6, #1764	; 0x6e4
 800026a:	d1f1      	bne.n	8000250 <Kirby_movePlatform+0x2c>
	}
	currentPos = xPos;


	// Vertical scroll, starting from column = xPos
	  LCD_Write_Cmd(0x33);
 800026c:	2033      	movs	r0, #51	; 0x33
	currentPos = xPos;
 800026e:	803c      	strh	r4, [r7, #0]
	  LCD_Write_Cmd(0x33);
 8000270:	f000 fc76 	bl	8000b60 <LCD_Write_Cmd>
	  LCD_Write_Data(0x00);
 8000274:	2000      	movs	r0, #0
 8000276:	f000 fc77 	bl	8000b68 <LCD_Write_Data>
	  LCD_Write_Data(0x00);
 800027a:	2000      	movs	r0, #0
 800027c:	f000 fc74 	bl	8000b68 <LCD_Write_Data>
	  LCD_Write_Data(0x01);
 8000280:	2001      	movs	r0, #1
 8000282:	f000 fc71 	bl	8000b68 <LCD_Write_Data>
	  LCD_Write_Data(0x40);
 8000286:	2040      	movs	r0, #64	; 0x40
 8000288:	f000 fc6e 	bl	8000b68 <LCD_Write_Data>
	  LCD_Write_Data(0x00);
 800028c:	2000      	movs	r0, #0
 800028e:	f000 fc6b 	bl	8000b68 <LCD_Write_Data>
	  LCD_Write_Data(0x00);
 8000292:	2000      	movs	r0, #0
 8000294:	f000 fc68 	bl	8000b68 <LCD_Write_Data>

	  LCD_Write_Cmd(0x37);
 8000298:	2037      	movs	r0, #55	; 0x37
 800029a:	f000 fc61 	bl	8000b60 <LCD_Write_Cmd>
	  LCD_Write_Data((xPos % 320) >> 8);
 800029e:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80002a2:	fbb4 f3f0 	udiv	r3, r4, r0
 80002a6:	fb00 4013 	mls	r0, r0, r3, r4
 80002aa:	b284      	uxth	r4, r0
 80002ac:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80002b0:	f000 fc5a 	bl	8000b68 <LCD_Write_Data>
	  LCD_Write_Data((xPos % 320) & 0xff);
 80002b4:	b2e0      	uxtb	r0, r4
}
 80002b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	  LCD_Write_Data((xPos % 320) & 0xff);
 80002ba:	f000 bc55 	b.w	8000b68 <LCD_Write_Data>
	} else if (currentPos > xPos) {
 80002be:	d918      	bls.n	80002f2 <Kirby_movePlatform+0xce>
		uint16_t targetCol = xPos % 320;
 80002c0:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80002c4:	fbb4 f6f0 	udiv	r6, r4, r0
 80002c8:	2500      	movs	r5, #0
			LCD_DrawDot(targetCol, row, platformImg[882 * row + xPos]);
 80002ca:	f240 69e4 	movw	r9, #1764	; 0x6e4
		uint16_t targetCol = xPos % 320;
 80002ce:	fb00 4616 	mls	r6, r0, r6, r4
 80002d2:	4b0a      	ldr	r3, [pc, #40]	; (80002fc <Kirby_movePlatform+0xd8>)
 80002d4:	b2b6      	uxth	r6, r6
		for (uint16_t row = 0; row < 209; row++) {
 80002d6:	eb03 0844 	add.w	r8, r3, r4, lsl #1
			LCD_DrawDot(targetCol, row, platformImg[882 * row + xPos]);
 80002da:	fb09 f305 	mul.w	r3, r9, r5
 80002de:	b2a9      	uxth	r1, r5
 80002e0:	4630      	mov	r0, r6
 80002e2:	f838 2003 	ldrh.w	r2, [r8, r3]
		for (uint16_t row = 0; row < 209; row++) {
 80002e6:	3501      	adds	r5, #1
			LCD_DrawDot(targetCol, row, platformImg[882 * row + xPos]);
 80002e8:	f000 fdae 	bl	8000e48 <LCD_DrawDot>
		for (uint16_t row = 0; row < 209; row++) {
 80002ec:	2dd1      	cmp	r5, #209	; 0xd1
 80002ee:	d1f4      	bne.n	80002da <Kirby_movePlatform+0xb6>
 80002f0:	e7bc      	b.n	800026c <Kirby_movePlatform+0x48>
}
 80002f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80002f6:	bf00      	nop
 80002f8:	2000b8f4 	.word	0x2000b8f4
 80002fc:	08002960 	.word	0x08002960

08000300 <Kirby_redrawColumnLeft>:

void Kirby_redrawColumnLeft(struct Kirby* kirby) {
 8000300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000304:	4605      	mov	r5, r0
	// Redraw the first column
	for (int y = 0; y < KIRBY_HEIGHT; y++) {
 8000306:	2400      	movs	r4, #0
	  uint16_t displayX = kirby->xPos % SCREEN_WIDTH;
	  uint16_t displayY = kirby->yPos + y;
	  uint16_t color = platformImg[882 * (displayY) + (kirby->xPos)];
 8000308:	f240 3872 	movw	r8, #882	; 0x372
	  uint16_t displayX = kirby->xPos % SCREEN_WIDTH;
 800030c:	f44f 76a0 	mov.w	r6, #320	; 0x140
	  uint16_t color = platformImg[882 * (displayY) + (kirby->xPos)];
 8000310:	4f0a      	ldr	r7, [pc, #40]	; (800033c <Kirby_redrawColumnLeft+0x3c>)
	  uint16_t displayX = kirby->xPos % SCREEN_WIDTH;
 8000312:	882b      	ldrh	r3, [r5, #0]
	  uint16_t displayY = kirby->yPos + y;
 8000314:	8869      	ldrh	r1, [r5, #2]
	  uint16_t displayX = kirby->xPos % SCREEN_WIDTH;
 8000316:	fbb3 f0f6 	udiv	r0, r3, r6
	  uint16_t displayY = kirby->yPos + y;
 800031a:	4421      	add	r1, r4
 800031c:	b289      	uxth	r1, r1
	  uint16_t color = platformImg[882 * (displayY) + (kirby->xPos)];
 800031e:	fb08 3201 	mla	r2, r8, r1, r3
	  uint16_t displayX = kirby->xPos % SCREEN_WIDTH;
 8000322:	fb06 3010 	mls	r0, r6, r0, r3
	  LCD_DrawDot(displayX, displayY, color);
 8000326:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 800032a:	b280      	uxth	r0, r0
	for (int y = 0; y < KIRBY_HEIGHT; y++) {
 800032c:	3401      	adds	r4, #1
	  LCD_DrawDot(displayX, displayY, color);
 800032e:	f000 fd8b 	bl	8000e48 <LCD_DrawDot>
	for (int y = 0; y < KIRBY_HEIGHT; y++) {
 8000332:	2c20      	cmp	r4, #32
 8000334:	d1ed      	bne.n	8000312 <Kirby_redrawColumnLeft+0x12>
	}
}
 8000336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800033a:	bf00      	nop
 800033c:	08002960 	.word	0x08002960

08000340 <Kirby_redrawColumnRight>:

void Kirby_redrawColumnRight(struct Kirby* kirby) {
 8000340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000344:	4605      	mov	r5, r0
	// Redraw the last column
	for (int y = 0; y < KIRBY_HEIGHT; y++) {
 8000346:	2400      	movs	r4, #0
		uint16_t displayX = (kirby->xPos + KIRBY_WIDTH) % SCREEN_WIDTH;
		uint16_t displayY = kirby->yPos + y;
		uint16_t color = platformImg[882 * (displayY) + kirby->xPos + KIRBY_WIDTH];
 8000348:	f240 3872 	movw	r8, #882	; 0x372
		uint16_t displayX = (kirby->xPos + KIRBY_WIDTH) % SCREEN_WIDTH;
 800034c:	f44f 76a0 	mov.w	r6, #320	; 0x140
		uint16_t color = platformImg[882 * (displayY) + kirby->xPos + KIRBY_WIDTH];
 8000350:	4f0b      	ldr	r7, [pc, #44]	; (8000380 <Kirby_redrawColumnRight+0x40>)
		uint16_t displayY = kirby->yPos + y;
 8000352:	8869      	ldrh	r1, [r5, #2]
		uint16_t displayX = (kirby->xPos + KIRBY_WIDTH) % SCREEN_WIDTH;
 8000354:	882b      	ldrh	r3, [r5, #0]
		uint16_t displayY = kirby->yPos + y;
 8000356:	4421      	add	r1, r4
 8000358:	b289      	uxth	r1, r1
		uint16_t color = platformImg[882 * (displayY) + kirby->xPos + KIRBY_WIDTH];
 800035a:	fb08 3201 	mla	r2, r8, r1, r3
		uint16_t displayX = (kirby->xPos + KIRBY_WIDTH) % SCREEN_WIDTH;
 800035e:	3323      	adds	r3, #35	; 0x23
 8000360:	fbb3 f0f6 	udiv	r0, r3, r6
 8000364:	fb06 3010 	mls	r0, r6, r0, r3
		uint16_t color = platformImg[882 * (displayY) + kirby->xPos + KIRBY_WIDTH];
 8000368:	3223      	adds	r2, #35	; 0x23
		LCD_DrawDot(displayX, displayY, color);
 800036a:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 800036e:	b280      	uxth	r0, r0
	for (int y = 0; y < KIRBY_HEIGHT; y++) {
 8000370:	3401      	adds	r4, #1
		LCD_DrawDot(displayX, displayY, color);
 8000372:	f000 fd69 	bl	8000e48 <LCD_DrawDot>
	for (int y = 0; y < KIRBY_HEIGHT; y++) {
 8000376:	2c20      	cmp	r4, #32
 8000378:	d1eb      	bne.n	8000352 <Kirby_redrawColumnRight+0x12>
	}
}
 800037a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800037e:	bf00      	nop
 8000380:	08002960 	.word	0x08002960

08000384 <Kirby_redrawRowUp>:

void Kirby_redrawRowUp(struct Kirby* kirby) {
 8000384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000388:	4605      	mov	r5, r0
	for (int x = 0; x < KIRBY_WIDTH; x++) {
 800038a:	2400      	movs	r4, #0
		uint16_t displayX = (kirby->xPos + x) % SCREEN_WIDTH;
		uint16_t displayY = kirby->yPos;
		uint16_t color = platformImg[882 * displayY + kirby->xPos + x];
 800038c:	f240 3872 	movw	r8, #882	; 0x372
		uint16_t displayX = (kirby->xPos + x) % SCREEN_WIDTH;
 8000390:	f44f 76a0 	mov.w	r6, #320	; 0x140
		uint16_t color = platformImg[882 * displayY + kirby->xPos + x];
 8000394:	4f0a      	ldr	r7, [pc, #40]	; (80003c0 <Kirby_redrawRowUp+0x3c>)
		uint16_t displayX = (kirby->xPos + x) % SCREEN_WIDTH;
 8000396:	882b      	ldrh	r3, [r5, #0]
		uint16_t displayY = kirby->yPos;
 8000398:	8869      	ldrh	r1, [r5, #2]
		uint16_t color = platformImg[882 * displayY + kirby->xPos + x];
 800039a:	fb08 3201 	mla	r2, r8, r1, r3
		uint16_t displayX = (kirby->xPos + x) % SCREEN_WIDTH;
 800039e:	4423      	add	r3, r4
 80003a0:	fbb3 f0f6 	udiv	r0, r3, r6
 80003a4:	fb06 3010 	mls	r0, r6, r0, r3
		uint16_t color = platformImg[882 * displayY + kirby->xPos + x];
 80003a8:	4422      	add	r2, r4
		LCD_DrawDot(displayX, displayY, color);
 80003aa:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80003ae:	b280      	uxth	r0, r0
	for (int x = 0; x < KIRBY_WIDTH; x++) {
 80003b0:	3401      	adds	r4, #1
		LCD_DrawDot(displayX, displayY, color);
 80003b2:	f000 fd49 	bl	8000e48 <LCD_DrawDot>
	for (int x = 0; x < KIRBY_WIDTH; x++) {
 80003b6:	2c23      	cmp	r4, #35	; 0x23
 80003b8:	d1ed      	bne.n	8000396 <Kirby_redrawRowUp+0x12>
	}
}
 80003ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80003be:	bf00      	nop
 80003c0:	08002960 	.word	0x08002960

080003c4 <Kirby_redrawRowDown>:

void Kirby_redrawRowDown(struct Kirby* kirby) {
 80003c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80003c8:	4605      	mov	r5, r0
	for (int x = 0; x < KIRBY_WIDTH; x++) {
 80003ca:	2400      	movs	r4, #0
		uint16_t displayX = (kirby->xPos + x) % SCREEN_WIDTH;
		uint16_t displayY = kirby->yPos + KIRBY_HEIGHT;
		uint16_t color = platformImg[882 * displayY + kirby->xPos + x];
 80003cc:	f240 3872 	movw	r8, #882	; 0x372
		uint16_t displayX = (kirby->xPos + x) % SCREEN_WIDTH;
 80003d0:	f44f 76a0 	mov.w	r6, #320	; 0x140
		uint16_t color = platformImg[882 * displayY + kirby->xPos + x];
 80003d4:	4f0b      	ldr	r7, [pc, #44]	; (8000404 <Kirby_redrawRowDown+0x40>)
		uint16_t displayY = kirby->yPos + KIRBY_HEIGHT;
 80003d6:	8869      	ldrh	r1, [r5, #2]
		uint16_t displayX = (kirby->xPos + x) % SCREEN_WIDTH;
 80003d8:	882b      	ldrh	r3, [r5, #0]
		uint16_t displayY = kirby->yPos + KIRBY_HEIGHT;
 80003da:	3120      	adds	r1, #32
 80003dc:	b289      	uxth	r1, r1
		uint16_t color = platformImg[882 * displayY + kirby->xPos + x];
 80003de:	fb08 3201 	mla	r2, r8, r1, r3
		uint16_t displayX = (kirby->xPos + x) % SCREEN_WIDTH;
 80003e2:	4423      	add	r3, r4
 80003e4:	fbb3 f0f6 	udiv	r0, r3, r6
 80003e8:	fb06 3010 	mls	r0, r6, r0, r3
		uint16_t color = platformImg[882 * displayY + kirby->xPos + x];
 80003ec:	4422      	add	r2, r4
		LCD_DrawDot(displayX, displayY, color);
 80003ee:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80003f2:	b280      	uxth	r0, r0
	for (int x = 0; x < KIRBY_WIDTH; x++) {
 80003f4:	3401      	adds	r4, #1
		LCD_DrawDot(displayX, displayY, color);
 80003f6:	f000 fd27 	bl	8000e48 <LCD_DrawDot>
	for (int x = 0; x < KIRBY_WIDTH; x++) {
 80003fa:	2c23      	cmp	r4, #35	; 0x23
 80003fc:	d1eb      	bne.n	80003d6 <Kirby_redrawRowDown+0x12>
	}
}
 80003fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000402:	bf00      	nop
 8000404:	08002960 	.word	0x08002960

08000408 <Kirby_eraseSprite>:

void Kirby_eraseSprite(struct Kirby* kirby) {
 8000408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800040c:	4606      	mov	r6, r0
	for (int y = 0; y < KIRBY_HEIGHT; y++) {
 800040e:	2500      	movs	r5, #0
		for (int x = 0; x < KIRBY_WIDTH; x++) {
			uint16_t displayX = (kirby->xPos + x) % SCREEN_WIDTH;
			uint16_t displayY = kirby->yPos + y;
			uint16_t color = platformImg[882 * displayY + kirby->xPos + x];
 8000410:	f240 3972 	movw	r9, #882	; 0x372
			uint16_t displayX = (kirby->xPos + x) % SCREEN_WIDTH;
 8000414:	f44f 77a0 	mov.w	r7, #320	; 0x140
			uint16_t color = platformImg[882 * displayY + kirby->xPos + x];
 8000418:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8000450 <Kirby_eraseSprite+0x48>
		for (int x = 0; x < KIRBY_WIDTH; x++) {
 800041c:	2400      	movs	r4, #0
			uint16_t displayY = kirby->yPos + y;
 800041e:	8871      	ldrh	r1, [r6, #2]
			uint16_t displayX = (kirby->xPos + x) % SCREEN_WIDTH;
 8000420:	8833      	ldrh	r3, [r6, #0]
			uint16_t displayY = kirby->yPos + y;
 8000422:	4429      	add	r1, r5
 8000424:	b289      	uxth	r1, r1
			uint16_t color = platformImg[882 * displayY + kirby->xPos + x];
 8000426:	fb09 3201 	mla	r2, r9, r1, r3
			uint16_t displayX = (kirby->xPos + x) % SCREEN_WIDTH;
 800042a:	4423      	add	r3, r4
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3010 	mls	r0, r7, r0, r3
			uint16_t color = platformImg[882 * displayY + kirby->xPos + x];
 8000434:	4422      	add	r2, r4
			LCD_DrawDot(displayX, displayY, color);
 8000436:	f838 2012 	ldrh.w	r2, [r8, r2, lsl #1]
 800043a:	b280      	uxth	r0, r0
		for (int x = 0; x < KIRBY_WIDTH; x++) {
 800043c:	3401      	adds	r4, #1
			LCD_DrawDot(displayX, displayY, color);
 800043e:	f000 fd03 	bl	8000e48 <LCD_DrawDot>
		for (int x = 0; x < KIRBY_WIDTH; x++) {
 8000442:	2c23      	cmp	r4, #35	; 0x23
 8000444:	d1eb      	bne.n	800041e <Kirby_eraseSprite+0x16>
	for (int y = 0; y < KIRBY_HEIGHT; y++) {
 8000446:	3501      	adds	r5, #1
 8000448:	2d20      	cmp	r5, #32
 800044a:	d1e7      	bne.n	800041c <Kirby_eraseSprite+0x14>
		}
	}
}
 800044c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000450:	08002960 	.word	0x08002960

08000454 <Kirby_displayKirbyFacingRight>:
//			LCD_DrawDot(displayXPos, displayYPos, color);
//		}
//	}
//}

void Kirby_displayKirbyFacingRight(uint8_t spriteWidth, uint8_t spriteHeight, uint8_t spriteOffset, uint16_t* frame, uint16_t xPos, uint16_t yPos) {
 8000454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000458:	4604      	mov	r4, r0
 800045a:	1e4f      	subs	r7, r1, #1
 800045c:	fb07 f504 	mul.w	r5, r7, r4
 8000460:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8000464:	f06f 0301 	mvn.w	r3, #1
	for (int x = 0; x < spriteWidth; x++) {
 8000468:	2600      	movs	r6, #0
 800046a:	4363      	muls	r3, r4
void Kirby_displayKirbyFacingRight(uint8_t spriteWidth, uint8_t spriteHeight, uint8_t spriteOffset, uint16_t* frame, uint16_t xPos, uint16_t yPos) {
 800046c:	b085      	sub	sp, #20
 800046e:	9300      	str	r3, [sp, #0]
 8000470:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8000474:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8000478:	4413      	add	r3, r2
 800047a:	9001      	str	r0, [sp, #4]
 800047c:	9302      	str	r3, [sp, #8]
	for (int x = 0; x < spriteWidth; x++) {
 800047e:	42a6      	cmp	r6, r4
 8000480:	db02      	blt.n	8000488 <Kirby_displayKirbyFacingRight+0x34>
			  color = newColor;
		  }
		  LCD_DrawDot(displayXPos, displayYPos, color);
	  }
	}
}
 8000482:	b005      	add	sp, #20
 8000484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  uint16_t displayXPos = (xPos + spriteOffset + x) % SCREEN_WIDTH;
 8000488:	9b02      	ldr	r3, [sp, #8]
	  for (int y = spriteHeight - 1; y >= 0; y--) {
 800048a:	46a9      	mov	r9, r5
 800048c:	eb03 0a06 	add.w	sl, r3, r6
	  uint16_t displayXPos = (xPos + spriteOffset + x) % SCREEN_WIDTH;
 8000490:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000494:	fbba f0f3 	udiv	r0, sl, r3
	  for (int y = spriteHeight - 1; y >= 0; y--) {
 8000498:	46b8      	mov	r8, r7
	  uint16_t displayXPos = (xPos + spriteOffset + x) % SCREEN_WIDTH;
 800049a:	fb03 a010 	mls	r0, r3, r0, sl
		  if (color == 0x4B4E) {
 800049e:	f644 3b4e 	movw	fp, #19278	; 0x4b4e
			  uint16_t newColor = platformImg[882 * (displayYPos) + (xPos + spriteOffset + x)];
 80004a2:	f240 3372 	movw	r3, #882	; 0x372
	  uint16_t displayXPos = (xPos + spriteOffset + x) % SCREEN_WIDTH;
 80004a6:	b280      	uxth	r0, r0
	  for (int y = spriteHeight - 1; y >= 0; y--) {
 80004a8:	f1b8 3fff 	cmp.w	r8, #4294967295
 80004ac:	d102      	bne.n	80004b4 <Kirby_displayKirbyFacingRight+0x60>
	for (int x = 0; x < spriteWidth; x++) {
 80004ae:	3601      	adds	r6, #1
 80004b0:	3502      	adds	r5, #2
 80004b2:	e7e4      	b.n	800047e <Kirby_displayKirbyFacingRight+0x2a>
		  uint16_t displayYPos = yPos + y;
 80004b4:	9a01      	ldr	r2, [sp, #4]
		  LCD_DrawDot(displayXPos, displayYPos, color);
 80004b6:	9003      	str	r0, [sp, #12]
 80004b8:	eb02 0108 	add.w	r1, r2, r8
		  uint16_t color = frame[y * spriteWidth + x];
 80004bc:	f8b9 2000 	ldrh.w	r2, [r9]
 80004c0:	b289      	uxth	r1, r1
		  if (color == 0x4B4E) {
 80004c2:	455a      	cmp	r2, fp
			  uint16_t newColor = platformImg[882 * (displayYPos) + (xPos + spriteOffset + x)];
 80004c4:	bf04      	itt	eq
 80004c6:	fb03 a201 	mlaeq	r2, r3, r1, sl
 80004ca:	f8df c01c 	ldreq.w	ip, [pc, #28]	; 80004e8 <Kirby_displayKirbyFacingRight+0x94>
	  for (int y = spriteHeight - 1; y >= 0; y--) {
 80004ce:	f108 38ff 	add.w	r8, r8, #4294967295
			  uint16_t newColor = platformImg[882 * (displayYPos) + (xPos + spriteOffset + x)];
 80004d2:	bf08      	it	eq
 80004d4:	f83c 2012 	ldrheq.w	r2, [ip, r2, lsl #1]
		  LCD_DrawDot(displayXPos, displayYPos, color);
 80004d8:	f000 fcb6 	bl	8000e48 <LCD_DrawDot>
	  for (int y = spriteHeight - 1; y >= 0; y--) {
 80004dc:	9b00      	ldr	r3, [sp, #0]
 80004de:	9803      	ldr	r0, [sp, #12]
 80004e0:	4499      	add	r9, r3
 80004e2:	f240 3372 	movw	r3, #882	; 0x372
 80004e6:	e7df      	b.n	80004a8 <Kirby_displayKirbyFacingRight+0x54>
 80004e8:	08002960 	.word	0x08002960

080004ec <Kirby_displayKirbyFacingLeft>:

void Kirby_displayKirbyFacingLeft(uint8_t spriteWidth, uint8_t spriteHeight, uint8_t spriteOffset, uint16_t* frame, uint16_t xPos, uint16_t yPos) {
 80004ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004f0:	4604      	mov	r4, r0
 80004f2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004f6:	fb08 f504 	mul.w	r5, r8, r4
 80004fa:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80004fe:	f06f 0301 	mvn.w	r3, #1
	for (int x = 0; x < spriteWidth; x++) {
 8000502:	2700      	movs	r7, #0
 8000504:	4363      	muls	r3, r4
void Kirby_displayKirbyFacingLeft(uint8_t spriteWidth, uint8_t spriteHeight, uint8_t spriteOffset, uint16_t* frame, uint16_t xPos, uint16_t yPos) {
 8000506:	b085      	sub	sp, #20
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800050e:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8000512:	4413      	add	r3, r2
 8000514:	9001      	str	r0, [sp, #4]
 8000516:	9302      	str	r3, [sp, #8]
	for (int x = 0; x < spriteWidth; x++) {
 8000518:	42a7      	cmp	r7, r4
 800051a:	db02      	blt.n	8000522 <Kirby_displayKirbyFacingLeft+0x36>
			  color = newColor;
		  }
		  LCD_DrawDot(displayXPos, displayYPos, color);
	  }
	}
}
 800051c:	b005      	add	sp, #20
 800051e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  uint16_t displayXPos = (xPos + spriteOffset + spriteWidth - x) % SCREEN_WIDTH;
 8000522:	9b02      	ldr	r3, [sp, #8]
	  for (int y = spriteHeight - 1; y >= 0; y--) {
 8000524:	46aa      	mov	sl, r5
 8000526:	191e      	adds	r6, r3, r4
	  uint16_t displayXPos = (xPos + spriteOffset + spriteWidth - x) % SCREEN_WIDTH;
 8000528:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800052c:	1bf6      	subs	r6, r6, r7
 800052e:	fb96 f0f3 	sdiv	r0, r6, r3
	  for (int y = spriteHeight - 1; y >= 0; y--) {
 8000532:	46c1      	mov	r9, r8
	  uint16_t displayXPos = (xPos + spriteOffset + spriteWidth - x) % SCREEN_WIDTH;
 8000534:	fb03 6010 	mls	r0, r3, r0, r6
		  if (color == 0x4B4E) {
 8000538:	f644 3b4e 	movw	fp, #19278	; 0x4b4e
			  uint16_t newColor = platformImg[882 * (displayYPos) + (xPos + spriteOffset + spriteWidth - x)];
 800053c:	f240 3372 	movw	r3, #882	; 0x372
	  uint16_t displayXPos = (xPos + spriteOffset + spriteWidth - x) % SCREEN_WIDTH;
 8000540:	b280      	uxth	r0, r0
	  for (int y = spriteHeight - 1; y >= 0; y--) {
 8000542:	f1b9 3fff 	cmp.w	r9, #4294967295
 8000546:	d102      	bne.n	800054e <Kirby_displayKirbyFacingLeft+0x62>
	for (int x = 0; x < spriteWidth; x++) {
 8000548:	3701      	adds	r7, #1
 800054a:	3502      	adds	r5, #2
 800054c:	e7e4      	b.n	8000518 <Kirby_displayKirbyFacingLeft+0x2c>
		  uint16_t displayYPos = yPos + y;
 800054e:	9a01      	ldr	r2, [sp, #4]
		  LCD_DrawDot(displayXPos, displayYPos, color);
 8000550:	9003      	str	r0, [sp, #12]
 8000552:	eb02 0109 	add.w	r1, r2, r9
		  uint16_t color = frame[y * spriteWidth + x];
 8000556:	f8ba 2000 	ldrh.w	r2, [sl]
 800055a:	b289      	uxth	r1, r1
		  if (color == 0x4B4E) {
 800055c:	455a      	cmp	r2, fp
			  uint16_t newColor = platformImg[882 * (displayYPos) + (xPos + spriteOffset + spriteWidth - x)];
 800055e:	bf04      	itt	eq
 8000560:	fb03 6201 	mlaeq	r2, r3, r1, r6
 8000564:	f8df c01c 	ldreq.w	ip, [pc, #28]	; 8000584 <Kirby_displayKirbyFacingLeft+0x98>
	  for (int y = spriteHeight - 1; y >= 0; y--) {
 8000568:	f109 39ff 	add.w	r9, r9, #4294967295
			  uint16_t newColor = platformImg[882 * (displayYPos) + (xPos + spriteOffset + spriteWidth - x)];
 800056c:	bf08      	it	eq
 800056e:	f83c 2012 	ldrheq.w	r2, [ip, r2, lsl #1]
		  LCD_DrawDot(displayXPos, displayYPos, color);
 8000572:	f000 fc69 	bl	8000e48 <LCD_DrawDot>
	  for (int y = spriteHeight - 1; y >= 0; y--) {
 8000576:	9b00      	ldr	r3, [sp, #0]
 8000578:	9803      	ldr	r0, [sp, #12]
 800057a:	449a      	add	sl, r3
 800057c:	f240 3372 	movw	r3, #882	; 0x372
 8000580:	e7df      	b.n	8000542 <Kirby_displayKirbyFacingLeft+0x56>
 8000582:	bf00      	nop
 8000584:	08002960 	.word	0x08002960

08000588 <Kirby_isFalling>:
int Kirby_isOnGround(uint16_t kirbyY, uint16_t groundY) {
	return (kirbyY + KIRBY_HEIGHT) == groundY;
}

int Kirby_isFalling(const struct Kirby* kirby) {
	if (Kirby_isOnGround(kirby->yPos, GROUND_HEIGHT)) {
 8000588:	8843      	ldrh	r3, [r0, #2]
 800058a:	2b6e      	cmp	r3, #110	; 0x6e
		return 0;
	} else {
		if (kirby->enableUp) {
 800058c:	bf1d      	ittte	ne
 800058e:	7980      	ldrbne	r0, [r0, #6]
 8000590:	fab0 f080 	clzne	r0, r0
 8000594:	0940      	lsrne	r0, r0, #5
		return 0;
 8000596:	2000      	moveq	r0, #0
			return 0;
		} else {
			return 1;
		}
	}
}
 8000598:	4770      	bx	lr
	...

0800059c <Kirby_updateState>:

void Kirby_updateState(struct Kirby* kirby, uint8_t inputB, uint8_t inputA, uint8_t inputLeft, uint8_t inputRight) {
 800059c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80005a0:	461e      	mov	r6, r3
	kirby->previousState = kirby->state;
 80005a2:	7a43      	ldrb	r3, [r0, #9]
void Kirby_updateState(struct Kirby* kirby, uint8_t inputB, uint8_t inputA, uint8_t inputLeft, uint8_t inputRight) {
 80005a4:	460f      	mov	r7, r1
	kirby->previousState = kirby->state;
 80005a6:	7383      	strb	r3, [r0, #14]

	// Displays inputs
	LCD_Clear(10, 210, 100, 20, 0xFFFF);
 80005a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
void Kirby_updateState(struct Kirby* kirby, uint8_t inputB, uint8_t inputA, uint8_t inputLeft, uint8_t inputRight) {
 80005ac:	4615      	mov	r5, r2
	LCD_Clear(10, 210, 100, 20, 0xFFFF);
 80005ae:	21d2      	movs	r1, #210	; 0xd2
 80005b0:	2264      	movs	r2, #100	; 0x64
void Kirby_updateState(struct Kirby* kirby, uint8_t inputB, uint8_t inputA, uint8_t inputLeft, uint8_t inputRight) {
 80005b2:	4604      	mov	r4, r0
	LCD_Clear(10, 210, 100, 20, 0xFFFF);
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	200a      	movs	r0, #10
 80005b8:	2314      	movs	r3, #20
void Kirby_updateState(struct Kirby* kirby, uint8_t inputB, uint8_t inputA, uint8_t inputLeft, uint8_t inputRight) {
 80005ba:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
	LCD_Clear(10, 210, 100, 20, 0xFFFF);
 80005be:	f000 fbd5 	bl	8000d6c <LCD_Clear>
	char buffer[8];
	sprintf(buffer, "%c %c %c %c", inputB ? 'B' : ' ', inputA ? 'A' : ' ', inputLeft ? 'L' : ' ', inputRight ? 'R' : ' ');
 80005c2:	2f00      	cmp	r7, #0
 80005c4:	bf14      	ite	ne
 80005c6:	2242      	movne	r2, #66	; 0x42
 80005c8:	2220      	moveq	r2, #32
 80005ca:	2d00      	cmp	r5, #0
 80005cc:	bf14      	ite	ne
 80005ce:	2341      	movne	r3, #65	; 0x41
 80005d0:	2320      	moveq	r3, #32
 80005d2:	2e00      	cmp	r6, #0
 80005d4:	bf14      	ite	ne
 80005d6:	214c      	movne	r1, #76	; 0x4c
 80005d8:	2120      	moveq	r1, #32
 80005da:	f1b8 0f00 	cmp.w	r8, #0
 80005de:	bf14      	ite	ne
 80005e0:	2052      	movne	r0, #82	; 0x52
 80005e2:	2020      	moveq	r0, #32
 80005e4:	e9cd 1000 	strd	r1, r0, [sp]
 80005e8:	4929      	ldr	r1, [pc, #164]	; (8000690 <Kirby_updateState+0xf4>)
 80005ea:	a802      	add	r0, sp, #8
 80005ec:	f001 fd22 	bl	8002034 <siprintf>
	LCD_DrawString(10, 210, buffer);
 80005f0:	21d2      	movs	r1, #210	; 0xd2
 80005f2:	200a      	movs	r0, #10
 80005f4:	aa02      	add	r2, sp, #8
 80005f6:	f000 fc0d 	bl	8000e14 <LCD_DrawString>
//			kirby->enableUp = 0;
//			Kirby_updateState(kirby, inputB, inputA, inputLeft, inputRight);
//		}
//		return;
//	}
	if (!(kirby->enableStateChange)) {
 80005fa:	7be3      	ldrb	r3, [r4, #15]
 80005fc:	b133      	cbz	r3, 800060c <Kirby_updateState+0x70>
		return;
	}

	/* B Button */
	if (inputB) {
 80005fe:	b15f      	cbz	r7, 8000618 <Kirby_updateState+0x7c>
		if (kirby->hasSwallowed) {
 8000600:	7923      	ldrb	r3, [r4, #4]
 8000602:	b133      	cbz	r3, 8000612 <Kirby_updateState+0x76>
			kirby->state = SPITTING;
 8000604:	2300      	movs	r3, #0
 8000606:	7263      	strb	r3, [r4, #9]
			kirby->hasSwallowed = 0;
 8000608:	80a3      	strh	r3, [r4, #4]
	/* A Button */
	if (inputA) {
		if (kirby->hasSwallowed && !(kirby->isFloating)) {
			kirby->state = SWALLOWED_JUMP;
			kirby->enableUp = 1;
			kirby->enableStateChange = 0;
 800060a:	73e3      	strb	r3, [r4, #15]
		kirby->state = SWALLOWED_IDLE;
	} else {
		kirby->state = IDLE;
	}
	return;
}
 800060c:	b004      	add	sp, #16
 800060e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			kirby->state = SWALLOWING;
 8000612:	2301      	movs	r3, #1
		kirby->state = IDLE;
 8000614:	7263      	strb	r3, [r4, #9]
 8000616:	e7f9      	b.n	800060c <Kirby_updateState+0x70>
	} else if (kirby->previousState == FLOATING_DOWN && Kirby_isOnGround(kirby->yPos, GROUND_HEIGHT)) {
 8000618:	7ba3      	ldrb	r3, [r4, #14]
 800061a:	2b06      	cmp	r3, #6
 800061c:	d102      	bne.n	8000624 <Kirby_updateState+0x88>
 800061e:	8863      	ldrh	r3, [r4, #2]
 8000620:	2b6e      	cmp	r3, #110	; 0x6e
 8000622:	d0ef      	beq.n	8000604 <Kirby_updateState+0x68>
		if (kirby->hasSwallowed) {
 8000624:	7922      	ldrb	r2, [r4, #4]
	if (inputA) {
 8000626:	b1c5      	cbz	r5, 800065a <Kirby_updateState+0xbe>
		if (kirby->hasSwallowed && !(kirby->isFloating)) {
 8000628:	b132      	cbz	r2, 8000638 <Kirby_updateState+0x9c>
 800062a:	7963      	ldrb	r3, [r4, #5]
 800062c:	b923      	cbnz	r3, 8000638 <Kirby_updateState+0x9c>
			kirby->state = SWALLOWED_JUMP;
 800062e:	2204      	movs	r2, #4
 8000630:	7262      	strb	r2, [r4, #9]
			kirby->enableUp = 1;
 8000632:	2201      	movs	r2, #1
 8000634:	71a2      	strb	r2, [r4, #6]
 8000636:	e7e8      	b.n	800060a <Kirby_updateState+0x6e>
		} else if (Kirby_isOnGround(kirby->yPos, GROUND_HEIGHT)) {
 8000638:	8863      	ldrh	r3, [r4, #2]
 800063a:	2b6e      	cmp	r3, #110	; 0x6e
 800063c:	d105      	bne.n	800064a <Kirby_updateState+0xae>
			kirby->state = JUMPING;
 800063e:	2302      	movs	r3, #2
 8000640:	7263      	strb	r3, [r4, #9]
			kirby->enableUp = 1;
 8000642:	2301      	movs	r3, #1
 8000644:	71a3      	strb	r3, [r4, #6]
			kirby->enableStateChange = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	e7df      	b.n	800060a <Kirby_updateState+0x6e>
			kirby->state = FLOATING_UP;
 800064a:	2303      	movs	r3, #3
 800064c:	7263      	strb	r3, [r4, #9]
			kirby->hasSwallowed = 1;
 800064e:	f240 1301 	movw	r3, #257	; 0x101
 8000652:	80a3      	strh	r3, [r4, #4]
			kirby->enableUp = 1;
 8000654:	2301      	movs	r3, #1
 8000656:	71a3      	strb	r3, [r4, #6]
 8000658:	e7d8      	b.n	800060c <Kirby_updateState+0x70>
	if (Kirby_isOnGround(kirby->yPos, GROUND_HEIGHT)) {
 800065a:	8863      	ldrh	r3, [r4, #2]
		kirby->enableUp = 0;
 800065c:	71a5      	strb	r5, [r4, #6]
	if (Kirby_isOnGround(kirby->yPos, GROUND_HEIGHT)) {
 800065e:	2b6e      	cmp	r3, #110	; 0x6e
 8000660:	d106      	bne.n	8000670 <Kirby_updateState+0xd4>
	if (inputLeft || inputRight) {
 8000662:	ea56 0308 	orrs.w	r3, r6, r8
		kirby->isFloating = 0;
 8000666:	7165      	strb	r5, [r4, #5]
	if (inputLeft || inputRight) {
 8000668:	d00d      	beq.n	8000686 <Kirby_updateState+0xea>
		if (kirby->hasSwallowed) {
 800066a:	b152      	cbz	r2, 8000682 <Kirby_updateState+0xe6>
			kirby->state = SWALLOWED_WALK;
 800066c:	2309      	movs	r3, #9
 800066e:	e7d1      	b.n	8000614 <Kirby_updateState+0x78>
		if (kirby->hasSwallowed == 0) {
 8000670:	b90a      	cbnz	r2, 8000676 <Kirby_updateState+0xda>
			kirby->state = FALLING;
 8000672:	2305      	movs	r3, #5
 8000674:	e7ce      	b.n	8000614 <Kirby_updateState+0x78>
		} else if (kirby->isFloating) {
 8000676:	7963      	ldrb	r3, [r4, #5]
 8000678:	b10b      	cbz	r3, 800067e <Kirby_updateState+0xe2>
			kirby->state = FLOATING_DOWN;
 800067a:	2306      	movs	r3, #6
 800067c:	e7ca      	b.n	8000614 <Kirby_updateState+0x78>
			kirby->state = SWALLOWED_FALL;
 800067e:	2307      	movs	r3, #7
 8000680:	e7c8      	b.n	8000614 <Kirby_updateState+0x78>
			kirby->state = WALKING;
 8000682:	2308      	movs	r3, #8
 8000684:	e7c6      	b.n	8000614 <Kirby_updateState+0x78>
	if (kirby->hasSwallowed) {
 8000686:	b10a      	cbz	r2, 800068c <Kirby_updateState+0xf0>
		kirby->state = SWALLOWED_IDLE;
 8000688:	230b      	movs	r3, #11
 800068a:	e7c3      	b.n	8000614 <Kirby_updateState+0x78>
		kirby->state = IDLE;
 800068c:	230a      	movs	r3, #10
 800068e:	e7c1      	b.n	8000614 <Kirby_updateState+0x78>
 8000690:	0805c984 	.word	0x0805c984

08000694 <Kirby_moveX>:

void Kirby_moveX(struct Kirby* kirby, enum Direction direction) {
 8000694:	b510      	push	{r4, lr}
	/* Sets enableX */
	if (kirby->state == SPITTING || kirby->state == SWALLOWING) {
 8000696:	7a43      	ldrb	r3, [r0, #9]
void Kirby_moveX(struct Kirby* kirby, enum Direction direction) {
 8000698:	4604      	mov	r4, r0
	if (kirby->state == SPITTING || kirby->state == SWALLOWING) {
 800069a:	2b01      	cmp	r3, #1
 800069c:	bf8c      	ite	hi
 800069e:	2301      	movhi	r3, #1
 80006a0:	2300      	movls	r3, #0
 80006a2:	71c3      	strb	r3, [r0, #7]
		kirby->enableX = 0;
	} else {
		kirby->enableX = 1;
	}

	if (kirby->enableX) {
 80006a4:	d912      	bls.n	80006cc <Kirby_moveX+0x38>
		kirby->direction = direction;
		if (direction == LEFT) {
 80006a6:	2901      	cmp	r1, #1
		kirby->direction = direction;
 80006a8:	7201      	strb	r1, [r0, #8]
		if (direction == LEFT) {
 80006aa:	d110      	bne.n	80006ce <Kirby_moveX+0x3a>
			Kirby_redrawColumnRight(kirby);
 80006ac:	f7ff fe48 	bl	8000340 <Kirby_redrawColumnRight>
			if (kirby->xPos > 0) {
 80006b0:	8820      	ldrh	r0, [r4, #0]
 80006b2:	b158      	cbz	r0, 80006cc <Kirby_moveX+0x38>
				if (kirby->xPos > 160 && kirby->xPos < 696) {
 80006b4:	f240 2216 	movw	r2, #534	; 0x216
 80006b8:	f1a0 03a1 	sub.w	r3, r0, #161	; 0xa1
 80006bc:	b29b      	uxth	r3, r3
 80006be:	4293      	cmp	r3, r2
 80006c0:	d801      	bhi.n	80006c6 <Kirby_moveX+0x32>
				  Kirby_movePlatform(kirby->xPos);
 80006c2:	f7ff fdaf 	bl	8000224 <Kirby_movePlatform>
				}
				kirby->xPos--;
 80006c6:	8823      	ldrh	r3, [r4, #0]
 80006c8:	3b01      	subs	r3, #1
			Kirby_redrawColumnLeft(kirby);
			if (kirby->xPos < 829) {
			  if (kirby->xPos > 160 && kirby->xPos < 696) {
				  Kirby_movePlatform(kirby->xPos);
			  }
			  kirby->xPos++;
 80006ca:	8023      	strh	r3, [r4, #0]
			}
		}
	}
}
 80006cc:	bd10      	pop	{r4, pc}
		} else if (direction == RIGHT) {
 80006ce:	2900      	cmp	r1, #0
 80006d0:	d1fc      	bne.n	80006cc <Kirby_moveX+0x38>
			Kirby_redrawColumnLeft(kirby);
 80006d2:	f7ff fe15 	bl	8000300 <Kirby_redrawColumnLeft>
			if (kirby->xPos < 829) {
 80006d6:	8820      	ldrh	r0, [r4, #0]
 80006d8:	f5b0 7f4f 	cmp.w	r0, #828	; 0x33c
 80006dc:	d8f6      	bhi.n	80006cc <Kirby_moveX+0x38>
			  if (kirby->xPos > 160 && kirby->xPos < 696) {
 80006de:	f240 2216 	movw	r2, #534	; 0x216
 80006e2:	f1a0 03a1 	sub.w	r3, r0, #161	; 0xa1
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d801      	bhi.n	80006f0 <Kirby_moveX+0x5c>
				  Kirby_movePlatform(kirby->xPos);
 80006ec:	f7ff fd9a 	bl	8000224 <Kirby_movePlatform>
			  kirby->xPos++;
 80006f0:	8823      	ldrh	r3, [r4, #0]
 80006f2:	3301      	adds	r3, #1
 80006f4:	e7e9      	b.n	80006ca <Kirby_moveX+0x36>

080006f6 <Kirby_moveY>:

void Kirby_moveY(struct Kirby* kirby) {
 80006f6:	b510      	push	{r4, lr}
 80006f8:	4604      	mov	r4, r0
	if (Kirby_isFalling(kirby)) {
 80006fa:	f7ff ff45 	bl	8000588 <Kirby_isFalling>
 80006fe:	b140      	cbz	r0, 8000712 <Kirby_moveY+0x1c>
		Kirby_redrawRowUp(kirby);
 8000700:	4620      	mov	r0, r4
 8000702:	f7ff fe3f 	bl	8000384 <Kirby_redrawRowUp>
		if (kirby->yPos < GROUND_HEIGHT) {
 8000706:	8863      	ldrh	r3, [r4, #2]
 8000708:	2b8d      	cmp	r3, #141	; 0x8d
 800070a:	d801      	bhi.n	8000710 <Kirby_moveY+0x1a>
			kirby->yPos++;
 800070c:	3301      	adds	r3, #1
		}
	} else if (kirby->enableUp) {
		Kirby_redrawRowDown(kirby);
		if (kirby->yPos > 0) {
			kirby->yPos--;
 800070e:	8063      	strh	r3, [r4, #2]
		}
	}
}
 8000710:	bd10      	pop	{r4, pc}
	} else if (kirby->enableUp) {
 8000712:	79a3      	ldrb	r3, [r4, #6]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d0fb      	beq.n	8000710 <Kirby_moveY+0x1a>
		Kirby_redrawRowDown(kirby);
 8000718:	4620      	mov	r0, r4
 800071a:	f7ff fe53 	bl	80003c4 <Kirby_redrawRowDown>
		if (kirby->yPos > 0) {
 800071e:	8863      	ldrh	r3, [r4, #2]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d0f5      	beq.n	8000710 <Kirby_moveY+0x1a>
			kirby->yPos--;
 8000724:	3b01      	subs	r3, #1
 8000726:	e7f2      	b.n	800070e <Kirby_moveY+0x18>

08000728 <Kirby_renderSprite>:
	uint8_t spriteWidth = 0;
	uint8_t spriteHeight = 0;
	uint8_t spriteOffset = 0;

	// Displays state
	LCD_Clear(10, 210, 100, 20, 0xFFFF);
 8000728:	f64f 73ff 	movw	r3, #65535	; 0xffff
void Kirby_renderSprite(struct Kirby* kirby) {
 800072c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	enum State currentState = kirby->state;
 8000730:	7a45      	ldrb	r5, [r0, #9]
void Kirby_renderSprite(struct Kirby* kirby) {
 8000732:	b087      	sub	sp, #28
	enum Direction direction = kirby->direction;
 8000734:	f890 8008 	ldrb.w	r8, [r0, #8]
	enum State previousState = kirby->previousState;
 8000738:	f890 900e 	ldrb.w	r9, [r0, #14]
	uint16_t xPos = kirby->xPos;
 800073c:	8806      	ldrh	r6, [r0, #0]
	uint16_t yPos = kirby->yPos;
 800073e:	8847      	ldrh	r7, [r0, #2]
void Kirby_renderSprite(struct Kirby* kirby) {
 8000740:	4604      	mov	r4, r0
	LCD_Clear(10, 210, 100, 20, 0xFFFF);
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	2264      	movs	r2, #100	; 0x64
 8000746:	2314      	movs	r3, #20
 8000748:	21d2      	movs	r1, #210	; 0xd2
 800074a:	200a      	movs	r0, #10
 800074c:	f000 fb0e 	bl	8000d6c <LCD_Clear>
	char buffer[10];
	if (currentState == IDLE) {
 8000750:	2d0a      	cmp	r5, #10
 8000752:	d11e      	bne.n	8000792 <Kirby_renderSprite+0x6a>
		sprintf(buffer, "%s", "IDLE");
 8000754:	498a      	ldr	r1, [pc, #552]	; (8000980 <Kirby_renderSprite+0x258>)
	} else if (currentState == SWALLOWED_JUMP) {
		sprintf(buffer, "%s", "SW_JUMP");
	} else if (currentState == SWALLOWED_FALL) {
		sprintf(buffer, "%s", "SW_FALL");
	} else {
		sprintf(buffer, "%s", "Unacc.");
 8000756:	a803      	add	r0, sp, #12
 8000758:	f001 fc8c 	bl	8002074 <strcpy>
	}
	LCD_DrawString(200, 210, buffer);
 800075c:	21d2      	movs	r1, #210	; 0xd2
 800075e:	20c8      	movs	r0, #200	; 0xc8
 8000760:	aa03      	add	r2, sp, #12
 8000762:	f000 fb57 	bl	8000e14 <LCD_DrawString>
	uint8_t fallingTicks = 1;
	uint8_t spittingTicks = 1;
	uint8_t swallowedTicks = 2;
	uint8_t swallowingTicks = 1;

	if (previousState != currentState) {
 8000766:	454d      	cmp	r5, r9
 8000768:	d008      	beq.n	800077c <Kirby_renderSprite+0x54>
		*currentFrame = 0;
 800076a:	2300      	movs	r3, #0
		Kirby_eraseSprite(kirby);
 800076c:	4620      	mov	r0, r4
		*currentFrame = 0;
 800076e:	72a3      	strb	r3, [r4, #10]
		Kirby_eraseSprite(kirby);
 8000770:	f7ff fe4a 	bl	8000408 <Kirby_eraseSprite>

		/* Initializes remaining ticks based on states */
		if (currentState == IDLE) {
 8000774:	2d0a      	cmp	r5, #10
 8000776:	d13a      	bne.n	80007ee <Kirby_renderSprite+0xc6>
			*remainingTicks = 250;
 8000778:	23fa      	movs	r3, #250	; 0xfa
		} else if (currentState == FLOATING_UP) {
			*remainingTicks = floatingTicks;
		} else if (currentState == FLOATING_DOWN) {
			*remainingTicks = floatingTicks;
		} else if (currentState == JUMPING) {
			*remainingTicks = jumpingTicks;
 800077a:	81a3      	strh	r3, [r4, #12]
			*remainingTicks = swallowedTicks;
		}
	}

	/* Renders sprite based on states */
	uint16_t* sprite = idleKeyframes[0];
 800077c:	4b81      	ldr	r3, [pc, #516]	; (8000984 <Kirby_renderSprite+0x25c>)

	if (currentState == IDLE) {
 800077e:	2d0a      	cmp	r5, #10
	uint16_t* sprite = idleKeyframes[0];
 8000780:	681b      	ldr	r3, [r3, #0]
	if (currentState == IDLE) {
 8000782:	d150      	bne.n	8000826 <Kirby_renderSprite+0xfe>
//				*remainingTicks = 50;
//			}
//		}
		// Sets sprite and decrease remaining ticks
		sprite = idleKeyframes[0];
		spriteWidth = IDLE_WIDTH;
 8000784:	4a80      	ldr	r2, [pc, #512]	; (8000988 <Kirby_renderSprite+0x260>)
 8000786:	7810      	ldrb	r0, [r2, #0]
		spriteHeight = IDLE_HEIGHT;
 8000788:	4a80      	ldr	r2, [pc, #512]	; (800098c <Kirby_renderSprite+0x264>)
 800078a:	7811      	ldrb	r1, [r2, #0]
		spriteOffset = IDLE_OFFSET;
 800078c:	4a80      	ldr	r2, [pc, #512]	; (8000990 <Kirby_renderSprite+0x268>)
		// Sets sprite and decreases remaining ticks
		sprite = swallowingKeyframes[*currentFrame];
		*remainingTicks = *remainingTicks - 1;
		spriteWidth = SWALLOWING_WIDTH;
		spriteHeight = SWALLOWING_HEIGHT;
		spriteOffset = SWALLOWING_OFFSET;
 800078e:	7812      	ldrb	r2, [r2, #0]
 8000790:	e09e      	b.n	80008d0 <Kirby_renderSprite+0x1a8>
	} else if (currentState == WALKING) {
 8000792:	2d08      	cmp	r5, #8
 8000794:	d101      	bne.n	800079a <Kirby_renderSprite+0x72>
		sprintf(buffer, "%s", "WALK");
 8000796:	497f      	ldr	r1, [pc, #508]	; (8000994 <Kirby_renderSprite+0x26c>)
 8000798:	e7dd      	b.n	8000756 <Kirby_renderSprite+0x2e>
	} else if (currentState == FLOATING_UP) {
 800079a:	2d03      	cmp	r5, #3
 800079c:	d101      	bne.n	80007a2 <Kirby_renderSprite+0x7a>
		sprintf(buffer, "%s", "FL_UP");
 800079e:	497e      	ldr	r1, [pc, #504]	; (8000998 <Kirby_renderSprite+0x270>)
 80007a0:	e7d9      	b.n	8000756 <Kirby_renderSprite+0x2e>
	} else if (currentState == FLOATING_DOWN) {
 80007a2:	2d06      	cmp	r5, #6
 80007a4:	d101      	bne.n	80007aa <Kirby_renderSprite+0x82>
		sprintf(buffer, "%s", "FL_DN");
 80007a6:	497d      	ldr	r1, [pc, #500]	; (800099c <Kirby_renderSprite+0x274>)
 80007a8:	e7d5      	b.n	8000756 <Kirby_renderSprite+0x2e>
	} else if (currentState == SPITTING) {
 80007aa:	b90d      	cbnz	r5, 80007b0 <Kirby_renderSprite+0x88>
		sprintf(buffer, "%s", "SPIT");
 80007ac:	497c      	ldr	r1, [pc, #496]	; (80009a0 <Kirby_renderSprite+0x278>)
 80007ae:	e7d2      	b.n	8000756 <Kirby_renderSprite+0x2e>
	} else if (currentState == SWALLOWED_IDLE) {
 80007b0:	2d0b      	cmp	r5, #11
 80007b2:	d101      	bne.n	80007b8 <Kirby_renderSprite+0x90>
		sprintf(buffer, "%s", "SW_IDLE");
 80007b4:	497b      	ldr	r1, [pc, #492]	; (80009a4 <Kirby_renderSprite+0x27c>)
 80007b6:	e7ce      	b.n	8000756 <Kirby_renderSprite+0x2e>
	} else if (currentState == SWALLOWING) {
 80007b8:	2d01      	cmp	r5, #1
 80007ba:	d101      	bne.n	80007c0 <Kirby_renderSprite+0x98>
		sprintf(buffer, "%s", "SWALLOW");
 80007bc:	497a      	ldr	r1, [pc, #488]	; (80009a8 <Kirby_renderSprite+0x280>)
 80007be:	e7ca      	b.n	8000756 <Kirby_renderSprite+0x2e>
	} else if (currentState == SWALLOWED_WALK) {
 80007c0:	2d09      	cmp	r5, #9
 80007c2:	d101      	bne.n	80007c8 <Kirby_renderSprite+0xa0>
		sprintf(buffer, "%s", "SW_WALK");
 80007c4:	4979      	ldr	r1, [pc, #484]	; (80009ac <Kirby_renderSprite+0x284>)
 80007c6:	e7c6      	b.n	8000756 <Kirby_renderSprite+0x2e>
	} else if (currentState == JUMPING) {
 80007c8:	2d02      	cmp	r5, #2
 80007ca:	d101      	bne.n	80007d0 <Kirby_renderSprite+0xa8>
		sprintf(buffer, "%s", "JUMP");
 80007cc:	4978      	ldr	r1, [pc, #480]	; (80009b0 <Kirby_renderSprite+0x288>)
 80007ce:	e7c2      	b.n	8000756 <Kirby_renderSprite+0x2e>
	} else if (currentState == FALLING) {
 80007d0:	2d05      	cmp	r5, #5
 80007d2:	d101      	bne.n	80007d8 <Kirby_renderSprite+0xb0>
		sprintf(buffer, "%s", "FALL");
 80007d4:	4977      	ldr	r1, [pc, #476]	; (80009b4 <Kirby_renderSprite+0x28c>)
 80007d6:	e7be      	b.n	8000756 <Kirby_renderSprite+0x2e>
	} else if (currentState == SWALLOWED_JUMP) {
 80007d8:	2d04      	cmp	r5, #4
 80007da:	d101      	bne.n	80007e0 <Kirby_renderSprite+0xb8>
		sprintf(buffer, "%s", "SW_JUMP");
 80007dc:	4976      	ldr	r1, [pc, #472]	; (80009b8 <Kirby_renderSprite+0x290>)
 80007de:	e7ba      	b.n	8000756 <Kirby_renderSprite+0x2e>
	} else if (currentState == SWALLOWED_FALL) {
 80007e0:	2d07      	cmp	r5, #7
		sprintf(buffer, "%s", "SW_FALL");
 80007e2:	bf0c      	ite	eq
 80007e4:	4975      	ldreq	r1, [pc, #468]	; (80009bc <Kirby_renderSprite+0x294>)
		sprintf(buffer, "%s", "Unacc.");
 80007e6:	4976      	ldrne	r1, [pc, #472]	; (80009c0 <Kirby_renderSprite+0x298>)
 80007e8:	e7b5      	b.n	8000756 <Kirby_renderSprite+0x2e>
			*remainingTicks = walkingTicks;
 80007ea:	2301      	movs	r3, #1
 80007ec:	e7c5      	b.n	800077a <Kirby_renderSprite+0x52>
		} else if (currentState == FLOATING_UP) {
 80007ee:	2d08      	cmp	r5, #8
 80007f0:	d804      	bhi.n	80007fc <Kirby_renderSprite+0xd4>
 80007f2:	f44f 73a4 	mov.w	r3, #328	; 0x148
 80007f6:	40eb      	lsrs	r3, r5
 80007f8:	07db      	lsls	r3, r3, #31
 80007fa:	d4f6      	bmi.n	80007ea <Kirby_renderSprite+0xc2>
		} else if (currentState == JUMPING) {
 80007fc:	2d02      	cmp	r5, #2
 80007fe:	d101      	bne.n	8000804 <Kirby_renderSprite+0xdc>
			*remainingTicks = jumpingTicks;
 8000800:	230a      	movs	r3, #10
 8000802:	e7ba      	b.n	800077a <Kirby_renderSprite+0x52>
		} else if (currentState == FALLING) {
 8000804:	2d05      	cmp	r5, #5
 8000806:	d0f0      	beq.n	80007ea <Kirby_renderSprite+0xc2>
		} else if (currentState == SPITTING) {
 8000808:	2d00      	cmp	r5, #0
 800080a:	d0ee      	beq.n	80007ea <Kirby_renderSprite+0xc2>
		} else if (currentState == SWALLOWED_IDLE) {
 800080c:	2d0b      	cmp	r5, #11
 800080e:	d0b3      	beq.n	8000778 <Kirby_renderSprite+0x50>
		} else if (currentState == SWALLOWED_JUMP) {
 8000810:	2d04      	cmp	r5, #4
 8000812:	d0f5      	beq.n	8000800 <Kirby_renderSprite+0xd8>
		} else if (currentState == SWALLOWED_FALL) {
 8000814:	2d07      	cmp	r5, #7
 8000816:	d101      	bne.n	800081c <Kirby_renderSprite+0xf4>
			*remainingTicks = swallowedTicks;
 8000818:	2302      	movs	r3, #2
 800081a:	e7ae      	b.n	800077a <Kirby_renderSprite+0x52>
		} else if (currentState == SWALLOWING) {
 800081c:	2d01      	cmp	r5, #1
 800081e:	d0e4      	beq.n	80007ea <Kirby_renderSprite+0xc2>
		} else if (currentState == SWALLOWED_WALK) {
 8000820:	2d09      	cmp	r5, #9
 8000822:	d1ab      	bne.n	800077c <Kirby_renderSprite+0x54>
 8000824:	e7f8      	b.n	8000818 <Kirby_renderSprite+0xf0>
	} else if (currentState == WALKING) {
 8000826:	2d08      	cmp	r5, #8
 8000828:	d119      	bne.n	800085e <Kirby_renderSprite+0x136>
		if (*remainingTicks == 0) {
 800082a:	89a3      	ldrh	r3, [r4, #12]
 800082c:	b953      	cbnz	r3, 8000844 <Kirby_renderSprite+0x11c>
			*currentFrame = (*currentFrame + 1) % 5;
 800082e:	2205      	movs	r2, #5
 8000830:	7aa3      	ldrb	r3, [r4, #10]
 8000832:	3301      	adds	r3, #1
 8000834:	fbb3 f2f2 	udiv	r2, r3, r2
 8000838:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800083c:	1a9b      	subs	r3, r3, r2
 800083e:	72a3      	strb	r3, [r4, #10]
			*remainingTicks = walkingTicks;
 8000840:	2301      	movs	r3, #1
 8000842:	81a3      	strh	r3, [r4, #12]
		sprite = walkingKeyframes[*currentFrame];
 8000844:	7aa2      	ldrb	r2, [r4, #10]
 8000846:	4b5f      	ldr	r3, [pc, #380]	; (80009c4 <Kirby_renderSprite+0x29c>)
 8000848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
		*remainingTicks = *remainingTicks - 1;
 800084c:	89a2      	ldrh	r2, [r4, #12]
 800084e:	3a01      	subs	r2, #1
 8000850:	81a2      	strh	r2, [r4, #12]
		spriteWidth = WALKING_WIDTH;
 8000852:	4a5d      	ldr	r2, [pc, #372]	; (80009c8 <Kirby_renderSprite+0x2a0>)
 8000854:	7810      	ldrb	r0, [r2, #0]
		spriteHeight = WALKING_HEIGHT;
 8000856:	4a5d      	ldr	r2, [pc, #372]	; (80009cc <Kirby_renderSprite+0x2a4>)
 8000858:	7811      	ldrb	r1, [r2, #0]
		spriteOffset = WALKING_OFFSET;
 800085a:	4a5d      	ldr	r2, [pc, #372]	; (80009d0 <Kirby_renderSprite+0x2a8>)
 800085c:	e797      	b.n	800078e <Kirby_renderSprite+0x66>
	} else if (currentState == FLOATING_UP) {
 800085e:	2d03      	cmp	r5, #3
 8000860:	d118      	bne.n	8000894 <Kirby_renderSprite+0x16c>
		if (*remainingTicks == 0) {
 8000862:	89a3      	ldrh	r3, [r4, #12]
 8000864:	b94b      	cbnz	r3, 800087a <Kirby_renderSprite+0x152>
			*currentFrame = (*currentFrame + 1) % 3;
 8000866:	7aa3      	ldrb	r3, [r4, #10]
 8000868:	3301      	adds	r3, #1
 800086a:	fbb3 f5f5 	udiv	r5, r3, r5
 800086e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000872:	1b5b      	subs	r3, r3, r5
 8000874:	72a3      	strb	r3, [r4, #10]
			*remainingTicks = floatingTicks;
 8000876:	2301      	movs	r3, #1
 8000878:	81a3      	strh	r3, [r4, #12]
		sprite = floatingUpKeyframes[*currentFrame];
 800087a:	7aa2      	ldrb	r2, [r4, #10]
 800087c:	4b55      	ldr	r3, [pc, #340]	; (80009d4 <Kirby_renderSprite+0x2ac>)
 800087e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
		*remainingTicks = *remainingTicks - 1;
 8000882:	89a2      	ldrh	r2, [r4, #12]
 8000884:	3a01      	subs	r2, #1
 8000886:	81a2      	strh	r2, [r4, #12]
		spriteWidth = FLOATING_UP_WIDTH;
 8000888:	4a53      	ldr	r2, [pc, #332]	; (80009d8 <Kirby_renderSprite+0x2b0>)
 800088a:	7810      	ldrb	r0, [r2, #0]
		spriteHeight = FLOATING_UP_HEIGHT;
 800088c:	4a53      	ldr	r2, [pc, #332]	; (80009dc <Kirby_renderSprite+0x2b4>)
 800088e:	7811      	ldrb	r1, [r2, #0]
		spriteOffset = FLOATING_UP_OFFSET;
 8000890:	4a53      	ldr	r2, [pc, #332]	; (80009e0 <Kirby_renderSprite+0x2b8>)
 8000892:	e77c      	b.n	800078e <Kirby_renderSprite+0x66>
	} else if (currentState == FLOATING_DOWN) {
 8000894:	2d06      	cmp	r5, #6
 8000896:	d107      	bne.n	80008a8 <Kirby_renderSprite+0x180>
		spriteWidth = FLOATING_DOWN_WIDTH;
 8000898:	4a52      	ldr	r2, [pc, #328]	; (80009e4 <Kirby_renderSprite+0x2bc>)
		sprite = floatingDownKeyframes[0];
 800089a:	4b53      	ldr	r3, [pc, #332]	; (80009e8 <Kirby_renderSprite+0x2c0>)
		spriteWidth = FLOATING_DOWN_WIDTH;
 800089c:	7810      	ldrb	r0, [r2, #0]
		spriteHeight = FLOATING_DOWN_HEIGHT;
 800089e:	4a53      	ldr	r2, [pc, #332]	; (80009ec <Kirby_renderSprite+0x2c4>)
		sprite = floatingDownKeyframes[0];
 80008a0:	681b      	ldr	r3, [r3, #0]
		spriteHeight = FLOATING_DOWN_HEIGHT;
 80008a2:	7811      	ldrb	r1, [r2, #0]
		spriteOffset = FLOATING_DOWN_OFFSET;
 80008a4:	4a52      	ldr	r2, [pc, #328]	; (80009f0 <Kirby_renderSprite+0x2c8>)
 80008a6:	e772      	b.n	800078e <Kirby_renderSprite+0x66>
	} else if (currentState == JUMPING) {
 80008a8:	2d02      	cmp	r5, #2
 80008aa:	d11c      	bne.n	80008e6 <Kirby_renderSprite+0x1be>
		if (*remainingTicks == 0) {
 80008ac:	89a5      	ldrh	r5, [r4, #12]
 80008ae:	b915      	cbnz	r5, 80008b6 <Kirby_renderSprite+0x18e>
			*enableStateChange = 1;
 80008b0:	2301      	movs	r3, #1
			*enableUp = 0;
 80008b2:	71a5      	strb	r5, [r4, #6]
			*enableStateChange = 1;
 80008b4:	73e3      	strb	r3, [r4, #15]
		sprite = jumpingKeyframes[*currentFrame];
 80008b6:	7aa2      	ldrb	r2, [r4, #10]
 80008b8:	4b4e      	ldr	r3, [pc, #312]	; (80009f4 <Kirby_renderSprite+0x2cc>)
 80008ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
		spriteWidth = JUMPING_WIDTH;
 80008be:	4a4e      	ldr	r2, [pc, #312]	; (80009f8 <Kirby_renderSprite+0x2d0>)
 80008c0:	7810      	ldrb	r0, [r2, #0]
		spriteHeight = JUMPING_HEIGHT;
 80008c2:	4a4e      	ldr	r2, [pc, #312]	; (80009fc <Kirby_renderSprite+0x2d4>)
 80008c4:	7811      	ldrb	r1, [r2, #0]
		spriteOffset = JUMPING_OFFSET;
 80008c6:	4a4e      	ldr	r2, [pc, #312]	; (8000a00 <Kirby_renderSprite+0x2d8>)
		spriteOffset = SWALLOWED_JUMP_OFFSET;
 80008c8:	7812      	ldrb	r2, [r2, #0]
		if (*remainingTicks > 0) {
 80008ca:	b10d      	cbz	r5, 80008d0 <Kirby_renderSprite+0x1a8>
			*remainingTicks = *remainingTicks - 1;
 80008cc:	3d01      	subs	r5, #1
 80008ce:	81a5      	strh	r5, [r4, #12]
	}

	if (direction == LEFT) {
 80008d0:	f1b8 0f01 	cmp.w	r8, #1
		Kirby_displayKirbyFacingLeft(spriteWidth, spriteHeight, spriteOffset, sprite, xPos, yPos);
 80008d4:	e9cd 6700 	strd	r6, r7, [sp]
	if (direction == LEFT) {
 80008d8:	f040 8102 	bne.w	8000ae0 <Kirby_renderSprite+0x3b8>
		Kirby_displayKirbyFacingLeft(spriteWidth, spriteHeight, spriteOffset, sprite, xPos, yPos);
 80008dc:	f7ff fe06 	bl	80004ec <Kirby_displayKirbyFacingLeft>
	} else {
		Kirby_displayKirbyFacingRight(spriteWidth, spriteHeight, spriteOffset, sprite, xPos, yPos);
	}
}
 80008e0:	b007      	add	sp, #28
 80008e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (currentState == FALLING) {
 80008e6:	2d05      	cmp	r5, #5
 80008e8:	d115      	bne.n	8000916 <Kirby_renderSprite+0x1ee>
		if (*remainingTicks == 0) {
 80008ea:	89a3      	ldrh	r3, [r4, #12]
 80008ec:	b933      	cbnz	r3, 80008fc <Kirby_renderSprite+0x1d4>
			*currentFrame = (*currentFrame + 1) % 5;
 80008ee:	7aa3      	ldrb	r3, [r4, #10]
			if (*currentFrame < 3) {
 80008f0:	2b02      	cmp	r3, #2
				*currentFrame = *currentFrame + 1;
 80008f2:	bf9c      	itt	ls
 80008f4:	3301      	addls	r3, #1
 80008f6:	72a3      	strbls	r3, [r4, #10]
			*remainingTicks = fallingTicks;
 80008f8:	2301      	movs	r3, #1
 80008fa:	81a3      	strh	r3, [r4, #12]
		sprite = fallingKeyframes[*currentFrame];
 80008fc:	7aa2      	ldrb	r2, [r4, #10]
 80008fe:	4b41      	ldr	r3, [pc, #260]	; (8000a04 <Kirby_renderSprite+0x2dc>)
 8000900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
		*remainingTicks = *remainingTicks - 1;
 8000904:	89a2      	ldrh	r2, [r4, #12]
 8000906:	3a01      	subs	r2, #1
 8000908:	81a2      	strh	r2, [r4, #12]
		spriteWidth = FALLING_WIDTH;
 800090a:	4a3f      	ldr	r2, [pc, #252]	; (8000a08 <Kirby_renderSprite+0x2e0>)
 800090c:	7810      	ldrb	r0, [r2, #0]
		spriteHeight = FALLING_HEIGHT;
 800090e:	4a3f      	ldr	r2, [pc, #252]	; (8000a0c <Kirby_renderSprite+0x2e4>)
 8000910:	7811      	ldrb	r1, [r2, #0]
		spriteOffset = FALLING_OFFSET;
 8000912:	4a3f      	ldr	r2, [pc, #252]	; (8000a10 <Kirby_renderSprite+0x2e8>)
 8000914:	e73b      	b.n	800078e <Kirby_renderSprite+0x66>
	} else if (currentState == SPITTING) {
 8000916:	b9b5      	cbnz	r5, 8000946 <Kirby_renderSprite+0x21e>
		if (*remainingTicks == 0) {
 8000918:	89a3      	ldrh	r3, [r4, #12]
 800091a:	b93b      	cbnz	r3, 800092c <Kirby_renderSprite+0x204>
 800091c:	2201      	movs	r2, #1
			*currentFrame = (*currentFrame + 1) % 5;
 800091e:	7aa3      	ldrb	r3, [r4, #10]
			*remainingTicks = spittingTicks;
 8000920:	81a2      	strh	r2, [r4, #12]
			if (*currentFrame < 2) {
 8000922:	2b01      	cmp	r3, #1
				*currentFrame = *currentFrame + 1;
 8000924:	bf9a      	itte	ls
 8000926:	189b      	addls	r3, r3, r2
 8000928:	72a3      	strbls	r3, [r4, #10]
				*enableStateChange = 1;
 800092a:	73e2      	strbhi	r2, [r4, #15]
		sprite = spittingKeyframes[*currentFrame];
 800092c:	7aa2      	ldrb	r2, [r4, #10]
 800092e:	4b39      	ldr	r3, [pc, #228]	; (8000a14 <Kirby_renderSprite+0x2ec>)
 8000930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
		*remainingTicks = *remainingTicks - 1;
 8000934:	89a2      	ldrh	r2, [r4, #12]
 8000936:	3a01      	subs	r2, #1
 8000938:	81a2      	strh	r2, [r4, #12]
		spriteWidth = SPITTING_WIDTH;
 800093a:	4a37      	ldr	r2, [pc, #220]	; (8000a18 <Kirby_renderSprite+0x2f0>)
 800093c:	7810      	ldrb	r0, [r2, #0]
		spriteHeight = SPITTING_HEIGHT;
 800093e:	4a37      	ldr	r2, [pc, #220]	; (8000a1c <Kirby_renderSprite+0x2f4>)
 8000940:	7811      	ldrb	r1, [r2, #0]
		spriteOffset = SPITTING_OFFSET;
 8000942:	4a37      	ldr	r2, [pc, #220]	; (8000a20 <Kirby_renderSprite+0x2f8>)
 8000944:	e723      	b.n	800078e <Kirby_renderSprite+0x66>
	} else if (currentState == SWALLOWED_IDLE) {
 8000946:	2d0b      	cmp	r5, #11
 8000948:	d10a      	bne.n	8000960 <Kirby_renderSprite+0x238>
		*remainingTicks = *remainingTicks - 1;
 800094a:	89a2      	ldrh	r2, [r4, #12]
		sprite = swallowedIdleKeyframes[0];
 800094c:	4b35      	ldr	r3, [pc, #212]	; (8000a24 <Kirby_renderSprite+0x2fc>)
		*remainingTicks = *remainingTicks - 1;
 800094e:	3a01      	subs	r2, #1
 8000950:	81a2      	strh	r2, [r4, #12]
		spriteWidth = SWALLOWED_IDLE_WIDTH;
 8000952:	4a35      	ldr	r2, [pc, #212]	; (8000a28 <Kirby_renderSprite+0x300>)
		sprite = swallowedIdleKeyframes[0];
 8000954:	681b      	ldr	r3, [r3, #0]
		spriteWidth = SWALLOWED_IDLE_WIDTH;
 8000956:	7810      	ldrb	r0, [r2, #0]
		spriteHeight = SWALLOWED_IDLE_HEIGHT;
 8000958:	4a34      	ldr	r2, [pc, #208]	; (8000a2c <Kirby_renderSprite+0x304>)
 800095a:	7811      	ldrb	r1, [r2, #0]
		spriteOffset = SWALLOWED_IDLE_OFFSET;
 800095c:	4a34      	ldr	r2, [pc, #208]	; (8000a30 <Kirby_renderSprite+0x308>)
 800095e:	e716      	b.n	800078e <Kirby_renderSprite+0x66>
	} else if (currentState == SWALLOWED_JUMP) {
 8000960:	2d04      	cmp	r5, #4
 8000962:	d16f      	bne.n	8000a44 <Kirby_renderSprite+0x31c>
		if (*remainingTicks == 0) {
 8000964:	89a5      	ldrh	r5, [r4, #12]
 8000966:	b91d      	cbnz	r5, 8000970 <Kirby_renderSprite+0x248>
			*enableUp = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	71a3      	strb	r3, [r4, #6]
			*enableStateChange = 1;
 800096c:	2301      	movs	r3, #1
 800096e:	73e3      	strb	r3, [r4, #15]
		spriteWidth = SWALLOWED_JUMP_WIDTH;
 8000970:	4a30      	ldr	r2, [pc, #192]	; (8000a34 <Kirby_renderSprite+0x30c>)
		sprite = swallowedJumpKeyframes[0];
 8000972:	4b31      	ldr	r3, [pc, #196]	; (8000a38 <Kirby_renderSprite+0x310>)
		spriteWidth = SWALLOWED_JUMP_WIDTH;
 8000974:	7810      	ldrb	r0, [r2, #0]
		spriteHeight = SWALLOWED_JUMP_HEIGHT;
 8000976:	4a31      	ldr	r2, [pc, #196]	; (8000a3c <Kirby_renderSprite+0x314>)
		sprite = swallowedJumpKeyframes[0];
 8000978:	681b      	ldr	r3, [r3, #0]
		spriteHeight = SWALLOWED_JUMP_HEIGHT;
 800097a:	7811      	ldrb	r1, [r2, #0]
		spriteOffset = SWALLOWED_JUMP_OFFSET;
 800097c:	4a30      	ldr	r2, [pc, #192]	; (8000a40 <Kirby_renderSprite+0x318>)
 800097e:	e7a3      	b.n	80008c8 <Kirby_renderSprite+0x1a0>
 8000980:	0805c9a4 	.word	0x0805c9a4
 8000984:	2000b810 	.word	0x2000b810
 8000988:	2000000b 	.word	0x2000000b
 800098c:	20000009 	.word	0x20000009
 8000990:	2000000a 	.word	0x2000000a
 8000994:	0805c9b4 	.word	0x0805c9b4
 8000998:	0805c990 	.word	0x0805c990
 800099c:	0805c996 	.word	0x0805c996
 80009a0:	0805c99c 	.word	0x0805c99c
 80009a4:	0805c9a1 	.word	0x0805c9a1
 80009a8:	0805c9a9 	.word	0x0805c9a9
 80009ac:	0805c9b1 	.word	0x0805c9b1
 80009b0:	0805c9bc 	.word	0x0805c9bc
 80009b4:	0805c9c4 	.word	0x0805c9c4
 80009b8:	0805c9b9 	.word	0x0805c9b9
 80009bc:	0805c9c1 	.word	0x0805c9c1
 80009c0:	0805c9c9 	.word	0x0805c9c9
 80009c4:	2000b854 	.word	0x2000b854
 80009c8:	2000b7ec 	.word	0x2000b7ec
 80009cc:	2000b7ea 	.word	0x2000b7ea
 80009d0:	2000b7eb 	.word	0x2000b7eb
 80009d4:	2000b804 	.word	0x2000b804
 80009d8:	20000008 	.word	0x20000008
 80009dc:	20000006 	.word	0x20000006
 80009e0:	20000007 	.word	0x20000007
 80009e4:	20000005 	.word	0x20000005
 80009e8:	2000b800 	.word	0x2000b800
 80009ec:	20000003 	.word	0x20000003
 80009f0:	20000004 	.word	0x20000004
 80009f4:	2000b814 	.word	0x2000b814
 80009f8:	2000000e 	.word	0x2000000e
 80009fc:	2000000c 	.word	0x2000000c
 8000a00:	2000000d 	.word	0x2000000d
 8000a04:	2000b7f0 	.word	0x2000b7f0
 8000a08:	20000002 	.word	0x20000002
 8000a0c:	20000000 	.word	0x20000000
 8000a10:	20000001 	.word	0x20000001
 8000a14:	2000b818 	.word	0x2000b818
 8000a18:	2000b7da 	.word	0x2000b7da
 8000a1c:	2000b7d8 	.word	0x2000b7d8
 8000a20:	2000b7d9 	.word	0x2000b7d9
 8000a24:	2000b830 	.word	0x2000b830
 8000a28:	2000b7e0 	.word	0x2000b7e0
 8000a2c:	2000b7de 	.word	0x2000b7de
 8000a30:	2000b7df 	.word	0x2000b7df
 8000a34:	2000b7e3 	.word	0x2000b7e3
 8000a38:	2000b834 	.word	0x2000b834
 8000a3c:	2000b7e1 	.word	0x2000b7e1
 8000a40:	2000b7e2 	.word	0x2000b7e2
	} else if (currentState == SWALLOWED_FALL) {
 8000a44:	2d07      	cmp	r5, #7
 8000a46:	d115      	bne.n	8000a74 <Kirby_renderSprite+0x34c>
		if (*remainingTicks == 0) {
 8000a48:	89a3      	ldrh	r3, [r4, #12]
 8000a4a:	b933      	cbnz	r3, 8000a5a <Kirby_renderSprite+0x332>
			*currentFrame = (*currentFrame + 1) % 5;
 8000a4c:	7aa3      	ldrb	r3, [r4, #10]
			if (*currentFrame < 2) {
 8000a4e:	2b01      	cmp	r3, #1
				*currentFrame = *currentFrame + 1;
 8000a50:	bf9c      	itt	ls
 8000a52:	3301      	addls	r3, #1
 8000a54:	72a3      	strbls	r3, [r4, #10]
			*remainingTicks = swallowedTicks;
 8000a56:	2302      	movs	r3, #2
 8000a58:	81a3      	strh	r3, [r4, #12]
		sprite = swallowedFallKeyframes[*currentFrame];
 8000a5a:	7aa2      	ldrb	r2, [r4, #10]
 8000a5c:	4b22      	ldr	r3, [pc, #136]	; (8000ae8 <Kirby_renderSprite+0x3c0>)
 8000a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
		*remainingTicks = *remainingTicks - 1;
 8000a62:	89a2      	ldrh	r2, [r4, #12]
 8000a64:	3a01      	subs	r2, #1
 8000a66:	81a2      	strh	r2, [r4, #12]
		spriteWidth = SWALLOWED_FALL_WIDTH;
 8000a68:	4a20      	ldr	r2, [pc, #128]	; (8000aec <Kirby_renderSprite+0x3c4>)
 8000a6a:	7810      	ldrb	r0, [r2, #0]
		spriteHeight = SWALLOWED_FALL_HEIGHT;
 8000a6c:	4a20      	ldr	r2, [pc, #128]	; (8000af0 <Kirby_renderSprite+0x3c8>)
 8000a6e:	7811      	ldrb	r1, [r2, #0]
		spriteOffset = SWALLOWED_FALL_OFFSET;
 8000a70:	4a20      	ldr	r2, [pc, #128]	; (8000af4 <Kirby_renderSprite+0x3cc>)
 8000a72:	e68c      	b.n	800078e <Kirby_renderSprite+0x66>
	} else if (currentState == SWALLOWED_WALK) {
 8000a74:	2d09      	cmp	r5, #9
 8000a76:	d119      	bne.n	8000aac <Kirby_renderSprite+0x384>
		if (*remainingTicks == 0) {
 8000a78:	89a3      	ldrh	r3, [r4, #12]
 8000a7a:	b953      	cbnz	r3, 8000a92 <Kirby_renderSprite+0x36a>
			*currentFrame = (*currentFrame + 1) % 5;
 8000a7c:	2205      	movs	r2, #5
 8000a7e:	7aa3      	ldrb	r3, [r4, #10]
 8000a80:	3301      	adds	r3, #1
 8000a82:	fbb3 f2f2 	udiv	r2, r3, r2
 8000a86:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000a8a:	1a9b      	subs	r3, r3, r2
 8000a8c:	72a3      	strb	r3, [r4, #10]
			*remainingTicks = swallowedTicks;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	81a3      	strh	r3, [r4, #12]
		sprite = swallowedWalkKeyframes[*currentFrame];
 8000a92:	7aa2      	ldrb	r2, [r4, #10]
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <Kirby_renderSprite+0x3d0>)
 8000a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
		*remainingTicks = *remainingTicks - 1;
 8000a9a:	89a2      	ldrh	r2, [r4, #12]
 8000a9c:	3a01      	subs	r2, #1
 8000a9e:	81a2      	strh	r2, [r4, #12]
		spriteWidth = SWALLOWED_WALK_WIDTH;
 8000aa0:	4a16      	ldr	r2, [pc, #88]	; (8000afc <Kirby_renderSprite+0x3d4>)
 8000aa2:	7810      	ldrb	r0, [r2, #0]
		spriteHeight = SWALLOWED_WALK_HEIGHT;
 8000aa4:	4a16      	ldr	r2, [pc, #88]	; (8000b00 <Kirby_renderSprite+0x3d8>)
 8000aa6:	7811      	ldrb	r1, [r2, #0]
		spriteOffset = SWALLOWED_WALK_OFFSET;
 8000aa8:	4a16      	ldr	r2, [pc, #88]	; (8000b04 <Kirby_renderSprite+0x3dc>)
 8000aaa:	e670      	b.n	800078e <Kirby_renderSprite+0x66>
	} else if (currentState == SWALLOWING) {
 8000aac:	2d01      	cmp	r5, #1
 8000aae:	d113      	bne.n	8000ad8 <Kirby_renderSprite+0x3b0>
		if (*remainingTicks == 0) {
 8000ab0:	89a3      	ldrh	r3, [r4, #12]
 8000ab2:	b923      	cbnz	r3, 8000abe <Kirby_renderSprite+0x396>
			if (*currentFrame == 0) {
 8000ab4:	7aa3      	ldrb	r3, [r4, #10]
 8000ab6:	b903      	cbnz	r3, 8000aba <Kirby_renderSprite+0x392>
				*currentFrame = 1;
 8000ab8:	72a5      	strb	r5, [r4, #10]
			*remainingTicks = swallowingTicks;
 8000aba:	2301      	movs	r3, #1
 8000abc:	81a3      	strh	r3, [r4, #12]
		sprite = swallowingKeyframes[*currentFrame];
 8000abe:	7aa2      	ldrb	r2, [r4, #10]
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <Kirby_renderSprite+0x3e0>)
 8000ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
		*remainingTicks = *remainingTicks - 1;
 8000ac6:	89a2      	ldrh	r2, [r4, #12]
 8000ac8:	3a01      	subs	r2, #1
 8000aca:	81a2      	strh	r2, [r4, #12]
		spriteWidth = SWALLOWING_WIDTH;
 8000acc:	4a0f      	ldr	r2, [pc, #60]	; (8000b0c <Kirby_renderSprite+0x3e4>)
 8000ace:	7810      	ldrb	r0, [r2, #0]
		spriteHeight = SWALLOWING_HEIGHT;
 8000ad0:	4a0f      	ldr	r2, [pc, #60]	; (8000b10 <Kirby_renderSprite+0x3e8>)
 8000ad2:	7811      	ldrb	r1, [r2, #0]
		spriteOffset = SWALLOWING_OFFSET;
 8000ad4:	4a0f      	ldr	r2, [pc, #60]	; (8000b14 <Kirby_renderSprite+0x3ec>)
 8000ad6:	e65a      	b.n	800078e <Kirby_renderSprite+0x66>
	uint8_t spriteOffset = 0;
 8000ad8:	2200      	movs	r2, #0
	uint8_t spriteHeight = 0;
 8000ada:	4611      	mov	r1, r2
	uint8_t spriteWidth = 0;
 8000adc:	4610      	mov	r0, r2
 8000ade:	e6f7      	b.n	80008d0 <Kirby_renderSprite+0x1a8>
		Kirby_displayKirbyFacingRight(spriteWidth, spriteHeight, spriteOffset, sprite, xPos, yPos);
 8000ae0:	f7ff fcb8 	bl	8000454 <Kirby_displayKirbyFacingRight>
}
 8000ae4:	e6fc      	b.n	80008e0 <Kirby_renderSprite+0x1b8>
 8000ae6:	bf00      	nop
 8000ae8:	2000b824 	.word	0x2000b824
 8000aec:	2000b7dd 	.word	0x2000b7dd
 8000af0:	2000b7db 	.word	0x2000b7db
 8000af4:	2000b7dc 	.word	0x2000b7dc
 8000af8:	2000b838 	.word	0x2000b838
 8000afc:	2000b7e6 	.word	0x2000b7e6
 8000b00:	2000b7e4 	.word	0x2000b7e4
 8000b04:	2000b7e5 	.word	0x2000b7e5
 8000b08:	2000b84c 	.word	0x2000b84c
 8000b0c:	2000b7e9 	.word	0x2000b7e9
 8000b10:	2000b7e7 	.word	0x2000b7e7
 8000b14:	2000b7e8 	.word	0x2000b7e8

08000b18 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	9001      	str	r0, [sp, #4]
 8000b1c:	9b01      	ldr	r3, [sp, #4]
 8000b1e:	b90b      	cbnz	r3, 8000b24 <Delay+0xc>
 8000b20:	b002      	add	sp, #8
 8000b22:	4770      	bx	lr
 8000b24:	9b01      	ldr	r3, [sp, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	9301      	str	r3, [sp, #4]
 8000b2a:	e7f7      	b.n	8000b1c <Delay+0x4>

08000b2c <LCD_Rst>:
}



void LCD_Rst ( void )
{			
 8000b2c:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000b2e:	4d0a      	ldr	r5, [pc, #40]	; (8000b58 <LCD_Rst+0x2c>)
	Delay ( 0xAFFf<<2 ); 					   
 8000b30:	4c0a      	ldr	r4, [pc, #40]	; (8000b5c <LCD_Rst+0x30>)
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000b32:	4628      	mov	r0, r5
 8000b34:	2200      	movs	r2, #0
 8000b36:	2102      	movs	r1, #2
 8000b38:	f000 ff32 	bl	80019a0 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000b3c:	4620      	mov	r0, r4
 8000b3e:	f7ff ffeb 	bl	8000b18 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000b42:	2201      	movs	r2, #1
 8000b44:	4628      	mov	r0, r5
 8000b46:	2102      	movs	r1, #2
 8000b48:	f000 ff2a 	bl	80019a0 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000b4c:	4620      	mov	r0, r4
}
 8000b4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Delay ( 0xAFFf<<2 ); 	
 8000b52:	f7ff bfe1 	b.w	8000b18 <Delay>
 8000b56:	bf00      	nop
 8000b58:	40011800 	.word	0x40011800
 8000b5c:	0002bffc 	.word	0x0002bffc

08000b60 <LCD_Write_Cmd>:



void LCD_Write_Cmd ( uint16_t usCmd )
{
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000b60:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000b64:	8018      	strh	r0, [r3, #0]
}
 8000b66:	4770      	bx	lr

08000b68 <LCD_Write_Data>:



void LCD_Write_Data ( uint16_t usData )
{
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000b68:	4b01      	ldr	r3, [pc, #4]	; (8000b70 <LCD_Write_Data+0x8>)
 8000b6a:	8018      	strh	r0, [r3, #0]
}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	60020000 	.word	0x60020000

08000b74 <LCD_REG_Config>:
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000b74:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000b78:	23cf      	movs	r3, #207	; 0xcf
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000b7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2081      	movs	r0, #129	; 0x81
 8000b82:	2730      	movs	r7, #48	; 0x30
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000b84:	24ed      	movs	r4, #237	; 0xed
 8000b86:	8013      	strh	r3, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000b88:	4b5c      	ldr	r3, [pc, #368]	; (8000cfc <LCD_REG_Config+0x188>)
 8000b8a:	f04f 0c03 	mov.w	ip, #3
 8000b8e:	8019      	strh	r1, [r3, #0]
 8000b90:	8018      	strh	r0, [r3, #0]
 8000b92:	801f      	strh	r7, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000b94:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000b96:	2464      	movs	r4, #100	; 0x64
 8000b98:	801c      	strh	r4, [r3, #0]
 8000b9a:	2412      	movs	r4, #18
 8000b9c:	f8a3 c000 	strh.w	ip, [r3]
 8000ba0:	801c      	strh	r4, [r3, #0]
 8000ba2:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000ba4:	20e8      	movs	r0, #232	; 0xe8
 8000ba6:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000ba8:	2085      	movs	r0, #133	; 0x85
 8000baa:	f04f 0810 	mov.w	r8, #16
 8000bae:	8018      	strh	r0, [r3, #0]
 8000bb0:	2078      	movs	r0, #120	; 0x78
 8000bb2:	f8a3 8000 	strh.w	r8, [r3]
 8000bb6:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000bb8:	20cb      	movs	r0, #203	; 0xcb
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000bba:	f04f 0e39 	mov.w	lr, #57	; 0x39
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000bbe:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000bc0:	202c      	movs	r0, #44	; 0x2c
 8000bc2:	f8a3 e000 	strh.w	lr, [r3]
 8000bc6:	8018      	strh	r0, [r3, #0]
 8000bc8:	2034      	movs	r0, #52	; 0x34
 8000bca:	8019      	strh	r1, [r3, #0]
 8000bcc:	8018      	strh	r0, [r3, #0]
 8000bce:	2002      	movs	r0, #2
 8000bd0:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000bd2:	20f7      	movs	r0, #247	; 0xf7
 8000bd4:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000bd6:	2020      	movs	r0, #32
 8000bd8:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000bda:	20ea      	movs	r0, #234	; 0xea
 8000bdc:	8010      	strh	r0, [r2, #0]
 8000bde:	20b1      	movs	r0, #177	; 0xb1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000be0:	8019      	strh	r1, [r3, #0]
 8000be2:	f04f 091b 	mov.w	r9, #27
 8000be6:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000be8:	8010      	strh	r0, [r2, #0]
 8000bea:	20b6      	movs	r0, #182	; 0xb6
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000bec:	8019      	strh	r1, [r3, #0]
 8000bee:	f8a3 9000 	strh.w	r9, [r3]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000bf2:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000bf4:	200a      	movs	r0, #10
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000bf6:	24c0      	movs	r4, #192	; 0xc0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000bf8:	8018      	strh	r0, [r3, #0]
 8000bfa:	20a2      	movs	r0, #162	; 0xa2
 8000bfc:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000bfe:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c00:	2435      	movs	r4, #53	; 0x35
 8000c02:	801c      	strh	r4, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c04:	24c1      	movs	r4, #193	; 0xc1
 8000c06:	25c5      	movs	r5, #197	; 0xc5
 8000c08:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c0a:	2411      	movs	r4, #17
 8000c0c:	801c      	strh	r4, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c0e:	8015      	strh	r5, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c10:	2545      	movs	r5, #69	; 0x45
 8000c12:	801d      	strh	r5, [r3, #0]
 8000c14:	801d      	strh	r5, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c16:	25c7      	movs	r5, #199	; 0xc7
 8000c18:	8015      	strh	r5, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c1a:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c1c:	20f2      	movs	r0, #242	; 0xf2
 8000c1e:	2626      	movs	r6, #38	; 0x26
 8000c20:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c22:	2501      	movs	r5, #1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c24:	20e0      	movs	r0, #224	; 0xe0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c26:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c28:	8016      	strh	r6, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c2a:	801d      	strh	r5, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c2c:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c2e:	200f      	movs	r0, #15
 8000c30:	8018      	strh	r0, [r3, #0]
 8000c32:	801e      	strh	r6, [r3, #0]
 8000c34:	2624      	movs	r6, #36	; 0x24
 8000c36:	801e      	strh	r6, [r3, #0]
 8000c38:	260b      	movs	r6, #11
 8000c3a:	801e      	strh	r6, [r3, #0]
 8000c3c:	260e      	movs	r6, #14
 8000c3e:	f04f 0a54 	mov.w	sl, #84	; 0x54
 8000c42:	801e      	strh	r6, [r3, #0]
 8000c44:	2609      	movs	r6, #9
 8000c46:	801e      	strh	r6, [r3, #0]
 8000c48:	f8a3 a000 	strh.w	sl, [r3]
 8000c4c:	f04f 0aa8 	mov.w	sl, #168	; 0xa8
 8000c50:	f8a3 a000 	strh.w	sl, [r3]
 8000c54:	f04f 0a46 	mov.w	sl, #70	; 0x46
 8000c58:	f8a3 a000 	strh.w	sl, [r3]
 8000c5c:	f04f 0a0c 	mov.w	sl, #12
 8000c60:	f8a3 a000 	strh.w	sl, [r3]
 8000c64:	f04f 0a17 	mov.w	sl, #23
 8000c68:	f8a3 a000 	strh.w	sl, [r3]
 8000c6c:	801e      	strh	r6, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c6e:	f04f 0ae1 	mov.w	sl, #225	; 0xe1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c72:	2607      	movs	r6, #7
 8000c74:	8018      	strh	r0, [r3, #0]
 8000c76:	801e      	strh	r6, [r3, #0]
 8000c78:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c7a:	f8a2 a000 	strh.w	sl, [r2]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c7e:	f04f 0a19 	mov.w	sl, #25
 8000c82:	8019      	strh	r1, [r3, #0]
 8000c84:	f8a3 a000 	strh.w	sl, [r3]
 8000c88:	f8a3 9000 	strh.w	r9, [r3]
 8000c8c:	f04f 0904 	mov.w	r9, #4
 8000c90:	f8a3 9000 	strh.w	r9, [r3]
 8000c94:	f8a3 8000 	strh.w	r8, [r3]
 8000c98:	801e      	strh	r6, [r3, #0]
 8000c9a:	f04f 0847 	mov.w	r8, #71	; 0x47
 8000c9e:	262a      	movs	r6, #42	; 0x2a
 8000ca0:	801e      	strh	r6, [r3, #0]
 8000ca2:	f8a3 8000 	strh.w	r8, [r3]
 8000ca6:	f8a3 e000 	strh.w	lr, [r3]
 8000caa:	f8a3 c000 	strh.w	ip, [r3]
 8000cae:	f04f 0c06 	mov.w	ip, #6
 8000cb2:	f8a3 c000 	strh.w	ip, [r3]
 8000cb6:	f8a3 c000 	strh.w	ip, [r3]
 8000cba:	801f      	strh	r7, [r3, #0]
 8000cbc:	2738      	movs	r7, #56	; 0x38
 8000cbe:	801f      	strh	r7, [r3, #0]
 8000cc0:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000cc2:	2036      	movs	r0, #54	; 0x36
 8000cc4:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000cc6:	20c8      	movs	r0, #200	; 0xc8
 8000cc8:	8018      	strh	r0, [r3, #0]
 8000cca:	20ef      	movs	r0, #239	; 0xef
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000ccc:	8016      	strh	r6, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000cce:	8019      	strh	r1, [r3, #0]
 8000cd0:	8019      	strh	r1, [r3, #0]
 8000cd2:	8019      	strh	r1, [r3, #0]
 8000cd4:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000cd6:	202b      	movs	r0, #43	; 0x2b
 8000cd8:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000cda:	8019      	strh	r1, [r3, #0]
 8000cdc:	8019      	strh	r1, [r3, #0]
 8000cde:	213f      	movs	r1, #63	; 0x3f
 8000ce0:	801d      	strh	r5, [r3, #0]
 8000ce2:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000ce4:	213a      	movs	r1, #58	; 0x3a
 8000ce6:	8011      	strh	r1, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000ce8:	2155      	movs	r1, #85	; 0x55
	LCD_Write_Cmd ( 0x3a ); 
	LCD_Write_Data ( 0x55 );
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
	Delay ( 0xAFFf<<2 );
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <LCD_REG_Config+0x18c>)
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000cec:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000cee:	8014      	strh	r4, [r2, #0]
	Delay ( 0xAFFf<<2 );
 8000cf0:	f7ff ff12 	bl	8000b18 <Delay>
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000cf4:	2329      	movs	r3, #41	; 0x29
 8000cf6:	8013      	strh	r3, [r2, #0]
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
	
	
}
 8000cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfc:	60020000 	.word	0x60020000
 8000d00:	0002bffc 	.word	0x0002bffc

08000d04 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000d04:	b570      	push	{r4, r5, r6, lr}
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000d06:	f04f 46c0 	mov.w	r6, #1610612736	; 0x60000000
 8000d0a:	242a      	movs	r4, #42	; 0x2a
 8000d0c:	8034      	strh	r4, [r6, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d0e:	4c0f      	ldr	r4, [pc, #60]	; (8000d4c <LCD_OpenWindow+0x48>)
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000d10:	0a05      	lsrs	r5, r0, #8
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d12:	8025      	strh	r5, [r4, #0]
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000d14:	b2c5      	uxtb	r5, r0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d16:	8025      	strh	r5, [r4, #0]
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000d18:	1885      	adds	r5, r0, r2
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000d1a:	3a01      	subs	r2, #1
 8000d1c:	4410      	add	r0, r2
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000d1e:	222b      	movs	r2, #43	; 0x2b
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000d20:	3d01      	subs	r5, #1
 8000d22:	f3c5 250f 	ubfx	r5, r5, #8, #16
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000d26:	b2c0      	uxtb	r0, r0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d28:	8025      	strh	r5, [r4, #0]
 8000d2a:	8020      	strh	r0, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000d2c:	8032      	strh	r2, [r6, #0]

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
	LCD_Write_Data ( usPAGE >> 8  );
 8000d2e:	0a0a      	lsrs	r2, r1, #8
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d30:	8022      	strh	r2, [r4, #0]
	LCD_Write_Data ( usPAGE & 0xff  );
 8000d32:	b2ca      	uxtb	r2, r1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d34:	8022      	strh	r2, [r4, #0]
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000d36:	18ca      	adds	r2, r1, r3
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000d38:	3b01      	subs	r3, #1
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000d3a:	3a01      	subs	r2, #1
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000d3c:	4419      	add	r1, r3
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000d3e:	f3c2 220f 	ubfx	r2, r2, #8, #16
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000d42:	b2c9      	uxtb	r1, r1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d44:	8022      	strh	r2, [r4, #0]
 8000d46:	8021      	strh	r1, [r4, #0]
	
}
 8000d48:	bd70      	pop	{r4, r5, r6, pc}
 8000d4a:	bf00      	nop
 8000d4c:	60020000 	.word	0x60020000

08000d50 <LCD_FillColor>:
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000d50:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000d54:	222c      	movs	r2, #44	; 0x2c
 8000d56:	801a      	strh	r2, [r3, #0]
	uint32_t i = 0;
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
		
	for ( i = 0; i < usPoint; i ++ )
 8000d58:	2300      	movs	r3, #0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d5a:	4a03      	ldr	r2, [pc, #12]	; (8000d68 <LCD_FillColor+0x18>)
	for ( i = 0; i < usPoint; i ++ )
 8000d5c:	4283      	cmp	r3, r0
 8000d5e:	d100      	bne.n	8000d62 <LCD_FillColor+0x12>
		LCD_Write_Data ( usColor );
		
}
 8000d60:	4770      	bx	lr
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000d62:	8011      	strh	r1, [r2, #0]
	for ( i = 0; i < usPoint; i ++ )
 8000d64:	3301      	adds	r3, #1
 8000d66:	e7f9      	b.n	8000d5c <LCD_FillColor+0xc>
 8000d68:	60020000 	.word	0x60020000

08000d6c <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000d6c:	b570      	push	{r4, r5, r6, lr}
 8000d6e:	4614      	mov	r4, r2
 8000d70:	461d      	mov	r5, r3
 8000d72:	f8bd 6010 	ldrh.w	r6, [sp, #16]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000d76:	f7ff ffc5 	bl	8000d04 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000d7a:	4631      	mov	r1, r6
 8000d7c:	fb05 f004 	mul.w	r0, r5, r4
	
}
 8000d80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000d84:	f7ff bfe4 	b.w	8000d50 <LCD_FillColor>

08000d88 <LCD_INIT>:
{
 8000d88:	b507      	push	{r0, r1, r2, lr}
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d90:	4809      	ldr	r0, [pc, #36]	; (8000db8 <LCD_INIT+0x30>)
 8000d92:	f000 fe05 	bl	80019a0 <HAL_GPIO_WritePin>
	LCD_Rst();
 8000d96:	f7ff fec9 	bl	8000b2c <LCD_Rst>
	LCD_REG_Config();
 8000d9a:	f7ff feeb 	bl	8000b74 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000d9e:	2100      	movs	r1, #0
 8000da0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000da4:	22f0      	movs	r2, #240	; 0xf0
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	4608      	mov	r0, r1
 8000daa:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000dae:	f7ff ffdd 	bl	8000d6c <LCD_Clear>
}
 8000db2:	b003      	add	sp, #12
 8000db4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000db8:	40011400 	.word	0x40011400

08000dbc <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000dbc:	b570      	push	{r4, r5, r6, lr}
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000dbe:	2310      	movs	r3, #16
{
 8000dc0:	4614      	mov	r4, r2
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000dc2:	2208      	movs	r2, #8
 8000dc4:	f7ff ff9e 	bl	8000d04 <LCD_OpenWindow>
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000dc8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000dcc:	222c      	movs	r2, #44	; 0x2c
	ucRelativePositon = cChar - ' ';
 8000dce:	3c20      	subs	r4, #32
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000dd0:	801a      	strh	r2, [r3, #0]
	
	LCD_Write_Cmd ( CMD_SetPixel );	
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <LCD_DrawChar+0x50>)
 8000dd4:	b2e4      	uxtb	r4, r4
 8000dd6:	eb03 1404 	add.w	r4, r3, r4, lsl #4
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000dda:	f64f 75ff 	movw	r5, #65535	; 0xffff
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000dde:	2310      	movs	r3, #16
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000de0:	261f      	movs	r6, #31
 8000de2:	480b      	ldr	r0, [pc, #44]	; (8000e10 <LCD_DrawChar+0x54>)
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8000de4:	2208      	movs	r2, #8
 8000de6:	f814 1b01 	ldrb.w	r1, [r4], #1
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
		{
			if ( ucTemp & 0x01 )
 8000dea:	f011 0f01 	tst.w	r1, #1
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000dee:	f102 32ff 	add.w	r2, r2, #4294967295
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000df2:	bf14      	ite	ne
 8000df4:	8006      	strhne	r6, [r0, #0]
 8000df6:	8005      	strheq	r5, [r0, #0]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000df8:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				LCD_Write_Data ( 0x001F );
			
			else
				LCD_Write_Data (  0xFFFF );								
			
			ucTemp >>= 1;		
 8000dfc:	ea4f 0151 	mov.w	r1, r1, lsr #1
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000e00:	d1f3      	bne.n	8000dea <LCD_DrawChar+0x2e>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000e02:	3b01      	subs	r3, #1
 8000e04:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8000e08:	d1ec      	bne.n	8000de4 <LCD_DrawChar+0x28>
			
		}
		
	}
	
}
 8000e0a:	bd70      	pop	{r4, r5, r6, pc}
 8000e0c:	0805c9d0 	.word	0x0805c9d0
 8000e10:	60020000 	.word	0x60020000

08000e14 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	4604      	mov	r4, r0
 8000e18:	460d      	mov	r5, r1
 8000e1a:	1e56      	subs	r6, r2, #1
	while ( * pStr != '\0' )
 8000e1c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8000e20:	b902      	cbnz	r2, 8000e24 <LCD_DrawString+0x10>
		
		usC += WIDTH_EN_CHAR;
		
	}
	
}
 8000e22:	bd70      	pop	{r4, r5, r6, pc}
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8000e24:	2ce8      	cmp	r4, #232	; 0xe8
			usP += HEIGHT_EN_CHAR;
 8000e26:	bf82      	ittt	hi
 8000e28:	3510      	addhi	r5, #16
 8000e2a:	b2ad      	uxthhi	r5, r5
			usC = LCD_DispWindow_Start_COLUMN;
 8000e2c:	2400      	movhi	r4, #0
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8000e2e:	f5b5 7f98 	cmp.w	r5, #304	; 0x130
			usP = LCD_DispWindow_Start_PAGE;
 8000e32:	bf84      	itt	hi
 8000e34:	2500      	movhi	r5, #0
			usC = LCD_DispWindow_Start_COLUMN;
 8000e36:	462c      	movhi	r4, r5
		LCD_DrawChar ( usC, usP, * pStr );
 8000e38:	4629      	mov	r1, r5
 8000e3a:	4620      	mov	r0, r4
		usC += WIDTH_EN_CHAR;
 8000e3c:	3408      	adds	r4, #8
		LCD_DrawChar ( usC, usP, * pStr );
 8000e3e:	f7ff ffbd 	bl	8000dbc <LCD_DrawChar>
		usC += WIDTH_EN_CHAR;
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	e7ea      	b.n	8000e1c <LCD_DrawString+0x8>
	...

08000e48 <LCD_DrawDot>:


//Task 2
void LCD_DrawDot(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usColor)	
{	
 8000e48:	b530      	push	{r4, r5, lr}
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000e4a:	232a      	movs	r3, #42	; 0x2a
 8000e4c:	f04f 44c0 	mov.w	r4, #1610612736	; 0x60000000
 8000e50:	8023      	strh	r3, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <LCD_DrawDot+0x30>)
	 *  Task 2 : Implement the LCD_DrawDot to turn on a particular dot on the LCD.
	 */

	// Column address set-----------------------------------------------------------
	LCD_Write_Cmd(0x2A);
	LCD_Write_Data(usCOLUMN >> 8);
 8000e54:	0a05      	lsrs	r5, r0, #8
	LCD_Write_Data(usCOLUMN & 0xff);
 8000e56:	b2c0      	uxtb	r0, r0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000e58:	801d      	strh	r5, [r3, #0]
 8000e5a:	8018      	strh	r0, [r3, #0]
 8000e5c:	801d      	strh	r5, [r3, #0]
 8000e5e:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000e60:	202b      	movs	r0, #43	; 0x2b
 8000e62:	8020      	strh	r0, [r4, #0]
	LCD_Write_Data(usCOLUMN >> 8);
	LCD_Write_Data(usCOLUMN & 0xff);

	// Page address set-------------------------------------------------------------
	LCD_Write_Cmd(0x2B);
	LCD_Write_Data(usPAGE >> 8);
 8000e64:	0a08      	lsrs	r0, r1, #8
	LCD_Write_Data(usPAGE & 0xff);
 8000e66:	b2c9      	uxtb	r1, r1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000e68:	8018      	strh	r0, [r3, #0]
 8000e6a:	8019      	strh	r1, [r3, #0]
 8000e6c:	8018      	strh	r0, [r3, #0]
 8000e6e:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000e70:	212c      	movs	r1, #44	; 0x2c
 8000e72:	8021      	strh	r1, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000e74:	801a      	strh	r2, [r3, #0]

	// Memory write-----------------------------------------------------------------
	LCD_Write_Cmd(0x2C);
	LCD_Write_Data(usColor);
		
}
 8000e76:	bd30      	pop	{r4, r5, pc}
 8000e78:	60020000 	.word	0x60020000

08000e7c <XferCpltCallback>:
}

/* USER CODE BEGIN 4 */

void XferCpltCallback(DMA_HandleTypeDef* hdma) {
	__NOP();
 8000e7c:	bf00      	nop
}
 8000e7e:	4770      	bx	lr

08000e80 <SystemClock_Config>:
{
 8000e80:	b510      	push	{r4, lr}
 8000e82:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e84:	2214      	movs	r2, #20
 8000e86:	2100      	movs	r1, #0
 8000e88:	a808      	add	r0, sp, #32
 8000e8a:	f001 f8cb 	bl	8002024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e8e:	2214      	movs	r2, #20
 8000e90:	2100      	movs	r1, #0
 8000e92:	a801      	add	r0, sp, #4
 8000e94:	f001 f8c6 	bl	8002024 <memset>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e98:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e9e:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ea0:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ea4:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ea8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eac:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eae:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000eb0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb2:	f000 fd7b 	bl	80019ac <HAL_RCC_OscConfig>
 8000eb6:	b108      	cbz	r0, 8000ebc <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eba:	e7fe      	b.n	8000eba <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ebc:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ebe:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec6:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ec8:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ecc:	4621      	mov	r1, r4
 8000ece:	a801      	add	r0, sp, #4
 8000ed0:	f000 ff42 	bl	8001d58 <HAL_RCC_ClockConfig>
 8000ed4:	b108      	cbz	r0, 8000eda <SystemClock_Config+0x5a>
 8000ed6:	b672      	cpsid	i
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <SystemClock_Config+0x58>
}
 8000eda:	b010      	add	sp, #64	; 0x40
 8000edc:	bd10      	pop	{r4, pc}
	...

08000ee0 <main>:
{
 8000ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f04f 0810 	mov.w	r8, #16
{
 8000ee8:	b090      	sub	sp, #64	; 0x40
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eea:	4c96      	ldr	r4, [pc, #600]	; (8001144 <main+0x264>)
  HAL_Init();
 8000eec:	f000 fa16 	bl	800131c <HAL_Init>
  SystemClock_Config();
 8000ef0:	f7ff ffc6 	bl	8000e80 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	4642      	mov	r2, r8
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	a809      	add	r0, sp, #36	; 0x24
 8000efa:	f001 f893 	bl	8002024 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f02:	ea43 0308 	orr.w	r3, r3, r8
 8000f06:	61a3      	str	r3, [r4, #24]
 8000f08:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000f0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0e:	ea03 0308 	and.w	r3, r3, r8
 8000f12:	9304      	str	r3, [sp, #16]
 8000f14:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000f18:	488b      	ldr	r0, [pc, #556]	; (8001148 <main+0x268>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	f043 0304 	orr.w	r3, r3, #4
 8000f1e:	61a3      	str	r3, [r4, #24]
 8000f20:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f22:	2600      	movs	r6, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f24:	f003 0304 	and.w	r3, r3, #4
 8000f28:	9305      	str	r3, [sp, #20]
 8000f2a:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f2c:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f2e:	2502      	movs	r5, #2
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f34:	61a3      	str	r3, [r4, #24]
 8000f36:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pin = Key_1_Pin;
 8000f38:	f04f 0901 	mov.w	r9, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f40:	9306      	str	r3, [sp, #24]
 8000f42:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f44:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f46:	f04f 0a03 	mov.w	sl, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4a:	f043 0308 	orr.w	r3, r3, #8
 8000f4e:	61a3      	str	r3, [r4, #24]
 8000f50:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f52:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	f003 0308 	and.w	r3, r3, #8
 8000f5a:	9307      	str	r3, [sp, #28]
 8000f5c:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f5e:	69a3      	ldr	r3, [r4, #24]
 8000f60:	f043 0320 	orr.w	r3, r3, #32
 8000f64:	61a3      	str	r3, [r4, #24]
 8000f66:	69a3      	ldr	r3, [r4, #24]
 8000f68:	f003 0320 	and.w	r3, r3, #32
 8000f6c:	9308      	str	r3, [sp, #32]
 8000f6e:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000f70:	f000 fd16 	bl	80019a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2102      	movs	r1, #2
 8000f78:	4874      	ldr	r0, [pc, #464]	; (800114c <main+0x26c>)
 8000f7a:	f000 fd11 	bl	80019a0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(Key_2_GPIO_Port, &GPIO_InitStruct);
 8000f82:	4873      	ldr	r0, [pc, #460]	; (8001150 <main+0x270>)
 8000f84:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f86:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f8a:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(Key_2_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	f000 fc1a 	bl	80017c4 <HAL_GPIO_Init>
  HAL_GPIO_Init(Key_1_GPIO_Port, &GPIO_InitStruct);
 8000f90:	4870      	ldr	r0, [pc, #448]	; (8001154 <main+0x274>)
 8000f92:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f94:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f96:	e9cd 9609 	strd	r9, r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(Key_1_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	f000 fc13 	bl	80017c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A_Button_Pin|B_Button_Pin;
 8000f9e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa2:	486d      	ldr	r0, [pc, #436]	; (8001158 <main+0x278>)
 8000fa4:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa6:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000faa:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fac:	f000 fc0a 	bl	80017c4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb0:	4865      	ldr	r0, [pc, #404]	; (8001148 <main+0x268>)
 8000fb2:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	e9cd 7909 	strd	r7, r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fba:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fbe:	f000 fc01 	bl	80017c4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fc2:	4862      	ldr	r0, [pc, #392]	; (800114c <main+0x26c>)
 8000fc4:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc6:	e9cd 5909 	strd	r5, r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fca:	e9cd 6a0b 	strd	r6, sl, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fce:	f000 fbf9 	bl	80017c4 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fd2:	6963      	ldr	r3, [r4, #20]
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8000fd4:	4d61      	ldr	r5, [pc, #388]	; (800115c <main+0x27c>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fd6:	ea43 0309 	orr.w	r3, r3, r9
 8000fda:	6163      	str	r3, [r4, #20]
 8000fdc:	6963      	ldr	r3, [r4, #20]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000fde:	4a60      	ldr	r2, [pc, #384]	; (8001160 <main+0x280>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fe0:	ea03 0309 	and.w	r3, r3, r9
 8000fe4:	9303      	str	r3, [sp, #12]
 8000fe6:	9b03      	ldr	r3, [sp, #12]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000fe8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fec:	e9c5 2300 	strd	r2, r3, [r5]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8000ff0:	2340      	movs	r3, #64	; 0x40
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ff2:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_DISABLE;
 8000ff6:	e9c5 3602 	strd	r3, r6, [r5, #8]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 8000ffe:	4628      	mov	r0, r5
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001000:	e9c5 1304 	strd	r1, r3, [r5, #16]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 8001004:	e9c5 6606 	strd	r6, r6, [r5, #24]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 8001008:	f000 fa24 	bl	8001454 <HAL_DMA_Init>
 800100c:	4604      	mov	r4, r0
 800100e:	b108      	cbz	r0, 8001014 <main+0x134>
 8001010:	b672      	cpsid	i
  while (1)
 8001012:	e7fe      	b.n	8001012 <main+0x132>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001014:	4602      	mov	r2, r0
 8001016:	4601      	mov	r1, r0
 8001018:	200b      	movs	r0, #11
 800101a:	f000 f9c7 	bl	80013ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800101e:	200b      	movs	r0, #11
 8001020:	f000 f9f6 	bl	8001410 <HAL_NVIC_EnableIRQ>
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001024:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001028:	484e      	ldr	r0, [pc, #312]	; (8001164 <main+0x284>)
  Timing.DataSetupTime = 255;
 800102a:	22ff      	movs	r2, #255	; 0xff
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800102c:	6003      	str	r3, [r0, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800102e:	f503 7382 	add.w	r3, r3, #260	; 0x104
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001032:	e9c0 3401 	strd	r3, r4, [r0, #4]
  Timing.AddressSetupTime = 15;
 8001036:	230f      	movs	r3, #15
  Timing.BusTurnAroundDuration = 15;
 8001038:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  Timing.AddressHoldTime = 15;
 800103c:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  Timing.DataLatency = 17;
 8001040:	2311      	movs	r3, #17
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001042:	4622      	mov	r2, r4
 8001044:	a909      	add	r1, sp, #36	; 0x24
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001046:	e9c0 4403 	strd	r4, r4, [r0, #12]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800104a:	e9c0 8405 	strd	r8, r4, [r0, #20]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800104e:	e9c0 4407 	strd	r4, r4, [r0, #28]
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001052:	e9c0 4709 	strd	r4, r7, [r0, #36]	; 0x24
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001056:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800105a:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800105e:	940f      	str	r4, [sp, #60]	; 0x3c
  Timing.CLKDivision = 16;
 8001060:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  Timing.DataLatency = 17;
 8001064:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001066:	f000 ff13 	bl	8001e90 <HAL_SRAM_Init>
 800106a:	4604      	mov	r4, r0
 800106c:	b108      	cbz	r0, 8001072 <main+0x192>
 800106e:	b672      	cpsid	i
  while (1)
 8001070:	e7fe      	b.n	8001070 <main+0x190>
  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001072:	4a3d      	ldr	r2, [pc, #244]	; (8001168 <main+0x288>)
 8001074:	4e3d      	ldr	r6, [pc, #244]	; (800116c <main+0x28c>)
 8001076:	69d3      	ldr	r3, [r2, #28]
	  HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel1, (uint32_t)(&platformImg[882 * y]), (uint32_t)0x60020000, 320);
 8001078:	4f3d      	ldr	r7, [pc, #244]	; (8001170 <main+0x290>)
  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 800107a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800107e:	61d3      	str	r3, [r2, #28]
  hdma_memtomem_dma1_channel1.XferCpltCallback = &XferCpltCallback;
 8001080:	4b3c      	ldr	r3, [pc, #240]	; (8001174 <main+0x294>)
 8001082:	62ab      	str	r3, [r5, #40]	; 0x28
  LCD_INIT();
 8001084:	f7ff fe80 	bl	8000d88 <LCD_INIT>
  LCD_Write_Cmd(0x36);
 8001088:	2036      	movs	r0, #54	; 0x36
 800108a:	f7ff fd69 	bl	8000b60 <LCD_Write_Cmd>
  LCD_Write_Data(0x68);
 800108e:	2068      	movs	r0, #104	; 0x68
 8001090:	f7ff fd6a 	bl	8000b68 <LCD_Write_Data>
  LCD_OpenWindow(0, 0, 320, 240);
 8001094:	23f0      	movs	r3, #240	; 0xf0
 8001096:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800109a:	4621      	mov	r1, r4
 800109c:	4620      	mov	r0, r4
 800109e:	f7ff fe31 	bl	8000d04 <LCD_OpenWindow>
  LCD_Write_Cmd ( CMD_SetPixel );
 80010a2:	202c      	movs	r0, #44	; 0x2c
 80010a4:	f7ff fd5c 	bl	8000b60 <LCD_Write_Cmd>
	  HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel1, (uint32_t)(&platformImg[882 * y]), (uint32_t)0x60020000, 320);
 80010a8:	4631      	mov	r1, r6
 80010aa:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80010ae:	463a      	mov	r2, r7
 80010b0:	4628      	mov	r0, r5
 80010b2:	f000 fa0d 	bl	80014d0 <HAL_DMA_Start_IT>
  for (int y = 0; y < 209; y++) {
 80010b6:	3401      	adds	r4, #1
	  HAL_Delay(1);
 80010b8:	2001      	movs	r0, #1
 80010ba:	f000 f953 	bl	8001364 <HAL_Delay>
  for (int y = 0; y < 209; y++) {
 80010be:	2cd1      	cmp	r4, #209	; 0xd1
 80010c0:	f206 66e4 	addw	r6, r6, #1764	; 0x6e4
 80010c4:	d1f0      	bne.n	80010a8 <main+0x1c8>
  struct Kirby kirby = {
 80010c6:	4b2c      	ldr	r3, [pc, #176]	; (8001178 <main+0x298>)
 80010c8:	ac09      	add	r4, sp, #36	; 0x24
 80010ca:	f103 0510 	add.w	r5, r3, #16
 80010ce:	4622      	mov	r2, r4
 80010d0:	6818      	ldr	r0, [r3, #0]
 80010d2:	6859      	ldr	r1, [r3, #4]
 80010d4:	3308      	adds	r3, #8
 80010d6:	c203      	stmia	r2!, {r0, r1}
 80010d8:	42ab      	cmp	r3, r5
 80010da:	4614      	mov	r4, r2
 80010dc:	d1f7      	bne.n	80010ce <main+0x1ee>
	  inputLeft = HAL_GPIO_ReadPin(LEFT_GPIO_PORT, LEFT_GPIO_PIN);
 80010de:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8001154 <main+0x274>
	  inputRight = HAL_GPIO_ReadPin(RIGHT_GPIO_PORT, RIGHT_GPIO_PIN);
 80010e2:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001150 <main+0x270>
	  inputA = HAL_GPIO_ReadPin(A_BUTTON_GPIO_PORT, A_BUTTON_GPIO_PIN);
 80010e6:	4f1c      	ldr	r7, [pc, #112]	; (8001158 <main+0x278>)
	  inputLeft = HAL_GPIO_ReadPin(LEFT_GPIO_PORT, LEFT_GPIO_PIN);
 80010e8:	2101      	movs	r1, #1
 80010ea:	4640      	mov	r0, r8
 80010ec:	f000 fc52 	bl	8001994 <HAL_GPIO_ReadPin>
	  inputRight = HAL_GPIO_ReadPin(RIGHT_GPIO_PORT, RIGHT_GPIO_PIN);
 80010f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	  inputLeft = HAL_GPIO_ReadPin(LEFT_GPIO_PORT, LEFT_GPIO_PIN);
 80010f4:	4604      	mov	r4, r0
	  inputRight = HAL_GPIO_ReadPin(RIGHT_GPIO_PORT, RIGHT_GPIO_PIN);
 80010f6:	4648      	mov	r0, r9
 80010f8:	f000 fc4c 	bl	8001994 <HAL_GPIO_ReadPin>
	  inputA = HAL_GPIO_ReadPin(A_BUTTON_GPIO_PORT, A_BUTTON_GPIO_PIN);
 80010fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
	  inputRight = HAL_GPIO_ReadPin(RIGHT_GPIO_PORT, RIGHT_GPIO_PIN);
 8001100:	4605      	mov	r5, r0
	  inputA = HAL_GPIO_ReadPin(A_BUTTON_GPIO_PORT, A_BUTTON_GPIO_PIN);
 8001102:	4638      	mov	r0, r7
 8001104:	f000 fc46 	bl	8001994 <HAL_GPIO_ReadPin>
	  inputB = HAL_GPIO_ReadPin(B_BUTTON_GPIO_PORT, B_BUTTON_GPIO_PIN);
 8001108:	f44f 6100 	mov.w	r1, #2048	; 0x800
	  inputA = HAL_GPIO_ReadPin(A_BUTTON_GPIO_PORT, A_BUTTON_GPIO_PIN);
 800110c:	4606      	mov	r6, r0
	  inputB = HAL_GPIO_ReadPin(B_BUTTON_GPIO_PORT, B_BUTTON_GPIO_PIN);
 800110e:	4638      	mov	r0, r7
 8001110:	f000 fc40 	bl	8001994 <HAL_GPIO_ReadPin>
	  Kirby_updateState(&kirby, inputB, inputA, inputLeft, inputRight);
 8001114:	4623      	mov	r3, r4
	  inputB = HAL_GPIO_ReadPin(B_BUTTON_GPIO_PORT, B_BUTTON_GPIO_PIN);
 8001116:	4601      	mov	r1, r0
	  Kirby_updateState(&kirby, inputB, inputA, inputLeft, inputRight);
 8001118:	4632      	mov	r2, r6
 800111a:	9500      	str	r5, [sp, #0]
 800111c:	a809      	add	r0, sp, #36	; 0x24
 800111e:	f7ff fa3d 	bl	800059c <Kirby_updateState>
	  if (inputLeft) {
 8001122:	b154      	cbz	r4, 800113a <main+0x25a>
		  Kirby_moveX(&kirby, LEFT);
 8001124:	2101      	movs	r1, #1
		  Kirby_moveX(&kirby, RIGHT);
 8001126:	a809      	add	r0, sp, #36	; 0x24
 8001128:	f7ff fab4 	bl	8000694 <Kirby_moveX>
	  Kirby_moveY(&kirby);
 800112c:	a809      	add	r0, sp, #36	; 0x24
 800112e:	f7ff fae2 	bl	80006f6 <Kirby_moveY>
	  Kirby_renderSprite(&kirby);
 8001132:	a809      	add	r0, sp, #36	; 0x24
 8001134:	f7ff faf8 	bl	8000728 <Kirby_renderSprite>
	  inputLeft = HAL_GPIO_ReadPin(LEFT_GPIO_PORT, LEFT_GPIO_PIN);
 8001138:	e7d6      	b.n	80010e8 <main+0x208>
	  } else if (inputRight) {
 800113a:	2d00      	cmp	r5, #0
 800113c:	d0f6      	beq.n	800112c <main+0x24c>
		  Kirby_moveX(&kirby, RIGHT);
 800113e:	4621      	mov	r1, r4
 8001140:	e7f1      	b.n	8001126 <main+0x246>
 8001142:	bf00      	nop
 8001144:	40021000 	.word	0x40021000
 8001148:	40011400 	.word	0x40011400
 800114c:	40011800 	.word	0x40011800
 8001150:	40011000 	.word	0x40011000
 8001154:	40010800 	.word	0x40010800
 8001158:	40010c00 	.word	0x40010c00
 800115c:	2000b8f8 	.word	0x2000b8f8
 8001160:	40020008 	.word	0x40020008
 8001164:	2000b93c 	.word	0x2000b93c
 8001168:	40010000 	.word	0x40010000
 800116c:	08002960 	.word	0x08002960
 8001170:	60020000 	.word	0x60020000
 8001174:	08000e7d 	.word	0x08000e7d
 8001178:	08002950 	.word	0x08002950

0800117c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800117c:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <HAL_MspInit+0x3c>)
{
 800117e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001180:	699a      	ldr	r2, [r3, #24]
 8001182:	f042 0201 	orr.w	r2, r2, #1
 8001186:	619a      	str	r2, [r3, #24]
 8001188:	699a      	ldr	r2, [r3, #24]
 800118a:	f002 0201 	and.w	r2, r2, #1
 800118e:	9200      	str	r2, [sp, #0]
 8001190:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001192:	69da      	ldr	r2, [r3, #28]
 8001194:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001198:	61da      	str	r2, [r3, #28]
 800119a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800119c:	4a07      	ldr	r2, [pc, #28]	; (80011bc <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011a6:	6853      	ldr	r3, [r2, #4]
 80011a8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b2:	b002      	add	sp, #8
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40010000 	.word	0x40010000

080011c0 <HAL_SRAM_MspInit>:

static void HAL_FSMC_MspInit(void){
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80011c0:	2300      	movs	r3, #0
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80011c2:	b530      	push	{r4, r5, lr}
 80011c4:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80011c6:	9304      	str	r3, [sp, #16]
  if (FSMC_Initialized) {
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_SRAM_MspInit+0x54>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	b9fa      	cbnz	r2, 800120e <HAL_SRAM_MspInit+0x4e>
  FSMC_Initialized = 1;
 80011ce:	2201      	movs	r2, #1
 80011d0:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <HAL_SRAM_MspInit+0x58>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2502      	movs	r5, #2
  __HAL_RCC_FSMC_CLK_ENABLE();
 80011d6:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d8:	2403      	movs	r4, #3
  __HAL_RCC_FSMC_CLK_ENABLE();
 80011da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011de:	615a      	str	r2, [r3, #20]
 80011e0:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011e2:	480e      	ldr	r0, [pc, #56]	; (800121c <HAL_SRAM_MspInit+0x5c>)
  __HAL_RCC_FSMC_CLK_ENABLE();
 80011e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	f64f 7380 	movw	r3, #65408	; 0xff80
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f0:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	e9cd 3502 	strd	r3, r5, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f6:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f8:	f000 fae4 	bl	80017c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80011fc:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001200:	4807      	ldr	r0, [pc, #28]	; (8001220 <HAL_SRAM_MspInit+0x60>)
 8001202:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	e9cd 3502 	strd	r3, r5, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001208:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800120a:	f000 fadb 	bl	80017c4 <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800120e:	b007      	add	sp, #28
 8001210:	bd30      	pop	{r4, r5, pc}
 8001212:	bf00      	nop
 8001214:	2000b984 	.word	0x2000b984
 8001218:	40021000 	.word	0x40021000
 800121c:	40011800 	.word	0x40011800
 8001220:	40011400 	.word	0x40011400

08001224 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <NMI_Handler>

08001226 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <HardFault_Handler>

08001228 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <MemManage_Handler>

0800122a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <BusFault_Handler>

0800122c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler>

0800122e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122e:	4770      	bx	lr

08001230 <DebugMon_Handler>:
 8001230:	4770      	bx	lr

08001232 <PendSV_Handler>:
 8001232:	4770      	bx	lr

08001234 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001234:	f000 b884 	b.w	8001340 <HAL_IncTick>

08001238 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 8001238:	4801      	ldr	r0, [pc, #4]	; (8001240 <DMA1_Channel1_IRQHandler+0x8>)
 800123a:	f000 b985 	b.w	8001548 <HAL_DMA_IRQHandler>
 800123e:	bf00      	nop
 8001240:	2000b8f8 	.word	0x2000b8f8

08001244 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001244:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <_sbrk+0x30>)
{
 8001246:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001248:	6811      	ldr	r1, [r2, #0]
{
 800124a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800124c:	b909      	cbnz	r1, 8001252 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800124e:	490a      	ldr	r1, [pc, #40]	; (8001278 <_sbrk+0x34>)
 8001250:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001252:	6810      	ldr	r0, [r2, #0]
 8001254:	4909      	ldr	r1, [pc, #36]	; (800127c <_sbrk+0x38>)
 8001256:	4c0a      	ldr	r4, [pc, #40]	; (8001280 <_sbrk+0x3c>)
 8001258:	4403      	add	r3, r0
 800125a:	1b09      	subs	r1, r1, r4
 800125c:	428b      	cmp	r3, r1
 800125e:	d906      	bls.n	800126e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001260:	f000 feb6 	bl	8001fd0 <__errno>
 8001264:	230c      	movs	r3, #12
 8001266:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001268:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800126c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800126e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001270:	e7fc      	b.n	800126c <_sbrk+0x28>
 8001272:	bf00      	nop
 8001274:	2000b988 	.word	0x2000b988
 8001278:	2000b9a0 	.word	0x2000b9a0
 800127c:	20010000 	.word	0x20010000
 8001280:	00000400 	.word	0x00000400

08001284 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001284:	4770      	bx	lr
	...

08001288 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001288:	480c      	ldr	r0, [pc, #48]	; (80012bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800128a:	490d      	ldr	r1, [pc, #52]	; (80012c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800128c:	4a0d      	ldr	r2, [pc, #52]	; (80012c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001290:	e002      	b.n	8001298 <LoopCopyDataInit>

08001292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001296:	3304      	adds	r3, #4

08001298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800129c:	d3f9      	bcc.n	8001292 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129e:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012a0:	4c0a      	ldr	r4, [pc, #40]	; (80012cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a4:	e001      	b.n	80012aa <LoopFillZerobss>

080012a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a8:	3204      	adds	r2, #4

080012aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ac:	d3fb      	bcc.n	80012a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012ae:	f7ff ffe9 	bl	8001284 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012b2:	f000 fe93 	bl	8001fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012b6:	f7ff fe13 	bl	8000ee0 <main>
  bx lr
 80012ba:	4770      	bx	lr
  ldr r0, =_sdata
 80012bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c0:	2000b8d8 	.word	0x2000b8d8
  ldr r2, =_sidata
 80012c4:	0805d01c 	.word	0x0805d01c
  ldr r2, =_sbss
 80012c8:	2000b8d8 	.word	0x2000b8d8
  ldr r4, =_ebss
 80012cc:	2000b9a0 	.word	0x2000b9a0

080012d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012d0:	e7fe      	b.n	80012d0 <ADC1_2_IRQHandler>
	...

080012d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <HAL_InitTick+0x3c>)
{
 80012d8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012da:	7818      	ldrb	r0, [r3, #0]
 80012dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e0:	fbb3 f3f0 	udiv	r3, r3, r0
 80012e4:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <HAL_InitTick+0x40>)
 80012e6:	6810      	ldr	r0, [r2, #0]
 80012e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80012ec:	f000 f89e 	bl	800142c <HAL_SYSTICK_Config>
 80012f0:	4604      	mov	r4, r0
 80012f2:	b958      	cbnz	r0, 800130c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f4:	2d0f      	cmp	r5, #15
 80012f6:	d809      	bhi.n	800130c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f8:	4602      	mov	r2, r0
 80012fa:	4629      	mov	r1, r5
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001300:	f000 f854 	bl	80013ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001304:	4620      	mov	r0, r4
 8001306:	4b04      	ldr	r3, [pc, #16]	; (8001318 <HAL_InitTick+0x44>)
 8001308:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800130a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800130c:	2001      	movs	r0, #1
 800130e:	e7fc      	b.n	800130a <HAL_InitTick+0x36>
 8001310:	2000b86c 	.word	0x2000b86c
 8001314:	2000b868 	.word	0x2000b868
 8001318:	2000b870 	.word	0x2000b870

0800131c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800131c:	4a07      	ldr	r2, [pc, #28]	; (800133c <HAL_Init+0x20>)
{
 800131e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001320:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001322:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001324:	f043 0310 	orr.w	r3, r3, #16
 8001328:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800132a:	f000 f82d 	bl	8001388 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800132e:	200f      	movs	r0, #15
 8001330:	f7ff ffd0 	bl	80012d4 <HAL_InitTick>
  HAL_MspInit();
 8001334:	f7ff ff22 	bl	800117c <HAL_MspInit>
}
 8001338:	2000      	movs	r0, #0
 800133a:	bd08      	pop	{r3, pc}
 800133c:	40022000 	.word	0x40022000

08001340 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001340:	4a03      	ldr	r2, [pc, #12]	; (8001350 <HAL_IncTick+0x10>)
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <HAL_IncTick+0x14>)
 8001344:	6811      	ldr	r1, [r2, #0]
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	440b      	add	r3, r1
 800134a:	6013      	str	r3, [r2, #0]
}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	2000b98c 	.word	0x2000b98c
 8001354:	2000b86c 	.word	0x2000b86c

08001358 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001358:	4b01      	ldr	r3, [pc, #4]	; (8001360 <HAL_GetTick+0x8>)
 800135a:	6818      	ldr	r0, [r3, #0]
}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	2000b98c 	.word	0x2000b98c

08001364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001364:	b538      	push	{r3, r4, r5, lr}
 8001366:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001368:	f7ff fff6 	bl	8001358 <HAL_GetTick>
 800136c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800136e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001370:	bf1e      	ittt	ne
 8001372:	4b04      	ldrne	r3, [pc, #16]	; (8001384 <HAL_Delay+0x20>)
 8001374:	781b      	ldrbne	r3, [r3, #0]
 8001376:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001378:	f7ff ffee 	bl	8001358 <HAL_GetTick>
 800137c:	1b43      	subs	r3, r0, r5
 800137e:	42a3      	cmp	r3, r4
 8001380:	d3fa      	bcc.n	8001378 <HAL_Delay+0x14>
  {
  }
}
 8001382:	bd38      	pop	{r3, r4, r5, pc}
 8001384:	2000b86c 	.word	0x2000b86c

08001388 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001388:	4907      	ldr	r1, [pc, #28]	; (80013a8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800138a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800138c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800138e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001392:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001396:	0412      	lsls	r2, r2, #16
 8001398:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800139a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800139c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80013a4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ac:	4b16      	ldr	r3, [pc, #88]	; (8001408 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ae:	b530      	push	{r4, r5, lr}
 80013b0:	68dc      	ldr	r4, [r3, #12]
 80013b2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ba:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013bc:	2b04      	cmp	r3, #4
 80013be:	bf28      	it	cs
 80013c0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c8:	bf98      	it	ls
 80013ca:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d0:	bf88      	it	hi
 80013d2:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	ea21 0303 	bic.w	r3, r1, r3
 80013d8:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013da:	fa05 f404 	lsl.w	r4, r5, r4
 80013de:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80013e2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e8:	bfac      	ite	ge
 80013ea:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ee:	4a07      	ldrlt	r2, [pc, #28]	; (800140c <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	bfab      	itete	ge
 80013f8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fc:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001400:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001404:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001406:	bd30      	pop	{r4, r5, pc}
 8001408:	e000ed00 	.word	0xe000ed00
 800140c:	e000ed14 	.word	0xe000ed14

08001410 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001410:	2800      	cmp	r0, #0
 8001412:	db08      	blt.n	8001426 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001414:	2301      	movs	r3, #1
 8001416:	0942      	lsrs	r2, r0, #5
 8001418:	f000 001f 	and.w	r0, r0, #31
 800141c:	fa03 f000 	lsl.w	r0, r3, r0
 8001420:	4b01      	ldr	r3, [pc, #4]	; (8001428 <HAL_NVIC_EnableIRQ+0x18>)
 8001422:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001426:	4770      	bx	lr
 8001428:	e000e100 	.word	0xe000e100

0800142c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800142c:	3801      	subs	r0, #1
 800142e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001432:	d20b      	bcs.n	800144c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001434:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001438:	21f0      	movs	r1, #240	; 0xf0
 800143a:	4a05      	ldr	r2, [pc, #20]	; (8001450 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001442:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001444:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001446:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001448:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800144a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800144c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800144e:	4770      	bx	lr
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001454:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001456:	2800      	cmp	r0, #0
 8001458:	d030      	beq.n	80014bc <HAL_DMA_Init+0x68>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800145a:	6801      	ldr	r1, [r0, #0]
 800145c:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <HAL_DMA_Init+0x6c>)
 800145e:	2414      	movs	r4, #20
 8001460:	4299      	cmp	r1, r3
 8001462:	d823      	bhi.n	80014ac <HAL_DMA_Init+0x58>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001464:	4a17      	ldr	r2, [pc, #92]	; (80014c4 <HAL_DMA_Init+0x70>)
    hdma->DmaBaseAddress = DMA1;
 8001466:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800146a:	440a      	add	r2, r1
 800146c:	fbb2 f2f4 	udiv	r2, r2, r4
 8001470:	0092      	lsls	r2, r2, #2
 8001472:	6402      	str	r2, [r0, #64]	; 0x40
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 8001474:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001476:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 800147a:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800147c:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 800147e:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001480:	4323      	orrs	r3, r4
 8001482:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001484:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001488:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800148a:	6944      	ldr	r4, [r0, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800148c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001490:	4323      	orrs	r3, r4
 8001492:	6984      	ldr	r4, [r0, #24]
 8001494:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001496:	69c4      	ldr	r4, [r0, #28]
 8001498:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800149a:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800149c:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800149e:	f44f 7280 	mov.w	r2, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a2:	2300      	movs	r3, #0
  hdma->Lock = HAL_UNLOCKED;
 80014a4:	8402      	strh	r2, [r0, #32]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a6:	6383      	str	r3, [r0, #56]	; 0x38

  return HAL_OK;
 80014a8:	4618      	mov	r0, r3
}
 80014aa:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_DMA_Init+0x74>)
 80014ae:	440b      	add	r3, r1
 80014b0:	fbb3 f3f4 	udiv	r3, r3, r4
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <HAL_DMA_Init+0x78>)
 80014ba:	e7db      	b.n	8001474 <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 80014bc:	2001      	movs	r0, #1
 80014be:	e7f4      	b.n	80014aa <HAL_DMA_Init+0x56>
 80014c0:	40020407 	.word	0x40020407
 80014c4:	bffdfff8 	.word	0xbffdfff8
 80014c8:	bffdfbf8 	.word	0xbffdfbf8
 80014cc:	40020400 	.word	0x40020400

080014d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014d0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014d2:	f890 4020 	ldrb.w	r4, [r0, #32]
 80014d6:	2c01      	cmp	r4, #1
 80014d8:	d034      	beq.n	8001544 <HAL_DMA_Start_IT+0x74>
 80014da:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014dc:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80014e0:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80014e4:	42a5      	cmp	r5, r4
 80014e6:	f04f 0600 	mov.w	r6, #0
 80014ea:	f04f 0402 	mov.w	r4, #2
 80014ee:	d127      	bne.n	8001540 <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014f0:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014f4:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014f6:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80014f8:	6826      	ldr	r6, [r4, #0]
 80014fa:	f026 0601 	bic.w	r6, r6, #1
 80014fe:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001500:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8001504:	40bd      	lsls	r5, r7
 8001506:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001508:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800150a:	6843      	ldr	r3, [r0, #4]
 800150c:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 800150e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001510:	bf0b      	itete	eq
 8001512:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001514:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001516:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001518:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800151a:	b14b      	cbz	r3, 8001530 <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800151c:	6823      	ldr	r3, [r4, #0]
 800151e:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8001522:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001524:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001526:	6823      	ldr	r3, [r4, #0]
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6023      	str	r3, [r4, #0]
}
 800152e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001530:	6823      	ldr	r3, [r4, #0]
 8001532:	f023 0304 	bic.w	r3, r3, #4
 8001536:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001538:	6823      	ldr	r3, [r4, #0]
 800153a:	f043 030a 	orr.w	r3, r3, #10
 800153e:	e7f0      	b.n	8001522 <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8001540:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8001544:	2002      	movs	r0, #2
 8001546:	e7f2      	b.n	800152e <HAL_DMA_Start_IT+0x5e>

08001548 <HAL_DMA_IRQHandler>:
{
 8001548:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800154a:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800154c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800154e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001550:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001552:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001554:	4095      	lsls	r5, r2
 8001556:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001558:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800155a:	f000 8085 	beq.w	8001668 <HAL_DMA_IRQHandler+0x120>
 800155e:	074d      	lsls	r5, r1, #29
 8001560:	f140 8082 	bpl.w	8001668 <HAL_DMA_IRQHandler+0x120>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	4991      	ldr	r1, [pc, #580]	; (80017ac <HAL_DMA_IRQHandler+0x264>)
 8001568:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800156a:	bf5e      	ittt	pl
 800156c:	681a      	ldrpl	r2, [r3, #0]
 800156e:	f022 0204 	bicpl.w	r2, r2, #4
 8001572:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001574:	4a8e      	ldr	r2, [pc, #568]	; (80017b0 <HAL_DMA_IRQHandler+0x268>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d93e      	bls.n	80015f8 <HAL_DMA_IRQHandler+0xb0>
 800157a:	428b      	cmp	r3, r1
 800157c:	d035      	beq.n	80015ea <HAL_DMA_IRQHandler+0xa2>
 800157e:	3114      	adds	r1, #20
 8001580:	428b      	cmp	r3, r1
 8001582:	d034      	beq.n	80015ee <HAL_DMA_IRQHandler+0xa6>
 8001584:	3114      	adds	r1, #20
 8001586:	428b      	cmp	r3, r1
 8001588:	d033      	beq.n	80015f2 <HAL_DMA_IRQHandler+0xaa>
 800158a:	3114      	adds	r1, #20
 800158c:	428b      	cmp	r3, r1
 800158e:	d020      	beq.n	80015d2 <HAL_DMA_IRQHandler+0x8a>
 8001590:	3114      	adds	r1, #20
 8001592:	428b      	cmp	r3, r1
 8001594:	d020      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x90>
 8001596:	3114      	adds	r1, #20
 8001598:	428b      	cmp	r3, r1
 800159a:	d020      	beq.n	80015de <HAL_DMA_IRQHandler+0x96>
 800159c:	4293      	cmp	r3, r2
 800159e:	d021      	beq.n	80015e4 <HAL_DMA_IRQHandler+0x9c>
 80015a0:	f502 7262 	add.w	r2, r2, #904	; 0x388
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d020      	beq.n	80015ea <HAL_DMA_IRQHandler+0xa2>
 80015a8:	3214      	adds	r2, #20
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d01f      	beq.n	80015ee <HAL_DMA_IRQHandler+0xa6>
 80015ae:	3214      	adds	r2, #20
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d01e      	beq.n	80015f2 <HAL_DMA_IRQHandler+0xaa>
 80015b4:	3214      	adds	r2, #20
 80015b6:	4293      	cmp	r3, r2
 80015b8:	bf14      	ite	ne
 80015ba:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 80015be:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 80015c2:	4a7c      	ldr	r2, [pc, #496]	; (80017b4 <HAL_DMA_IRQHandler+0x26c>)
 80015c4:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80015c6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 80ed 	beq.w	80017a8 <HAL_DMA_IRQHandler+0x260>
}
 80015ce:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80015d0:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80015d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015d6:	e7f4      	b.n	80015c2 <HAL_DMA_IRQHandler+0x7a>
 80015d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80015dc:	e7f1      	b.n	80015c2 <HAL_DMA_IRQHandler+0x7a>
 80015de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015e2:	e7ee      	b.n	80015c2 <HAL_DMA_IRQHandler+0x7a>
 80015e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80015e8:	e7eb      	b.n	80015c2 <HAL_DMA_IRQHandler+0x7a>
 80015ea:	2304      	movs	r3, #4
 80015ec:	e7e9      	b.n	80015c2 <HAL_DMA_IRQHandler+0x7a>
 80015ee:	2340      	movs	r3, #64	; 0x40
 80015f0:	e7e7      	b.n	80015c2 <HAL_DMA_IRQHandler+0x7a>
 80015f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015f6:	e7e4      	b.n	80015c2 <HAL_DMA_IRQHandler+0x7a>
 80015f8:	428b      	cmp	r3, r1
 80015fa:	d02e      	beq.n	800165a <HAL_DMA_IRQHandler+0x112>
 80015fc:	496e      	ldr	r1, [pc, #440]	; (80017b8 <HAL_DMA_IRQHandler+0x270>)
 80015fe:	428b      	cmp	r3, r1
 8001600:	d02d      	beq.n	800165e <HAL_DMA_IRQHandler+0x116>
 8001602:	3114      	adds	r1, #20
 8001604:	428b      	cmp	r3, r1
 8001606:	d02c      	beq.n	8001662 <HAL_DMA_IRQHandler+0x11a>
 8001608:	3114      	adds	r1, #20
 800160a:	428b      	cmp	r3, r1
 800160c:	d019      	beq.n	8001642 <HAL_DMA_IRQHandler+0xfa>
 800160e:	3114      	adds	r1, #20
 8001610:	428b      	cmp	r3, r1
 8001612:	d019      	beq.n	8001648 <HAL_DMA_IRQHandler+0x100>
 8001614:	3114      	adds	r1, #20
 8001616:	428b      	cmp	r3, r1
 8001618:	d019      	beq.n	800164e <HAL_DMA_IRQHandler+0x106>
 800161a:	4293      	cmp	r3, r2
 800161c:	d01a      	beq.n	8001654 <HAL_DMA_IRQHandler+0x10c>
 800161e:	4a67      	ldr	r2, [pc, #412]	; (80017bc <HAL_DMA_IRQHandler+0x274>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d01a      	beq.n	800165a <HAL_DMA_IRQHandler+0x112>
 8001624:	3214      	adds	r2, #20
 8001626:	4293      	cmp	r3, r2
 8001628:	d019      	beq.n	800165e <HAL_DMA_IRQHandler+0x116>
 800162a:	3214      	adds	r2, #20
 800162c:	4293      	cmp	r3, r2
 800162e:	d018      	beq.n	8001662 <HAL_DMA_IRQHandler+0x11a>
 8001630:	3214      	adds	r2, #20
 8001632:	4293      	cmp	r3, r2
 8001634:	bf14      	ite	ne
 8001636:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 800163a:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 800163e:	4a60      	ldr	r2, [pc, #384]	; (80017c0 <HAL_DMA_IRQHandler+0x278>)
 8001640:	e7c0      	b.n	80015c4 <HAL_DMA_IRQHandler+0x7c>
 8001642:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001646:	e7fa      	b.n	800163e <HAL_DMA_IRQHandler+0xf6>
 8001648:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800164c:	e7f7      	b.n	800163e <HAL_DMA_IRQHandler+0xf6>
 800164e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001652:	e7f4      	b.n	800163e <HAL_DMA_IRQHandler+0xf6>
 8001654:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001658:	e7f1      	b.n	800163e <HAL_DMA_IRQHandler+0xf6>
 800165a:	2304      	movs	r3, #4
 800165c:	e7ef      	b.n	800163e <HAL_DMA_IRQHandler+0xf6>
 800165e:	2340      	movs	r3, #64	; 0x40
 8001660:	e7ed      	b.n	800163e <HAL_DMA_IRQHandler+0xf6>
 8001662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001666:	e7ea      	b.n	800163e <HAL_DMA_IRQHandler+0xf6>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001668:	2502      	movs	r5, #2
 800166a:	4095      	lsls	r5, r2
 800166c:	4225      	tst	r5, r4
 800166e:	f000 8087 	beq.w	8001780 <HAL_DMA_IRQHandler+0x238>
 8001672:	078d      	lsls	r5, r1, #30
 8001674:	f140 8084 	bpl.w	8001780 <HAL_DMA_IRQHandler+0x238>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	0694      	lsls	r4, r2, #26
 800167c:	d406      	bmi.n	800168c <HAL_DMA_IRQHandler+0x144>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	f022 020a 	bic.w	r2, r2, #10
 8001684:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001686:	2201      	movs	r2, #1
 8001688:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800168c:	4a48      	ldr	r2, [pc, #288]	; (80017b0 <HAL_DMA_IRQHandler+0x268>)
 800168e:	4947      	ldr	r1, [pc, #284]	; (80017ac <HAL_DMA_IRQHandler+0x264>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d93d      	bls.n	8001710 <HAL_DMA_IRQHandler+0x1c8>
 8001694:	428b      	cmp	r3, r1
 8001696:	d034      	beq.n	8001702 <HAL_DMA_IRQHandler+0x1ba>
 8001698:	3114      	adds	r1, #20
 800169a:	428b      	cmp	r3, r1
 800169c:	d033      	beq.n	8001706 <HAL_DMA_IRQHandler+0x1be>
 800169e:	3114      	adds	r1, #20
 80016a0:	428b      	cmp	r3, r1
 80016a2:	d032      	beq.n	800170a <HAL_DMA_IRQHandler+0x1c2>
 80016a4:	3114      	adds	r1, #20
 80016a6:	428b      	cmp	r3, r1
 80016a8:	d01f      	beq.n	80016ea <HAL_DMA_IRQHandler+0x1a2>
 80016aa:	3114      	adds	r1, #20
 80016ac:	428b      	cmp	r3, r1
 80016ae:	d01f      	beq.n	80016f0 <HAL_DMA_IRQHandler+0x1a8>
 80016b0:	3114      	adds	r1, #20
 80016b2:	428b      	cmp	r3, r1
 80016b4:	d01f      	beq.n	80016f6 <HAL_DMA_IRQHandler+0x1ae>
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d020      	beq.n	80016fc <HAL_DMA_IRQHandler+0x1b4>
 80016ba:	f502 7262 	add.w	r2, r2, #904	; 0x388
 80016be:	4293      	cmp	r3, r2
 80016c0:	d01f      	beq.n	8001702 <HAL_DMA_IRQHandler+0x1ba>
 80016c2:	3214      	adds	r2, #20
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d01e      	beq.n	8001706 <HAL_DMA_IRQHandler+0x1be>
 80016c8:	3214      	adds	r2, #20
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d01d      	beq.n	800170a <HAL_DMA_IRQHandler+0x1c2>
 80016ce:	3214      	adds	r2, #20
 80016d0:	4293      	cmp	r3, r2
 80016d2:	bf14      	ite	ne
 80016d4:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 80016d8:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 80016dc:	4a35      	ldr	r2, [pc, #212]	; (80017b4 <HAL_DMA_IRQHandler+0x26c>)
 80016de:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80016e0:	2300      	movs	r3, #0
 80016e2:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80016e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80016e8:	e76e      	b.n	80015c8 <HAL_DMA_IRQHandler+0x80>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80016ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ee:	e7f5      	b.n	80016dc <HAL_DMA_IRQHandler+0x194>
 80016f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016f4:	e7f2      	b.n	80016dc <HAL_DMA_IRQHandler+0x194>
 80016f6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016fa:	e7ef      	b.n	80016dc <HAL_DMA_IRQHandler+0x194>
 80016fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001700:	e7ec      	b.n	80016dc <HAL_DMA_IRQHandler+0x194>
 8001702:	2302      	movs	r3, #2
 8001704:	e7ea      	b.n	80016dc <HAL_DMA_IRQHandler+0x194>
 8001706:	2320      	movs	r3, #32
 8001708:	e7e8      	b.n	80016dc <HAL_DMA_IRQHandler+0x194>
 800170a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800170e:	e7e5      	b.n	80016dc <HAL_DMA_IRQHandler+0x194>
 8001710:	428b      	cmp	r3, r1
 8001712:	d02e      	beq.n	8001772 <HAL_DMA_IRQHandler+0x22a>
 8001714:	4928      	ldr	r1, [pc, #160]	; (80017b8 <HAL_DMA_IRQHandler+0x270>)
 8001716:	428b      	cmp	r3, r1
 8001718:	d02d      	beq.n	8001776 <HAL_DMA_IRQHandler+0x22e>
 800171a:	3114      	adds	r1, #20
 800171c:	428b      	cmp	r3, r1
 800171e:	d02c      	beq.n	800177a <HAL_DMA_IRQHandler+0x232>
 8001720:	3114      	adds	r1, #20
 8001722:	428b      	cmp	r3, r1
 8001724:	d019      	beq.n	800175a <HAL_DMA_IRQHandler+0x212>
 8001726:	3114      	adds	r1, #20
 8001728:	428b      	cmp	r3, r1
 800172a:	d019      	beq.n	8001760 <HAL_DMA_IRQHandler+0x218>
 800172c:	3114      	adds	r1, #20
 800172e:	428b      	cmp	r3, r1
 8001730:	d019      	beq.n	8001766 <HAL_DMA_IRQHandler+0x21e>
 8001732:	4293      	cmp	r3, r2
 8001734:	d01a      	beq.n	800176c <HAL_DMA_IRQHandler+0x224>
 8001736:	4a21      	ldr	r2, [pc, #132]	; (80017bc <HAL_DMA_IRQHandler+0x274>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d01a      	beq.n	8001772 <HAL_DMA_IRQHandler+0x22a>
 800173c:	3214      	adds	r2, #20
 800173e:	4293      	cmp	r3, r2
 8001740:	d019      	beq.n	8001776 <HAL_DMA_IRQHandler+0x22e>
 8001742:	3214      	adds	r2, #20
 8001744:	4293      	cmp	r3, r2
 8001746:	d018      	beq.n	800177a <HAL_DMA_IRQHandler+0x232>
 8001748:	3214      	adds	r2, #20
 800174a:	4293      	cmp	r3, r2
 800174c:	bf14      	ite	ne
 800174e:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8001752:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 8001756:	4a1a      	ldr	r2, [pc, #104]	; (80017c0 <HAL_DMA_IRQHandler+0x278>)
 8001758:	e7c1      	b.n	80016de <HAL_DMA_IRQHandler+0x196>
 800175a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800175e:	e7fa      	b.n	8001756 <HAL_DMA_IRQHandler+0x20e>
 8001760:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001764:	e7f7      	b.n	8001756 <HAL_DMA_IRQHandler+0x20e>
 8001766:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800176a:	e7f4      	b.n	8001756 <HAL_DMA_IRQHandler+0x20e>
 800176c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001770:	e7f1      	b.n	8001756 <HAL_DMA_IRQHandler+0x20e>
 8001772:	2302      	movs	r3, #2
 8001774:	e7ef      	b.n	8001756 <HAL_DMA_IRQHandler+0x20e>
 8001776:	2320      	movs	r3, #32
 8001778:	e7ed      	b.n	8001756 <HAL_DMA_IRQHandler+0x20e>
 800177a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800177e:	e7ea      	b.n	8001756 <HAL_DMA_IRQHandler+0x20e>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001780:	2508      	movs	r5, #8
 8001782:	4095      	lsls	r5, r2
 8001784:	4225      	tst	r5, r4
 8001786:	d00f      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x260>
 8001788:	0709      	lsls	r1, r1, #28
 800178a:	d50d      	bpl.n	80017a8 <HAL_DMA_IRQHandler+0x260>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800178c:	6819      	ldr	r1, [r3, #0]
 800178e:	f021 010e 	bic.w	r1, r1, #14
 8001792:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001794:	2301      	movs	r3, #1
 8001796:	fa03 f202 	lsl.w	r2, r3, r2
 800179a:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800179c:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 800179e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017a2:	8403      	strh	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80017a4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80017a6:	e70f      	b.n	80015c8 <HAL_DMA_IRQHandler+0x80>
}
 80017a8:	bc70      	pop	{r4, r5, r6}
 80017aa:	4770      	bx	lr
 80017ac:	40020008 	.word	0x40020008
 80017b0:	40020080 	.word	0x40020080
 80017b4:	40020400 	.word	0x40020400
 80017b8:	4002001c 	.word	0x4002001c
 80017bc:	40020408 	.word	0x40020408
 80017c0:	40020000 	.word	0x40020000

080017c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017c8:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80017ca:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017cc:	4f6a      	ldr	r7, [pc, #424]	; (8001978 <HAL_GPIO_Init+0x1b4>)
 80017ce:	4b6b      	ldr	r3, [pc, #428]	; (800197c <HAL_GPIO_Init+0x1b8>)
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017d0:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8001980 <HAL_GPIO_Init+0x1bc>
      switch (GPIO_Init->Mode)
 80017d4:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 8001984 <HAL_GPIO_Init+0x1c0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d8:	680c      	ldr	r4, [r1, #0]
 80017da:	fa34 f506 	lsrs.w	r5, r4, r6
 80017de:	d102      	bne.n	80017e6 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 80017e0:	b003      	add	sp, #12
 80017e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80017e6:	f04f 0801 	mov.w	r8, #1
 80017ea:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ee:	ea04 0508 	and.w	r5, r4, r8
    if (iocurrent == ioposition)
 80017f2:	ea38 0404 	bics.w	r4, r8, r4
 80017f6:	f040 8081 	bne.w	80018fc <HAL_GPIO_Init+0x138>
      switch (GPIO_Init->Mode)
 80017fa:	684c      	ldr	r4, [r1, #4]
 80017fc:	2c03      	cmp	r4, #3
 80017fe:	d807      	bhi.n	8001810 <HAL_GPIO_Init+0x4c>
 8001800:	3c01      	subs	r4, #1
 8001802:	2c02      	cmp	r4, #2
 8001804:	f200 808c 	bhi.w	8001920 <HAL_GPIO_Init+0x15c>
 8001808:	e8df f004 	tbb	[pc, r4]
 800180c:	a29d      	.short	0xa29d
 800180e:	a8          	.byte	0xa8
 800180f:	00          	.byte	0x00
 8001810:	2c12      	cmp	r4, #18
 8001812:	f000 80a0 	beq.w	8001956 <HAL_GPIO_Init+0x192>
 8001816:	d873      	bhi.n	8001900 <HAL_GPIO_Init+0x13c>
 8001818:	2c11      	cmp	r4, #17
 800181a:	f000 8096 	beq.w	800194a <HAL_GPIO_Init+0x186>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800181e:	2dff      	cmp	r5, #255	; 0xff
 8001820:	bf98      	it	ls
 8001822:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001824:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001828:	bf88      	it	hi
 800182a:	f100 0a04 	addhi.w	sl, r0, #4
 800182e:	ea4f 0486 	mov.w	r4, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001832:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001836:	bf88      	it	hi
 8001838:	3c20      	subhi	r4, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800183a:	fa09 fb04 	lsl.w	fp, r9, r4
 800183e:	ea28 080b 	bic.w	r8, r8, fp
 8001842:	fa02 f404 	lsl.w	r4, r2, r4
 8001846:	ea48 0404 	orr.w	r4, r8, r4
 800184a:	f8ca 4000 	str.w	r4, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800184e:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001852:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001856:	d051      	beq.n	80018fc <HAL_GPIO_Init+0x138>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001858:	69bc      	ldr	r4, [r7, #24]
 800185a:	f026 0803 	bic.w	r8, r6, #3
 800185e:	f044 0401 	orr.w	r4, r4, #1
 8001862:	61bc      	str	r4, [r7, #24]
 8001864:	69bc      	ldr	r4, [r7, #24]
 8001866:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800186a:	f004 0401 	and.w	r4, r4, #1
 800186e:	9401      	str	r4, [sp, #4]
 8001870:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001874:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001878:	9c01      	ldr	r4, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800187a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800187e:	f8d8 4008 	ldr.w	r4, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001882:	fa09 f90b 	lsl.w	r9, r9, fp
 8001886:	ea24 0909 	bic.w	r9, r4, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800188a:	4c3f      	ldr	r4, [pc, #252]	; (8001988 <HAL_GPIO_Init+0x1c4>)
 800188c:	42a0      	cmp	r0, r4
 800188e:	d069      	beq.n	8001964 <HAL_GPIO_Init+0x1a0>
 8001890:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001894:	42a0      	cmp	r0, r4
 8001896:	d067      	beq.n	8001968 <HAL_GPIO_Init+0x1a4>
 8001898:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800189c:	42a0      	cmp	r0, r4
 800189e:	d065      	beq.n	800196c <HAL_GPIO_Init+0x1a8>
 80018a0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80018a4:	42a0      	cmp	r0, r4
 80018a6:	d063      	beq.n	8001970 <HAL_GPIO_Init+0x1ac>
 80018a8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80018ac:	42a0      	cmp	r0, r4
 80018ae:	d061      	beq.n	8001974 <HAL_GPIO_Init+0x1b0>
 80018b0:	4560      	cmp	r0, ip
 80018b2:	bf0c      	ite	eq
 80018b4:	2405      	moveq	r4, #5
 80018b6:	2406      	movne	r4, #6
 80018b8:	fa04 f40b 	lsl.w	r4, r4, fp
 80018bc:	ea44 0409 	orr.w	r4, r4, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80018c0:	f8c8 4008 	str.w	r4, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80018c4:	681c      	ldr	r4, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018c6:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80018ca:	bf14      	ite	ne
 80018cc:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018ce:	43ac      	biceq	r4, r5
 80018d0:	601c      	str	r4, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80018d2:	685c      	ldr	r4, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018d4:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80018d8:	bf14      	ite	ne
 80018da:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018dc:	43ac      	biceq	r4, r5
 80018de:	605c      	str	r4, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80018e0:	689c      	ldr	r4, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018e2:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80018e6:	bf14      	ite	ne
 80018e8:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018ea:	43ac      	biceq	r4, r5
 80018ec:	609c      	str	r4, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80018ee:	68dc      	ldr	r4, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018f0:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80018f4:	bf14      	ite	ne
 80018f6:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018f8:	43ac      	biceq	r4, r5
 80018fa:	60dc      	str	r4, [r3, #12]
	position++;
 80018fc:	3601      	adds	r6, #1
 80018fe:	e76b      	b.n	80017d8 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8001900:	4574      	cmp	r4, lr
 8001902:	d00d      	beq.n	8001920 <HAL_GPIO_Init+0x15c>
 8001904:	d818      	bhi.n	8001938 <HAL_GPIO_Init+0x174>
 8001906:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800198c <HAL_GPIO_Init+0x1c8>
 800190a:	454c      	cmp	r4, r9
 800190c:	d008      	beq.n	8001920 <HAL_GPIO_Init+0x15c>
 800190e:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8001912:	454c      	cmp	r4, r9
 8001914:	d004      	beq.n	8001920 <HAL_GPIO_Init+0x15c>
 8001916:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800191a:	454c      	cmp	r4, r9
 800191c:	f47f af7f 	bne.w	800181e <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001920:	688a      	ldr	r2, [r1, #8]
 8001922:	b1ea      	cbz	r2, 8001960 <HAL_GPIO_Init+0x19c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001924:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001926:	bf08      	it	eq
 8001928:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800192c:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8001930:	bf18      	it	ne
 8001932:	f8c0 8014 	strne.w	r8, [r0, #20]
 8001936:	e772      	b.n	800181e <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 8001938:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8001990 <HAL_GPIO_Init+0x1cc>
 800193c:	454c      	cmp	r4, r9
 800193e:	d0ef      	beq.n	8001920 <HAL_GPIO_Init+0x15c>
 8001940:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001944:	e7e9      	b.n	800191a <HAL_GPIO_Init+0x156>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001946:	68ca      	ldr	r2, [r1, #12]
          break;
 8001948:	e769      	b.n	800181e <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800194a:	68ca      	ldr	r2, [r1, #12]
 800194c:	3204      	adds	r2, #4
          break;
 800194e:	e766      	b.n	800181e <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001950:	68ca      	ldr	r2, [r1, #12]
 8001952:	3208      	adds	r2, #8
          break;
 8001954:	e763      	b.n	800181e <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001956:	68ca      	ldr	r2, [r1, #12]
 8001958:	320c      	adds	r2, #12
          break;
 800195a:	e760      	b.n	800181e <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 800195c:	2200      	movs	r2, #0
 800195e:	e75e      	b.n	800181e <HAL_GPIO_Init+0x5a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001960:	2204      	movs	r2, #4
 8001962:	e75c      	b.n	800181e <HAL_GPIO_Init+0x5a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001964:	2400      	movs	r4, #0
 8001966:	e7a7      	b.n	80018b8 <HAL_GPIO_Init+0xf4>
 8001968:	2401      	movs	r4, #1
 800196a:	e7a5      	b.n	80018b8 <HAL_GPIO_Init+0xf4>
 800196c:	2402      	movs	r4, #2
 800196e:	e7a3      	b.n	80018b8 <HAL_GPIO_Init+0xf4>
 8001970:	2403      	movs	r4, #3
 8001972:	e7a1      	b.n	80018b8 <HAL_GPIO_Init+0xf4>
 8001974:	2404      	movs	r4, #4
 8001976:	e79f      	b.n	80018b8 <HAL_GPIO_Init+0xf4>
 8001978:	40021000 	.word	0x40021000
 800197c:	40010400 	.word	0x40010400
 8001980:	40011c00 	.word	0x40011c00
 8001984:	10220000 	.word	0x10220000
 8001988:	40010800 	.word	0x40010800
 800198c:	10120000 	.word	0x10120000
 8001990:	10310000 	.word	0x10310000

08001994 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001994:	6883      	ldr	r3, [r0, #8]
 8001996:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001998:	bf14      	ite	ne
 800199a:	2001      	movne	r0, #1
 800199c:	2000      	moveq	r0, #0
 800199e:	4770      	bx	lr

080019a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019a0:	b10a      	cbz	r2, 80019a6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019a2:	6101      	str	r1, [r0, #16]
  }
}
 80019a4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019a6:	0409      	lsls	r1, r1, #16
 80019a8:	e7fb      	b.n	80019a2 <HAL_GPIO_WritePin+0x2>
	...

080019ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019b0:	4605      	mov	r5, r0
 80019b2:	b338      	cbz	r0, 8001a04 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019b4:	6803      	ldr	r3, [r0, #0]
 80019b6:	07db      	lsls	r3, r3, #31
 80019b8:	d410      	bmi.n	80019dc <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ba:	682b      	ldr	r3, [r5, #0]
 80019bc:	079f      	lsls	r7, r3, #30
 80019be:	d45e      	bmi.n	8001a7e <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019c0:	682b      	ldr	r3, [r5, #0]
 80019c2:	0719      	lsls	r1, r3, #28
 80019c4:	f100 8095 	bmi.w	8001af2 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c8:	682b      	ldr	r3, [r5, #0]
 80019ca:	075a      	lsls	r2, r3, #29
 80019cc:	f100 80c1 	bmi.w	8001b52 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019d0:	69e8      	ldr	r0, [r5, #28]
 80019d2:	2800      	cmp	r0, #0
 80019d4:	f040 812c 	bne.w	8001c30 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80019d8:	2000      	movs	r0, #0
 80019da:	e029      	b.n	8001a30 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019dc:	4c90      	ldr	r4, [pc, #576]	; (8001c20 <HAL_RCC_OscConfig+0x274>)
 80019de:	6863      	ldr	r3, [r4, #4]
 80019e0:	f003 030c 	and.w	r3, r3, #12
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d007      	beq.n	80019f8 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019e8:	6863      	ldr	r3, [r4, #4]
 80019ea:	f003 030c 	and.w	r3, r3, #12
 80019ee:	2b08      	cmp	r3, #8
 80019f0:	d10a      	bne.n	8001a08 <HAL_RCC_OscConfig+0x5c>
 80019f2:	6863      	ldr	r3, [r4, #4]
 80019f4:	03de      	lsls	r6, r3, #15
 80019f6:	d507      	bpl.n	8001a08 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f8:	6823      	ldr	r3, [r4, #0]
 80019fa:	039c      	lsls	r4, r3, #14
 80019fc:	d5dd      	bpl.n	80019ba <HAL_RCC_OscConfig+0xe>
 80019fe:	686b      	ldr	r3, [r5, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1da      	bne.n	80019ba <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8001a04:	2001      	movs	r0, #1
 8001a06:	e013      	b.n	8001a30 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a08:	686b      	ldr	r3, [r5, #4]
 8001a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a0e:	d112      	bne.n	8001a36 <HAL_RCC_OscConfig+0x8a>
 8001a10:	6823      	ldr	r3, [r4, #0]
 8001a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a16:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a18:	f7ff fc9e 	bl	8001358 <HAL_GetTick>
 8001a1c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1e:	6823      	ldr	r3, [r4, #0]
 8001a20:	0398      	lsls	r0, r3, #14
 8001a22:	d4ca      	bmi.n	80019ba <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a24:	f7ff fc98 	bl	8001358 <HAL_GetTick>
 8001a28:	1b80      	subs	r0, r0, r6
 8001a2a:	2864      	cmp	r0, #100	; 0x64
 8001a2c:	d9f7      	bls.n	8001a1e <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8001a2e:	2003      	movs	r0, #3
}
 8001a30:	b002      	add	sp, #8
 8001a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a36:	b99b      	cbnz	r3, 8001a60 <HAL_RCC_OscConfig+0xb4>
 8001a38:	6823      	ldr	r3, [r4, #0]
 8001a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a3e:	6023      	str	r3, [r4, #0]
 8001a40:	6823      	ldr	r3, [r4, #0]
 8001a42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a46:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a48:	f7ff fc86 	bl	8001358 <HAL_GetTick>
 8001a4c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4e:	6823      	ldr	r3, [r4, #0]
 8001a50:	0399      	lsls	r1, r3, #14
 8001a52:	d5b2      	bpl.n	80019ba <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a54:	f7ff fc80 	bl	8001358 <HAL_GetTick>
 8001a58:	1b80      	subs	r0, r0, r6
 8001a5a:	2864      	cmp	r0, #100	; 0x64
 8001a5c:	d9f7      	bls.n	8001a4e <HAL_RCC_OscConfig+0xa2>
 8001a5e:	e7e6      	b.n	8001a2e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a64:	6823      	ldr	r3, [r4, #0]
 8001a66:	d103      	bne.n	8001a70 <HAL_RCC_OscConfig+0xc4>
 8001a68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a6c:	6023      	str	r3, [r4, #0]
 8001a6e:	e7cf      	b.n	8001a10 <HAL_RCC_OscConfig+0x64>
 8001a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a74:	6023      	str	r3, [r4, #0]
 8001a76:	6823      	ldr	r3, [r4, #0]
 8001a78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a7c:	e7cb      	b.n	8001a16 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a7e:	4c68      	ldr	r4, [pc, #416]	; (8001c20 <HAL_RCC_OscConfig+0x274>)
 8001a80:	6863      	ldr	r3, [r4, #4]
 8001a82:	f013 0f0c 	tst.w	r3, #12
 8001a86:	d007      	beq.n	8001a98 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a88:	6863      	ldr	r3, [r4, #4]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	2b08      	cmp	r3, #8
 8001a90:	d110      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x108>
 8001a92:	6863      	ldr	r3, [r4, #4]
 8001a94:	03da      	lsls	r2, r3, #15
 8001a96:	d40d      	bmi.n	8001ab4 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a98:	6823      	ldr	r3, [r4, #0]
 8001a9a:	079b      	lsls	r3, r3, #30
 8001a9c:	d502      	bpl.n	8001aa4 <HAL_RCC_OscConfig+0xf8>
 8001a9e:	692b      	ldr	r3, [r5, #16]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d1af      	bne.n	8001a04 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa4:	6823      	ldr	r3, [r4, #0]
 8001aa6:	696a      	ldr	r2, [r5, #20]
 8001aa8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001aac:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001ab0:	6023      	str	r3, [r4, #0]
 8001ab2:	e785      	b.n	80019c0 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ab4:	692a      	ldr	r2, [r5, #16]
 8001ab6:	4b5b      	ldr	r3, [pc, #364]	; (8001c24 <HAL_RCC_OscConfig+0x278>)
 8001ab8:	b16a      	cbz	r2, 8001ad6 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8001aba:	2201      	movs	r2, #1
 8001abc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001abe:	f7ff fc4b 	bl	8001358 <HAL_GetTick>
 8001ac2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac4:	6823      	ldr	r3, [r4, #0]
 8001ac6:	079f      	lsls	r7, r3, #30
 8001ac8:	d4ec      	bmi.n	8001aa4 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aca:	f7ff fc45 	bl	8001358 <HAL_GetTick>
 8001ace:	1b80      	subs	r0, r0, r6
 8001ad0:	2802      	cmp	r0, #2
 8001ad2:	d9f7      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x118>
 8001ad4:	e7ab      	b.n	8001a2e <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8001ad6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fc3e 	bl	8001358 <HAL_GetTick>
 8001adc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ade:	6823      	ldr	r3, [r4, #0]
 8001ae0:	0798      	lsls	r0, r3, #30
 8001ae2:	f57f af6d 	bpl.w	80019c0 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae6:	f7ff fc37 	bl	8001358 <HAL_GetTick>
 8001aea:	1b80      	subs	r0, r0, r6
 8001aec:	2802      	cmp	r0, #2
 8001aee:	d9f6      	bls.n	8001ade <HAL_RCC_OscConfig+0x132>
 8001af0:	e79d      	b.n	8001a2e <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001af2:	69aa      	ldr	r2, [r5, #24]
 8001af4:	4e4a      	ldr	r6, [pc, #296]	; (8001c20 <HAL_RCC_OscConfig+0x274>)
 8001af6:	4b4b      	ldr	r3, [pc, #300]	; (8001c24 <HAL_RCC_OscConfig+0x278>)
 8001af8:	b1e2      	cbz	r2, 8001b34 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001afa:	2201      	movs	r2, #1
 8001afc:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001b00:	f7ff fc2a 	bl	8001358 <HAL_GetTick>
 8001b04:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b06:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001b08:	079b      	lsls	r3, r3, #30
 8001b0a:	d50d      	bpl.n	8001b28 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b0c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001b10:	4b45      	ldr	r3, [pc, #276]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b18:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001b1a:	bf00      	nop
  }
  while (Delay --);
 8001b1c:	9b01      	ldr	r3, [sp, #4]
 8001b1e:	1e5a      	subs	r2, r3, #1
 8001b20:	9201      	str	r2, [sp, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f9      	bne.n	8001b1a <HAL_RCC_OscConfig+0x16e>
 8001b26:	e74f      	b.n	80019c8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b28:	f7ff fc16 	bl	8001358 <HAL_GetTick>
 8001b2c:	1b00      	subs	r0, r0, r4
 8001b2e:	2802      	cmp	r0, #2
 8001b30:	d9e9      	bls.n	8001b06 <HAL_RCC_OscConfig+0x15a>
 8001b32:	e77c      	b.n	8001a2e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8001b34:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001b38:	f7ff fc0e 	bl	8001358 <HAL_GetTick>
 8001b3c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b3e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001b40:	079f      	lsls	r7, r3, #30
 8001b42:	f57f af41 	bpl.w	80019c8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b46:	f7ff fc07 	bl	8001358 <HAL_GetTick>
 8001b4a:	1b00      	subs	r0, r0, r4
 8001b4c:	2802      	cmp	r0, #2
 8001b4e:	d9f6      	bls.n	8001b3e <HAL_RCC_OscConfig+0x192>
 8001b50:	e76d      	b.n	8001a2e <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b52:	4c33      	ldr	r4, [pc, #204]	; (8001c20 <HAL_RCC_OscConfig+0x274>)
 8001b54:	69e3      	ldr	r3, [r4, #28]
 8001b56:	00d8      	lsls	r0, r3, #3
 8001b58:	d424      	bmi.n	8001ba4 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8001b5a:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b5c:	69e3      	ldr	r3, [r4, #28]
 8001b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b62:	61e3      	str	r3, [r4, #28]
 8001b64:	69e3      	ldr	r3, [r4, #28]
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6e:	4e2f      	ldr	r6, [pc, #188]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001b70:	6833      	ldr	r3, [r6, #0]
 8001b72:	05d9      	lsls	r1, r3, #23
 8001b74:	d518      	bpl.n	8001ba8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b76:	68eb      	ldr	r3, [r5, #12]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d126      	bne.n	8001bca <HAL_RCC_OscConfig+0x21e>
 8001b7c:	6a23      	ldr	r3, [r4, #32]
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001b84:	f7ff fbe8 	bl	8001358 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b88:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001b8c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8e:	6a23      	ldr	r3, [r4, #32]
 8001b90:	079b      	lsls	r3, r3, #30
 8001b92:	d53f      	bpl.n	8001c14 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8001b94:	2f00      	cmp	r7, #0
 8001b96:	f43f af1b 	beq.w	80019d0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b9a:	69e3      	ldr	r3, [r4, #28]
 8001b9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	61e3      	str	r3, [r4, #28]
 8001ba2:	e715      	b.n	80019d0 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001ba4:	2700      	movs	r7, #0
 8001ba6:	e7e2      	b.n	8001b6e <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ba8:	6833      	ldr	r3, [r6, #0]
 8001baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bae:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001bb0:	f7ff fbd2 	bl	8001358 <HAL_GetTick>
 8001bb4:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb6:	6833      	ldr	r3, [r6, #0]
 8001bb8:	05da      	lsls	r2, r3, #23
 8001bba:	d4dc      	bmi.n	8001b76 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bbc:	f7ff fbcc 	bl	8001358 <HAL_GetTick>
 8001bc0:	eba0 0008 	sub.w	r0, r0, r8
 8001bc4:	2864      	cmp	r0, #100	; 0x64
 8001bc6:	d9f6      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x20a>
 8001bc8:	e731      	b.n	8001a2e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bca:	b9ab      	cbnz	r3, 8001bf8 <HAL_RCC_OscConfig+0x24c>
 8001bcc:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bce:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd2:	f023 0301 	bic.w	r3, r3, #1
 8001bd6:	6223      	str	r3, [r4, #32]
 8001bd8:	6a23      	ldr	r3, [r4, #32]
 8001bda:	f023 0304 	bic.w	r3, r3, #4
 8001bde:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001be0:	f7ff fbba 	bl	8001358 <HAL_GetTick>
 8001be4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be6:	6a23      	ldr	r3, [r4, #32]
 8001be8:	0798      	lsls	r0, r3, #30
 8001bea:	d5d3      	bpl.n	8001b94 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bec:	f7ff fbb4 	bl	8001358 <HAL_GetTick>
 8001bf0:	1b80      	subs	r0, r0, r6
 8001bf2:	4540      	cmp	r0, r8
 8001bf4:	d9f7      	bls.n	8001be6 <HAL_RCC_OscConfig+0x23a>
 8001bf6:	e71a      	b.n	8001a2e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf8:	2b05      	cmp	r3, #5
 8001bfa:	6a23      	ldr	r3, [r4, #32]
 8001bfc:	d103      	bne.n	8001c06 <HAL_RCC_OscConfig+0x25a>
 8001bfe:	f043 0304 	orr.w	r3, r3, #4
 8001c02:	6223      	str	r3, [r4, #32]
 8001c04:	e7ba      	b.n	8001b7c <HAL_RCC_OscConfig+0x1d0>
 8001c06:	f023 0301 	bic.w	r3, r3, #1
 8001c0a:	6223      	str	r3, [r4, #32]
 8001c0c:	6a23      	ldr	r3, [r4, #32]
 8001c0e:	f023 0304 	bic.w	r3, r3, #4
 8001c12:	e7b6      	b.n	8001b82 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c14:	f7ff fba0 	bl	8001358 <HAL_GetTick>
 8001c18:	1b80      	subs	r0, r0, r6
 8001c1a:	4540      	cmp	r0, r8
 8001c1c:	d9b7      	bls.n	8001b8e <HAL_RCC_OscConfig+0x1e2>
 8001c1e:	e706      	b.n	8001a2e <HAL_RCC_OscConfig+0x82>
 8001c20:	40021000 	.word	0x40021000
 8001c24:	42420000 	.word	0x42420000
 8001c28:	2000b868 	.word	0x2000b868
 8001c2c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c30:	4c2a      	ldr	r4, [pc, #168]	; (8001cdc <HAL_RCC_OscConfig+0x330>)
 8001c32:	6863      	ldr	r3, [r4, #4]
 8001c34:	f003 030c 	and.w	r3, r3, #12
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d03e      	beq.n	8001cba <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	4b28      	ldr	r3, [pc, #160]	; (8001ce0 <HAL_RCC_OscConfig+0x334>)
 8001c40:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001c42:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c44:	d12c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001c46:	f7ff fb87 	bl	8001358 <HAL_GetTick>
 8001c4a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c4c:	6823      	ldr	r3, [r4, #0]
 8001c4e:	0199      	lsls	r1, r3, #6
 8001c50:	d420      	bmi.n	8001c94 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c52:	6a2b      	ldr	r3, [r5, #32]
 8001c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c58:	d105      	bne.n	8001c66 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c5a:	6862      	ldr	r2, [r4, #4]
 8001c5c:	68a9      	ldr	r1, [r5, #8]
 8001c5e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001c62:	430a      	orrs	r2, r1
 8001c64:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c66:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001c68:	6862      	ldr	r2, [r4, #4]
 8001c6a:	430b      	orrs	r3, r1
 8001c6c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001c70:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8001c72:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c74:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001c76:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <HAL_RCC_OscConfig+0x334>)
 8001c78:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001c7a:	f7ff fb6d 	bl	8001358 <HAL_GetTick>
 8001c7e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c80:	6823      	ldr	r3, [r4, #0]
 8001c82:	019a      	lsls	r2, r3, #6
 8001c84:	f53f aea8 	bmi.w	80019d8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c88:	f7ff fb66 	bl	8001358 <HAL_GetTick>
 8001c8c:	1b40      	subs	r0, r0, r5
 8001c8e:	2802      	cmp	r0, #2
 8001c90:	d9f6      	bls.n	8001c80 <HAL_RCC_OscConfig+0x2d4>
 8001c92:	e6cc      	b.n	8001a2e <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c94:	f7ff fb60 	bl	8001358 <HAL_GetTick>
 8001c98:	1b80      	subs	r0, r0, r6
 8001c9a:	2802      	cmp	r0, #2
 8001c9c:	d9d6      	bls.n	8001c4c <HAL_RCC_OscConfig+0x2a0>
 8001c9e:	e6c6      	b.n	8001a2e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fb5a 	bl	8001358 <HAL_GetTick>
 8001ca4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca6:	6823      	ldr	r3, [r4, #0]
 8001ca8:	019b      	lsls	r3, r3, #6
 8001caa:	f57f ae95 	bpl.w	80019d8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cae:	f7ff fb53 	bl	8001358 <HAL_GetTick>
 8001cb2:	1b40      	subs	r0, r0, r5
 8001cb4:	2802      	cmp	r0, #2
 8001cb6:	d9f6      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x2fa>
 8001cb8:	e6b9      	b.n	8001a2e <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cba:	2801      	cmp	r0, #1
 8001cbc:	f43f aeb8 	beq.w	8001a30 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8001cc0:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc2:	6a2a      	ldr	r2, [r5, #32]
 8001cc4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001cc8:	4291      	cmp	r1, r2
 8001cca:	f47f ae9b 	bne.w	8001a04 <HAL_RCC_OscConfig+0x58>
 8001cce:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cd0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	f43f ae7f 	beq.w	80019d8 <HAL_RCC_OscConfig+0x2c>
 8001cda:	e693      	b.n	8001a04 <HAL_RCC_OscConfig+0x58>
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	42420000 	.word	0x42420000

08001ce4 <HAL_RCC_GetSysClockFreq>:
{
 8001ce4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ce6:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001ce8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001cea:	ac02      	add	r4, sp, #8
 8001cec:	f103 0510 	add.w	r5, r3, #16
 8001cf0:	4622      	mov	r2, r4
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	6859      	ldr	r1, [r3, #4]
 8001cf6:	3308      	adds	r3, #8
 8001cf8:	c203      	stmia	r2!, {r0, r1}
 8001cfa:	42ab      	cmp	r3, r5
 8001cfc:	4614      	mov	r4, r2
 8001cfe:	d1f7      	bne.n	8001cf0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d00:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8001d04:	4911      	ldr	r1, [pc, #68]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d06:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001d0a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001d0c:	f003 020c 	and.w	r2, r3, #12
 8001d10:	2a08      	cmp	r2, #8
 8001d12:	d117      	bne.n	8001d44 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d14:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001d18:	3218      	adds	r2, #24
 8001d1a:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d1c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d1e:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d22:	d50c      	bpl.n	8001d3e <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d24:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d26:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d28:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d2c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d2e:	3318      	adds	r3, #24
 8001d30:	446b      	add	r3, sp
 8001d32:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d36:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001d3a:	b007      	add	sp, #28
 8001d3c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d3e:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x70>)
 8001d40:	4358      	muls	r0, r3
 8001d42:	e7fa      	b.n	8001d3a <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8001d44:	4802      	ldr	r0, [pc, #8]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001d46:	e7f8      	b.n	8001d3a <HAL_RCC_GetSysClockFreq+0x56>
 8001d48:	0805cfd0 	.word	0x0805cfd0
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	007a1200 	.word	0x007a1200
 8001d54:	003d0900 	.word	0x003d0900

08001d58 <HAL_RCC_ClockConfig>:
{
 8001d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d5c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001d5e:	4604      	mov	r4, r0
 8001d60:	b910      	cbnz	r0, 8001d68 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001d62:	2001      	movs	r0, #1
}
 8001d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d68:	4a44      	ldr	r2, [pc, #272]	; (8001e7c <HAL_RCC_ClockConfig+0x124>)
 8001d6a:	6813      	ldr	r3, [r2, #0]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	428b      	cmp	r3, r1
 8001d72:	d328      	bcc.n	8001dc6 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d74:	6821      	ldr	r1, [r4, #0]
 8001d76:	078e      	lsls	r6, r1, #30
 8001d78:	d430      	bmi.n	8001ddc <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d7a:	07ca      	lsls	r2, r1, #31
 8001d7c:	d443      	bmi.n	8001e06 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d7e:	4a3f      	ldr	r2, [pc, #252]	; (8001e7c <HAL_RCC_ClockConfig+0x124>)
 8001d80:	6813      	ldr	r3, [r2, #0]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	42ab      	cmp	r3, r5
 8001d88:	d865      	bhi.n	8001e56 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d8a:	6822      	ldr	r2, [r4, #0]
 8001d8c:	4d3c      	ldr	r5, [pc, #240]	; (8001e80 <HAL_RCC_ClockConfig+0x128>)
 8001d8e:	f012 0f04 	tst.w	r2, #4
 8001d92:	d16c      	bne.n	8001e6e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d94:	0713      	lsls	r3, r2, #28
 8001d96:	d506      	bpl.n	8001da6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d98:	686b      	ldr	r3, [r5, #4]
 8001d9a:	6922      	ldr	r2, [r4, #16]
 8001d9c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001da0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001da4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001da6:	f7ff ff9d 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 8001daa:	686b      	ldr	r3, [r5, #4]
 8001dac:	4a35      	ldr	r2, [pc, #212]	; (8001e84 <HAL_RCC_ClockConfig+0x12c>)
 8001dae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001db2:	5cd3      	ldrb	r3, [r2, r3]
 8001db4:	40d8      	lsrs	r0, r3
 8001db6:	4b34      	ldr	r3, [pc, #208]	; (8001e88 <HAL_RCC_ClockConfig+0x130>)
 8001db8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001dba:	4b34      	ldr	r3, [pc, #208]	; (8001e8c <HAL_RCC_ClockConfig+0x134>)
 8001dbc:	6818      	ldr	r0, [r3, #0]
 8001dbe:	f7ff fa89 	bl	80012d4 <HAL_InitTick>
  return HAL_OK;
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	e7ce      	b.n	8001d64 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc6:	6813      	ldr	r3, [r2, #0]
 8001dc8:	f023 0307 	bic.w	r3, r3, #7
 8001dcc:	430b      	orrs	r3, r1
 8001dce:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd0:	6813      	ldr	r3, [r2, #0]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	428b      	cmp	r3, r1
 8001dd8:	d1c3      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xa>
 8001dda:	e7cb      	b.n	8001d74 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ddc:	4b28      	ldr	r3, [pc, #160]	; (8001e80 <HAL_RCC_ClockConfig+0x128>)
 8001dde:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001de2:	bf1e      	ittt	ne
 8001de4:	685a      	ldrne	r2, [r3, #4]
 8001de6:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001dea:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dec:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dee:	bf42      	ittt	mi
 8001df0:	685a      	ldrmi	r2, [r3, #4]
 8001df2:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001df6:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	68a0      	ldr	r0, [r4, #8]
 8001dfc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001e00:	4302      	orrs	r2, r0
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	e7b9      	b.n	8001d7a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e06:	6862      	ldr	r2, [r4, #4]
 8001e08:	4e1d      	ldr	r6, [pc, #116]	; (8001e80 <HAL_RCC_ClockConfig+0x128>)
 8001e0a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0c:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e0e:	d11a      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e10:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e14:	d0a5      	beq.n	8001d62 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e16:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e18:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e1c:	f023 0303 	bic.w	r3, r3, #3
 8001e20:	4313      	orrs	r3, r2
 8001e22:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001e24:	f7ff fa98 	bl	8001358 <HAL_GetTick>
 8001e28:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2a:	6873      	ldr	r3, [r6, #4]
 8001e2c:	6862      	ldr	r2, [r4, #4]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001e36:	d0a2      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e38:	f7ff fa8e 	bl	8001358 <HAL_GetTick>
 8001e3c:	1bc0      	subs	r0, r0, r7
 8001e3e:	4540      	cmp	r0, r8
 8001e40:	d9f3      	bls.n	8001e2a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8001e42:	2003      	movs	r0, #3
 8001e44:	e78e      	b.n	8001d64 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e46:	2a02      	cmp	r2, #2
 8001e48:	d102      	bne.n	8001e50 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e4e:	e7e1      	b.n	8001e14 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e50:	f013 0f02 	tst.w	r3, #2
 8001e54:	e7de      	b.n	8001e14 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e56:	6813      	ldr	r3, [r2, #0]
 8001e58:	f023 0307 	bic.w	r3, r3, #7
 8001e5c:	432b      	orrs	r3, r5
 8001e5e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e60:	6813      	ldr	r3, [r2, #0]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	42ab      	cmp	r3, r5
 8001e68:	f47f af7b 	bne.w	8001d62 <HAL_RCC_ClockConfig+0xa>
 8001e6c:	e78d      	b.n	8001d8a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e6e:	686b      	ldr	r3, [r5, #4]
 8001e70:	68e1      	ldr	r1, [r4, #12]
 8001e72:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e76:	430b      	orrs	r3, r1
 8001e78:	606b      	str	r3, [r5, #4]
 8001e7a:	e78b      	b.n	8001d94 <HAL_RCC_ClockConfig+0x3c>
 8001e7c:	40022000 	.word	0x40022000
 8001e80:	40021000 	.word	0x40021000
 8001e84:	0805cfc0 	.word	0x0805cfc0
 8001e88:	2000b868 	.word	0x2000b868
 8001e8c:	2000b870 	.word	0x2000b870

08001e90 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8001e90:	b570      	push	{r4, r5, r6, lr}
 8001e92:	460e      	mov	r6, r1
 8001e94:	4615      	mov	r5, r2
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8001e96:	4604      	mov	r4, r0
 8001e98:	b348      	cbz	r0, 8001eee <HAL_SRAM_Init+0x5e>
 8001e9a:	6983      	ldr	r3, [r0, #24]
 8001e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ea0:	d025      	beq.n	8001eee <HAL_SRAM_Init+0x5e>
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8001ea2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001ea6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001eaa:	b91b      	cbnz	r3, 8001eb4 <HAL_SRAM_Init+0x24>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8001eac:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8001eb0:	f7ff f986 	bl	80011c0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8001eb4:	f104 0108 	add.w	r1, r4, #8
 8001eb8:	6820      	ldr	r0, [r4, #0]
 8001eba:	f000 f81b 	bl	8001ef4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8001ebe:	4631      	mov	r1, r6
 8001ec0:	68a2      	ldr	r2, [r4, #8]
 8001ec2:	6820      	ldr	r0, [r4, #0]
 8001ec4:	f000 f848 	bl	8001f58 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8001ec8:	4629      	mov	r1, r5
 8001eca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ecc:	68a2      	ldr	r2, [r4, #8]
 8001ece:	6860      	ldr	r0, [r4, #4]
 8001ed0:	f000 f860 	bl	8001f94 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8001ed4:	6822      	ldr	r2, [r4, #0]
 8001ed6:	68a1      	ldr	r1, [r4, #8]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;

  return HAL_OK;
 8001ed8:	2000      	movs	r0, #0
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8001eda:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  hsram->State = HAL_SRAM_STATE_READY;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8001eec:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001eee:	2001      	movs	r0, #1
 8001ef0:	e7fc      	b.n	8001eec <HAL_SRAM_Init+0x5c>
	...

08001ef4 <FSMC_NORSRAM_Init>:
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8001ef4:	680a      	ldr	r2, [r1, #0]
{
 8001ef6:	b570      	push	{r4, r5, r6, lr}
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8001ef8:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8001efc:	684e      	ldr	r6, [r1, #4]
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8001efe:	f023 0301 	bic.w	r3, r3, #1
 8001f02:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8001f06:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8001f08:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	bf0c      	ite	eq
 8001f10:	2440      	moveq	r4, #64	; 0x40
 8001f12:	2400      	movne	r4, #0
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8001f14:	4333      	orrs	r3, r6
 8001f16:	68ce      	ldr	r6, [r1, #12]
 8001f18:	4333      	orrs	r3, r6
 8001f1a:	690e      	ldr	r6, [r1, #16]
 8001f1c:	4333      	orrs	r3, r6
 8001f1e:	694e      	ldr	r6, [r1, #20]
 8001f20:	4333      	orrs	r3, r6
 8001f22:	69ce      	ldr	r6, [r1, #28]
 8001f24:	4333      	orrs	r3, r6
 8001f26:	6a0e      	ldr	r6, [r1, #32]
 8001f28:	4333      	orrs	r3, r6
 8001f2a:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8001f2c:	4333      	orrs	r3, r6
 8001f2e:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8001f30:	4333      	orrs	r3, r6
 8001f32:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8001f34:	4333      	orrs	r3, r6
 8001f36:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8001f38:	4333      	orrs	r3, r6
 8001f3a:	698e      	ldr	r6, [r1, #24]
 8001f3c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8001f3e:	4333      	orrs	r3, r6
 8001f40:	430b      	orrs	r3, r1
 8001f42:	4904      	ldr	r1, [pc, #16]	; (8001f54 <FSMC_NORSRAM_Init+0x60>)
 8001f44:	4029      	ands	r1, r5
 8001f46:	430b      	orrs	r3, r1
 8001f48:	4323      	orrs	r3, r4
 8001f4a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]


  return HAL_OK;
}
 8001f4e:	2000      	movs	r0, #0
 8001f50:	bd70      	pop	{r4, r5, r6, pc}
 8001f52:	bf00      	nop
 8001f54:	fff00080 	.word	0xfff00080

08001f58 <FSMC_NORSRAM_Timing_Init>:
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8001f58:	680b      	ldr	r3, [r1, #0]
{
 8001f5a:	b510      	push	{r4, lr}
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8001f5c:	698c      	ldr	r4, [r1, #24]
 8001f5e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001f62:	4323      	orrs	r3, r4
 8001f64:	684c      	ldr	r4, [r1, #4]
 8001f66:	6850      	ldr	r0, [r2, #4]
 8001f68:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8001f6c:	688c      	ldr	r4, [r1, #8]
 8001f6e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8001f72:	68cc      	ldr	r4, [r1, #12]
 8001f74:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001f78:	690c      	ldr	r4, [r1, #16]
 8001f7a:	6949      	ldr	r1, [r1, #20]
 8001f7c:	3c01      	subs	r4, #1
 8001f7e:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8001f82:	3902      	subs	r1, #2
 8001f84:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001f88:	f000 4140 	and.w	r1, r0, #3221225472	; 0xc0000000
 8001f8c:	430b      	orrs	r3, r1
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
}
 8001f8e:	2000      	movs	r0, #0
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8001f90:	6053      	str	r3, [r2, #4]
}
 8001f92:	bd10      	pop	{r4, pc}

08001f94 <FSMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8001f94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
{
 8001f98:	b530      	push	{r4, r5, lr}
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8001f9a:	d114      	bne.n	8001fc6 <FSMC_NORSRAM_Extended_Timing_Init+0x32>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8001f9c:	698d      	ldr	r5, [r1, #24]
 8001f9e:	680b      	ldr	r3, [r1, #0]
 8001fa0:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8001fa4:	432b      	orrs	r3, r5
 8001fa6:	684d      	ldr	r5, [r1, #4]
 8001fa8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8001fac:	688d      	ldr	r5, [r1, #8]
 8001fae:	68c9      	ldr	r1, [r1, #12]
 8001fb0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8001fb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001fb8:	4904      	ldr	r1, [pc, #16]	; (8001fcc <FSMC_NORSRAM_Extended_Timing_Init+0x38>)
 8001fba:	4021      	ands	r1, r4
 8001fbc:	430b      	orrs	r3, r1
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8001fbe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	bd30      	pop	{r4, r5, pc}
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8001fc6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8001fca:	e7f8      	b.n	8001fbe <FSMC_NORSRAM_Extended_Timing_Init+0x2a>
 8001fcc:	cff00000 	.word	0xcff00000

08001fd0 <__errno>:
 8001fd0:	4b01      	ldr	r3, [pc, #4]	; (8001fd8 <__errno+0x8>)
 8001fd2:	6818      	ldr	r0, [r3, #0]
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	2000b874 	.word	0x2000b874

08001fdc <__libc_init_array>:
 8001fdc:	b570      	push	{r4, r5, r6, lr}
 8001fde:	2600      	movs	r6, #0
 8001fe0:	4d0c      	ldr	r5, [pc, #48]	; (8002014 <__libc_init_array+0x38>)
 8001fe2:	4c0d      	ldr	r4, [pc, #52]	; (8002018 <__libc_init_array+0x3c>)
 8001fe4:	1b64      	subs	r4, r4, r5
 8001fe6:	10a4      	asrs	r4, r4, #2
 8001fe8:	42a6      	cmp	r6, r4
 8001fea:	d109      	bne.n	8002000 <__libc_init_array+0x24>
 8001fec:	f000 fca4 	bl	8002938 <_init>
 8001ff0:	2600      	movs	r6, #0
 8001ff2:	4d0a      	ldr	r5, [pc, #40]	; (800201c <__libc_init_array+0x40>)
 8001ff4:	4c0a      	ldr	r4, [pc, #40]	; (8002020 <__libc_init_array+0x44>)
 8001ff6:	1b64      	subs	r4, r4, r5
 8001ff8:	10a4      	asrs	r4, r4, #2
 8001ffa:	42a6      	cmp	r6, r4
 8001ffc:	d105      	bne.n	800200a <__libc_init_array+0x2e>
 8001ffe:	bd70      	pop	{r4, r5, r6, pc}
 8002000:	f855 3b04 	ldr.w	r3, [r5], #4
 8002004:	4798      	blx	r3
 8002006:	3601      	adds	r6, #1
 8002008:	e7ee      	b.n	8001fe8 <__libc_init_array+0xc>
 800200a:	f855 3b04 	ldr.w	r3, [r5], #4
 800200e:	4798      	blx	r3
 8002010:	3601      	adds	r6, #1
 8002012:	e7f2      	b.n	8001ffa <__libc_init_array+0x1e>
 8002014:	0805d014 	.word	0x0805d014
 8002018:	0805d014 	.word	0x0805d014
 800201c:	0805d014 	.word	0x0805d014
 8002020:	0805d018 	.word	0x0805d018

08002024 <memset>:
 8002024:	4603      	mov	r3, r0
 8002026:	4402      	add	r2, r0
 8002028:	4293      	cmp	r3, r2
 800202a:	d100      	bne.n	800202e <memset+0xa>
 800202c:	4770      	bx	lr
 800202e:	f803 1b01 	strb.w	r1, [r3], #1
 8002032:	e7f9      	b.n	8002028 <memset+0x4>

08002034 <siprintf>:
 8002034:	b40e      	push	{r1, r2, r3}
 8002036:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800203a:	b500      	push	{lr}
 800203c:	b09c      	sub	sp, #112	; 0x70
 800203e:	ab1d      	add	r3, sp, #116	; 0x74
 8002040:	9002      	str	r0, [sp, #8]
 8002042:	9006      	str	r0, [sp, #24]
 8002044:	9107      	str	r1, [sp, #28]
 8002046:	9104      	str	r1, [sp, #16]
 8002048:	4808      	ldr	r0, [pc, #32]	; (800206c <siprintf+0x38>)
 800204a:	4909      	ldr	r1, [pc, #36]	; (8002070 <siprintf+0x3c>)
 800204c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002050:	9105      	str	r1, [sp, #20]
 8002052:	6800      	ldr	r0, [r0, #0]
 8002054:	a902      	add	r1, sp, #8
 8002056:	9301      	str	r3, [sp, #4]
 8002058:	f000 f870 	bl	800213c <_svfiprintf_r>
 800205c:	2200      	movs	r2, #0
 800205e:	9b02      	ldr	r3, [sp, #8]
 8002060:	701a      	strb	r2, [r3, #0]
 8002062:	b01c      	add	sp, #112	; 0x70
 8002064:	f85d eb04 	ldr.w	lr, [sp], #4
 8002068:	b003      	add	sp, #12
 800206a:	4770      	bx	lr
 800206c:	2000b874 	.word	0x2000b874
 8002070:	ffff0208 	.word	0xffff0208

08002074 <strcpy>:
 8002074:	4603      	mov	r3, r0
 8002076:	f811 2b01 	ldrb.w	r2, [r1], #1
 800207a:	f803 2b01 	strb.w	r2, [r3], #1
 800207e:	2a00      	cmp	r2, #0
 8002080:	d1f9      	bne.n	8002076 <strcpy+0x2>
 8002082:	4770      	bx	lr

08002084 <__ssputs_r>:
 8002084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002088:	688e      	ldr	r6, [r1, #8]
 800208a:	4682      	mov	sl, r0
 800208c:	429e      	cmp	r6, r3
 800208e:	460c      	mov	r4, r1
 8002090:	4690      	mov	r8, r2
 8002092:	461f      	mov	r7, r3
 8002094:	d838      	bhi.n	8002108 <__ssputs_r+0x84>
 8002096:	898a      	ldrh	r2, [r1, #12]
 8002098:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800209c:	d032      	beq.n	8002104 <__ssputs_r+0x80>
 800209e:	6825      	ldr	r5, [r4, #0]
 80020a0:	6909      	ldr	r1, [r1, #16]
 80020a2:	3301      	adds	r3, #1
 80020a4:	eba5 0901 	sub.w	r9, r5, r1
 80020a8:	6965      	ldr	r5, [r4, #20]
 80020aa:	444b      	add	r3, r9
 80020ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80020b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80020b4:	106d      	asrs	r5, r5, #1
 80020b6:	429d      	cmp	r5, r3
 80020b8:	bf38      	it	cc
 80020ba:	461d      	movcc	r5, r3
 80020bc:	0553      	lsls	r3, r2, #21
 80020be:	d531      	bpl.n	8002124 <__ssputs_r+0xa0>
 80020c0:	4629      	mov	r1, r5
 80020c2:	f000 fb6f 	bl	80027a4 <_malloc_r>
 80020c6:	4606      	mov	r6, r0
 80020c8:	b950      	cbnz	r0, 80020e0 <__ssputs_r+0x5c>
 80020ca:	230c      	movs	r3, #12
 80020cc:	f04f 30ff 	mov.w	r0, #4294967295
 80020d0:	f8ca 3000 	str.w	r3, [sl]
 80020d4:	89a3      	ldrh	r3, [r4, #12]
 80020d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020da:	81a3      	strh	r3, [r4, #12]
 80020dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020e0:	464a      	mov	r2, r9
 80020e2:	6921      	ldr	r1, [r4, #16]
 80020e4:	f000 face 	bl	8002684 <memcpy>
 80020e8:	89a3      	ldrh	r3, [r4, #12]
 80020ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80020ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020f2:	81a3      	strh	r3, [r4, #12]
 80020f4:	6126      	str	r6, [r4, #16]
 80020f6:	444e      	add	r6, r9
 80020f8:	6026      	str	r6, [r4, #0]
 80020fa:	463e      	mov	r6, r7
 80020fc:	6165      	str	r5, [r4, #20]
 80020fe:	eba5 0509 	sub.w	r5, r5, r9
 8002102:	60a5      	str	r5, [r4, #8]
 8002104:	42be      	cmp	r6, r7
 8002106:	d900      	bls.n	800210a <__ssputs_r+0x86>
 8002108:	463e      	mov	r6, r7
 800210a:	4632      	mov	r2, r6
 800210c:	4641      	mov	r1, r8
 800210e:	6820      	ldr	r0, [r4, #0]
 8002110:	f000 fac6 	bl	80026a0 <memmove>
 8002114:	68a3      	ldr	r3, [r4, #8]
 8002116:	2000      	movs	r0, #0
 8002118:	1b9b      	subs	r3, r3, r6
 800211a:	60a3      	str	r3, [r4, #8]
 800211c:	6823      	ldr	r3, [r4, #0]
 800211e:	4433      	add	r3, r6
 8002120:	6023      	str	r3, [r4, #0]
 8002122:	e7db      	b.n	80020dc <__ssputs_r+0x58>
 8002124:	462a      	mov	r2, r5
 8002126:	f000 fbb1 	bl	800288c <_realloc_r>
 800212a:	4606      	mov	r6, r0
 800212c:	2800      	cmp	r0, #0
 800212e:	d1e1      	bne.n	80020f4 <__ssputs_r+0x70>
 8002130:	4650      	mov	r0, sl
 8002132:	6921      	ldr	r1, [r4, #16]
 8002134:	f000 face 	bl	80026d4 <_free_r>
 8002138:	e7c7      	b.n	80020ca <__ssputs_r+0x46>
	...

0800213c <_svfiprintf_r>:
 800213c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002140:	4698      	mov	r8, r3
 8002142:	898b      	ldrh	r3, [r1, #12]
 8002144:	4607      	mov	r7, r0
 8002146:	061b      	lsls	r3, r3, #24
 8002148:	460d      	mov	r5, r1
 800214a:	4614      	mov	r4, r2
 800214c:	b09d      	sub	sp, #116	; 0x74
 800214e:	d50e      	bpl.n	800216e <_svfiprintf_r+0x32>
 8002150:	690b      	ldr	r3, [r1, #16]
 8002152:	b963      	cbnz	r3, 800216e <_svfiprintf_r+0x32>
 8002154:	2140      	movs	r1, #64	; 0x40
 8002156:	f000 fb25 	bl	80027a4 <_malloc_r>
 800215a:	6028      	str	r0, [r5, #0]
 800215c:	6128      	str	r0, [r5, #16]
 800215e:	b920      	cbnz	r0, 800216a <_svfiprintf_r+0x2e>
 8002160:	230c      	movs	r3, #12
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	f04f 30ff 	mov.w	r0, #4294967295
 8002168:	e0d1      	b.n	800230e <_svfiprintf_r+0x1d2>
 800216a:	2340      	movs	r3, #64	; 0x40
 800216c:	616b      	str	r3, [r5, #20]
 800216e:	2300      	movs	r3, #0
 8002170:	9309      	str	r3, [sp, #36]	; 0x24
 8002172:	2320      	movs	r3, #32
 8002174:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002178:	2330      	movs	r3, #48	; 0x30
 800217a:	f04f 0901 	mov.w	r9, #1
 800217e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002182:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002328 <_svfiprintf_r+0x1ec>
 8002186:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800218a:	4623      	mov	r3, r4
 800218c:	469a      	mov	sl, r3
 800218e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002192:	b10a      	cbz	r2, 8002198 <_svfiprintf_r+0x5c>
 8002194:	2a25      	cmp	r2, #37	; 0x25
 8002196:	d1f9      	bne.n	800218c <_svfiprintf_r+0x50>
 8002198:	ebba 0b04 	subs.w	fp, sl, r4
 800219c:	d00b      	beq.n	80021b6 <_svfiprintf_r+0x7a>
 800219e:	465b      	mov	r3, fp
 80021a0:	4622      	mov	r2, r4
 80021a2:	4629      	mov	r1, r5
 80021a4:	4638      	mov	r0, r7
 80021a6:	f7ff ff6d 	bl	8002084 <__ssputs_r>
 80021aa:	3001      	adds	r0, #1
 80021ac:	f000 80aa 	beq.w	8002304 <_svfiprintf_r+0x1c8>
 80021b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80021b2:	445a      	add	r2, fp
 80021b4:	9209      	str	r2, [sp, #36]	; 0x24
 80021b6:	f89a 3000 	ldrb.w	r3, [sl]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 80a2 	beq.w	8002304 <_svfiprintf_r+0x1c8>
 80021c0:	2300      	movs	r3, #0
 80021c2:	f04f 32ff 	mov.w	r2, #4294967295
 80021c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80021ca:	f10a 0a01 	add.w	sl, sl, #1
 80021ce:	9304      	str	r3, [sp, #16]
 80021d0:	9307      	str	r3, [sp, #28]
 80021d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80021d6:	931a      	str	r3, [sp, #104]	; 0x68
 80021d8:	4654      	mov	r4, sl
 80021da:	2205      	movs	r2, #5
 80021dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021e0:	4851      	ldr	r0, [pc, #324]	; (8002328 <_svfiprintf_r+0x1ec>)
 80021e2:	f000 fa41 	bl	8002668 <memchr>
 80021e6:	9a04      	ldr	r2, [sp, #16]
 80021e8:	b9d8      	cbnz	r0, 8002222 <_svfiprintf_r+0xe6>
 80021ea:	06d0      	lsls	r0, r2, #27
 80021ec:	bf44      	itt	mi
 80021ee:	2320      	movmi	r3, #32
 80021f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80021f4:	0711      	lsls	r1, r2, #28
 80021f6:	bf44      	itt	mi
 80021f8:	232b      	movmi	r3, #43	; 0x2b
 80021fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80021fe:	f89a 3000 	ldrb.w	r3, [sl]
 8002202:	2b2a      	cmp	r3, #42	; 0x2a
 8002204:	d015      	beq.n	8002232 <_svfiprintf_r+0xf6>
 8002206:	4654      	mov	r4, sl
 8002208:	2000      	movs	r0, #0
 800220a:	f04f 0c0a 	mov.w	ip, #10
 800220e:	9a07      	ldr	r2, [sp, #28]
 8002210:	4621      	mov	r1, r4
 8002212:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002216:	3b30      	subs	r3, #48	; 0x30
 8002218:	2b09      	cmp	r3, #9
 800221a:	d94e      	bls.n	80022ba <_svfiprintf_r+0x17e>
 800221c:	b1b0      	cbz	r0, 800224c <_svfiprintf_r+0x110>
 800221e:	9207      	str	r2, [sp, #28]
 8002220:	e014      	b.n	800224c <_svfiprintf_r+0x110>
 8002222:	eba0 0308 	sub.w	r3, r0, r8
 8002226:	fa09 f303 	lsl.w	r3, r9, r3
 800222a:	4313      	orrs	r3, r2
 800222c:	46a2      	mov	sl, r4
 800222e:	9304      	str	r3, [sp, #16]
 8002230:	e7d2      	b.n	80021d8 <_svfiprintf_r+0x9c>
 8002232:	9b03      	ldr	r3, [sp, #12]
 8002234:	1d19      	adds	r1, r3, #4
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	9103      	str	r1, [sp, #12]
 800223a:	2b00      	cmp	r3, #0
 800223c:	bfbb      	ittet	lt
 800223e:	425b      	neglt	r3, r3
 8002240:	f042 0202 	orrlt.w	r2, r2, #2
 8002244:	9307      	strge	r3, [sp, #28]
 8002246:	9307      	strlt	r3, [sp, #28]
 8002248:	bfb8      	it	lt
 800224a:	9204      	strlt	r2, [sp, #16]
 800224c:	7823      	ldrb	r3, [r4, #0]
 800224e:	2b2e      	cmp	r3, #46	; 0x2e
 8002250:	d10c      	bne.n	800226c <_svfiprintf_r+0x130>
 8002252:	7863      	ldrb	r3, [r4, #1]
 8002254:	2b2a      	cmp	r3, #42	; 0x2a
 8002256:	d135      	bne.n	80022c4 <_svfiprintf_r+0x188>
 8002258:	9b03      	ldr	r3, [sp, #12]
 800225a:	3402      	adds	r4, #2
 800225c:	1d1a      	adds	r2, r3, #4
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	9203      	str	r2, [sp, #12]
 8002262:	2b00      	cmp	r3, #0
 8002264:	bfb8      	it	lt
 8002266:	f04f 33ff 	movlt.w	r3, #4294967295
 800226a:	9305      	str	r3, [sp, #20]
 800226c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800232c <_svfiprintf_r+0x1f0>
 8002270:	2203      	movs	r2, #3
 8002272:	4650      	mov	r0, sl
 8002274:	7821      	ldrb	r1, [r4, #0]
 8002276:	f000 f9f7 	bl	8002668 <memchr>
 800227a:	b140      	cbz	r0, 800228e <_svfiprintf_r+0x152>
 800227c:	2340      	movs	r3, #64	; 0x40
 800227e:	eba0 000a 	sub.w	r0, r0, sl
 8002282:	fa03 f000 	lsl.w	r0, r3, r0
 8002286:	9b04      	ldr	r3, [sp, #16]
 8002288:	3401      	adds	r4, #1
 800228a:	4303      	orrs	r3, r0
 800228c:	9304      	str	r3, [sp, #16]
 800228e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002292:	2206      	movs	r2, #6
 8002294:	4826      	ldr	r0, [pc, #152]	; (8002330 <_svfiprintf_r+0x1f4>)
 8002296:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800229a:	f000 f9e5 	bl	8002668 <memchr>
 800229e:	2800      	cmp	r0, #0
 80022a0:	d038      	beq.n	8002314 <_svfiprintf_r+0x1d8>
 80022a2:	4b24      	ldr	r3, [pc, #144]	; (8002334 <_svfiprintf_r+0x1f8>)
 80022a4:	bb1b      	cbnz	r3, 80022ee <_svfiprintf_r+0x1b2>
 80022a6:	9b03      	ldr	r3, [sp, #12]
 80022a8:	3307      	adds	r3, #7
 80022aa:	f023 0307 	bic.w	r3, r3, #7
 80022ae:	3308      	adds	r3, #8
 80022b0:	9303      	str	r3, [sp, #12]
 80022b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80022b4:	4433      	add	r3, r6
 80022b6:	9309      	str	r3, [sp, #36]	; 0x24
 80022b8:	e767      	b.n	800218a <_svfiprintf_r+0x4e>
 80022ba:	460c      	mov	r4, r1
 80022bc:	2001      	movs	r0, #1
 80022be:	fb0c 3202 	mla	r2, ip, r2, r3
 80022c2:	e7a5      	b.n	8002210 <_svfiprintf_r+0xd4>
 80022c4:	2300      	movs	r3, #0
 80022c6:	f04f 0c0a 	mov.w	ip, #10
 80022ca:	4619      	mov	r1, r3
 80022cc:	3401      	adds	r4, #1
 80022ce:	9305      	str	r3, [sp, #20]
 80022d0:	4620      	mov	r0, r4
 80022d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80022d6:	3a30      	subs	r2, #48	; 0x30
 80022d8:	2a09      	cmp	r2, #9
 80022da:	d903      	bls.n	80022e4 <_svfiprintf_r+0x1a8>
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0c5      	beq.n	800226c <_svfiprintf_r+0x130>
 80022e0:	9105      	str	r1, [sp, #20]
 80022e2:	e7c3      	b.n	800226c <_svfiprintf_r+0x130>
 80022e4:	4604      	mov	r4, r0
 80022e6:	2301      	movs	r3, #1
 80022e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80022ec:	e7f0      	b.n	80022d0 <_svfiprintf_r+0x194>
 80022ee:	ab03      	add	r3, sp, #12
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	462a      	mov	r2, r5
 80022f4:	4638      	mov	r0, r7
 80022f6:	4b10      	ldr	r3, [pc, #64]	; (8002338 <_svfiprintf_r+0x1fc>)
 80022f8:	a904      	add	r1, sp, #16
 80022fa:	f3af 8000 	nop.w
 80022fe:	1c42      	adds	r2, r0, #1
 8002300:	4606      	mov	r6, r0
 8002302:	d1d6      	bne.n	80022b2 <_svfiprintf_r+0x176>
 8002304:	89ab      	ldrh	r3, [r5, #12]
 8002306:	065b      	lsls	r3, r3, #25
 8002308:	f53f af2c 	bmi.w	8002164 <_svfiprintf_r+0x28>
 800230c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800230e:	b01d      	add	sp, #116	; 0x74
 8002310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002314:	ab03      	add	r3, sp, #12
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	462a      	mov	r2, r5
 800231a:	4638      	mov	r0, r7
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <_svfiprintf_r+0x1fc>)
 800231e:	a904      	add	r1, sp, #16
 8002320:	f000 f87c 	bl	800241c <_printf_i>
 8002324:	e7eb      	b.n	80022fe <_svfiprintf_r+0x1c2>
 8002326:	bf00      	nop
 8002328:	0805cfe1 	.word	0x0805cfe1
 800232c:	0805cfe7 	.word	0x0805cfe7
 8002330:	0805cfeb 	.word	0x0805cfeb
 8002334:	00000000 	.word	0x00000000
 8002338:	08002085 	.word	0x08002085

0800233c <_printf_common>:
 800233c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002340:	4616      	mov	r6, r2
 8002342:	4699      	mov	r9, r3
 8002344:	688a      	ldr	r2, [r1, #8]
 8002346:	690b      	ldr	r3, [r1, #16]
 8002348:	4607      	mov	r7, r0
 800234a:	4293      	cmp	r3, r2
 800234c:	bfb8      	it	lt
 800234e:	4613      	movlt	r3, r2
 8002350:	6033      	str	r3, [r6, #0]
 8002352:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002356:	460c      	mov	r4, r1
 8002358:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800235c:	b10a      	cbz	r2, 8002362 <_printf_common+0x26>
 800235e:	3301      	adds	r3, #1
 8002360:	6033      	str	r3, [r6, #0]
 8002362:	6823      	ldr	r3, [r4, #0]
 8002364:	0699      	lsls	r1, r3, #26
 8002366:	bf42      	ittt	mi
 8002368:	6833      	ldrmi	r3, [r6, #0]
 800236a:	3302      	addmi	r3, #2
 800236c:	6033      	strmi	r3, [r6, #0]
 800236e:	6825      	ldr	r5, [r4, #0]
 8002370:	f015 0506 	ands.w	r5, r5, #6
 8002374:	d106      	bne.n	8002384 <_printf_common+0x48>
 8002376:	f104 0a19 	add.w	sl, r4, #25
 800237a:	68e3      	ldr	r3, [r4, #12]
 800237c:	6832      	ldr	r2, [r6, #0]
 800237e:	1a9b      	subs	r3, r3, r2
 8002380:	42ab      	cmp	r3, r5
 8002382:	dc28      	bgt.n	80023d6 <_printf_common+0x9a>
 8002384:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002388:	1e13      	subs	r3, r2, #0
 800238a:	6822      	ldr	r2, [r4, #0]
 800238c:	bf18      	it	ne
 800238e:	2301      	movne	r3, #1
 8002390:	0692      	lsls	r2, r2, #26
 8002392:	d42d      	bmi.n	80023f0 <_printf_common+0xb4>
 8002394:	4649      	mov	r1, r9
 8002396:	4638      	mov	r0, r7
 8002398:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800239c:	47c0      	blx	r8
 800239e:	3001      	adds	r0, #1
 80023a0:	d020      	beq.n	80023e4 <_printf_common+0xa8>
 80023a2:	6823      	ldr	r3, [r4, #0]
 80023a4:	68e5      	ldr	r5, [r4, #12]
 80023a6:	f003 0306 	and.w	r3, r3, #6
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	bf18      	it	ne
 80023ae:	2500      	movne	r5, #0
 80023b0:	6832      	ldr	r2, [r6, #0]
 80023b2:	f04f 0600 	mov.w	r6, #0
 80023b6:	68a3      	ldr	r3, [r4, #8]
 80023b8:	bf08      	it	eq
 80023ba:	1aad      	subeq	r5, r5, r2
 80023bc:	6922      	ldr	r2, [r4, #16]
 80023be:	bf08      	it	eq
 80023c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80023c4:	4293      	cmp	r3, r2
 80023c6:	bfc4      	itt	gt
 80023c8:	1a9b      	subgt	r3, r3, r2
 80023ca:	18ed      	addgt	r5, r5, r3
 80023cc:	341a      	adds	r4, #26
 80023ce:	42b5      	cmp	r5, r6
 80023d0:	d11a      	bne.n	8002408 <_printf_common+0xcc>
 80023d2:	2000      	movs	r0, #0
 80023d4:	e008      	b.n	80023e8 <_printf_common+0xac>
 80023d6:	2301      	movs	r3, #1
 80023d8:	4652      	mov	r2, sl
 80023da:	4649      	mov	r1, r9
 80023dc:	4638      	mov	r0, r7
 80023de:	47c0      	blx	r8
 80023e0:	3001      	adds	r0, #1
 80023e2:	d103      	bne.n	80023ec <_printf_common+0xb0>
 80023e4:	f04f 30ff 	mov.w	r0, #4294967295
 80023e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023ec:	3501      	adds	r5, #1
 80023ee:	e7c4      	b.n	800237a <_printf_common+0x3e>
 80023f0:	2030      	movs	r0, #48	; 0x30
 80023f2:	18e1      	adds	r1, r4, r3
 80023f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80023fe:	4422      	add	r2, r4
 8002400:	3302      	adds	r3, #2
 8002402:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002406:	e7c5      	b.n	8002394 <_printf_common+0x58>
 8002408:	2301      	movs	r3, #1
 800240a:	4622      	mov	r2, r4
 800240c:	4649      	mov	r1, r9
 800240e:	4638      	mov	r0, r7
 8002410:	47c0      	blx	r8
 8002412:	3001      	adds	r0, #1
 8002414:	d0e6      	beq.n	80023e4 <_printf_common+0xa8>
 8002416:	3601      	adds	r6, #1
 8002418:	e7d9      	b.n	80023ce <_printf_common+0x92>
	...

0800241c <_printf_i>:
 800241c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002420:	7e0f      	ldrb	r7, [r1, #24]
 8002422:	4691      	mov	r9, r2
 8002424:	2f78      	cmp	r7, #120	; 0x78
 8002426:	4680      	mov	r8, r0
 8002428:	460c      	mov	r4, r1
 800242a:	469a      	mov	sl, r3
 800242c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800242e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002432:	d807      	bhi.n	8002444 <_printf_i+0x28>
 8002434:	2f62      	cmp	r7, #98	; 0x62
 8002436:	d80a      	bhi.n	800244e <_printf_i+0x32>
 8002438:	2f00      	cmp	r7, #0
 800243a:	f000 80d9 	beq.w	80025f0 <_printf_i+0x1d4>
 800243e:	2f58      	cmp	r7, #88	; 0x58
 8002440:	f000 80a4 	beq.w	800258c <_printf_i+0x170>
 8002444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002448:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800244c:	e03a      	b.n	80024c4 <_printf_i+0xa8>
 800244e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002452:	2b15      	cmp	r3, #21
 8002454:	d8f6      	bhi.n	8002444 <_printf_i+0x28>
 8002456:	a101      	add	r1, pc, #4	; (adr r1, 800245c <_printf_i+0x40>)
 8002458:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800245c:	080024b5 	.word	0x080024b5
 8002460:	080024c9 	.word	0x080024c9
 8002464:	08002445 	.word	0x08002445
 8002468:	08002445 	.word	0x08002445
 800246c:	08002445 	.word	0x08002445
 8002470:	08002445 	.word	0x08002445
 8002474:	080024c9 	.word	0x080024c9
 8002478:	08002445 	.word	0x08002445
 800247c:	08002445 	.word	0x08002445
 8002480:	08002445 	.word	0x08002445
 8002484:	08002445 	.word	0x08002445
 8002488:	080025d7 	.word	0x080025d7
 800248c:	080024f9 	.word	0x080024f9
 8002490:	080025b9 	.word	0x080025b9
 8002494:	08002445 	.word	0x08002445
 8002498:	08002445 	.word	0x08002445
 800249c:	080025f9 	.word	0x080025f9
 80024a0:	08002445 	.word	0x08002445
 80024a4:	080024f9 	.word	0x080024f9
 80024a8:	08002445 	.word	0x08002445
 80024ac:	08002445 	.word	0x08002445
 80024b0:	080025c1 	.word	0x080025c1
 80024b4:	682b      	ldr	r3, [r5, #0]
 80024b6:	1d1a      	adds	r2, r3, #4
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	602a      	str	r2, [r5, #0]
 80024bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80024c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0a4      	b.n	8002612 <_printf_i+0x1f6>
 80024c8:	6820      	ldr	r0, [r4, #0]
 80024ca:	6829      	ldr	r1, [r5, #0]
 80024cc:	0606      	lsls	r6, r0, #24
 80024ce:	f101 0304 	add.w	r3, r1, #4
 80024d2:	d50a      	bpl.n	80024ea <_printf_i+0xce>
 80024d4:	680e      	ldr	r6, [r1, #0]
 80024d6:	602b      	str	r3, [r5, #0]
 80024d8:	2e00      	cmp	r6, #0
 80024da:	da03      	bge.n	80024e4 <_printf_i+0xc8>
 80024dc:	232d      	movs	r3, #45	; 0x2d
 80024de:	4276      	negs	r6, r6
 80024e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024e4:	230a      	movs	r3, #10
 80024e6:	485e      	ldr	r0, [pc, #376]	; (8002660 <_printf_i+0x244>)
 80024e8:	e019      	b.n	800251e <_printf_i+0x102>
 80024ea:	680e      	ldr	r6, [r1, #0]
 80024ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80024f0:	602b      	str	r3, [r5, #0]
 80024f2:	bf18      	it	ne
 80024f4:	b236      	sxthne	r6, r6
 80024f6:	e7ef      	b.n	80024d8 <_printf_i+0xbc>
 80024f8:	682b      	ldr	r3, [r5, #0]
 80024fa:	6820      	ldr	r0, [r4, #0]
 80024fc:	1d19      	adds	r1, r3, #4
 80024fe:	6029      	str	r1, [r5, #0]
 8002500:	0601      	lsls	r1, r0, #24
 8002502:	d501      	bpl.n	8002508 <_printf_i+0xec>
 8002504:	681e      	ldr	r6, [r3, #0]
 8002506:	e002      	b.n	800250e <_printf_i+0xf2>
 8002508:	0646      	lsls	r6, r0, #25
 800250a:	d5fb      	bpl.n	8002504 <_printf_i+0xe8>
 800250c:	881e      	ldrh	r6, [r3, #0]
 800250e:	2f6f      	cmp	r7, #111	; 0x6f
 8002510:	bf0c      	ite	eq
 8002512:	2308      	moveq	r3, #8
 8002514:	230a      	movne	r3, #10
 8002516:	4852      	ldr	r0, [pc, #328]	; (8002660 <_printf_i+0x244>)
 8002518:	2100      	movs	r1, #0
 800251a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800251e:	6865      	ldr	r5, [r4, #4]
 8002520:	2d00      	cmp	r5, #0
 8002522:	bfa8      	it	ge
 8002524:	6821      	ldrge	r1, [r4, #0]
 8002526:	60a5      	str	r5, [r4, #8]
 8002528:	bfa4      	itt	ge
 800252a:	f021 0104 	bicge.w	r1, r1, #4
 800252e:	6021      	strge	r1, [r4, #0]
 8002530:	b90e      	cbnz	r6, 8002536 <_printf_i+0x11a>
 8002532:	2d00      	cmp	r5, #0
 8002534:	d04d      	beq.n	80025d2 <_printf_i+0x1b6>
 8002536:	4615      	mov	r5, r2
 8002538:	fbb6 f1f3 	udiv	r1, r6, r3
 800253c:	fb03 6711 	mls	r7, r3, r1, r6
 8002540:	5dc7      	ldrb	r7, [r0, r7]
 8002542:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002546:	4637      	mov	r7, r6
 8002548:	42bb      	cmp	r3, r7
 800254a:	460e      	mov	r6, r1
 800254c:	d9f4      	bls.n	8002538 <_printf_i+0x11c>
 800254e:	2b08      	cmp	r3, #8
 8002550:	d10b      	bne.n	800256a <_printf_i+0x14e>
 8002552:	6823      	ldr	r3, [r4, #0]
 8002554:	07de      	lsls	r6, r3, #31
 8002556:	d508      	bpl.n	800256a <_printf_i+0x14e>
 8002558:	6923      	ldr	r3, [r4, #16]
 800255a:	6861      	ldr	r1, [r4, #4]
 800255c:	4299      	cmp	r1, r3
 800255e:	bfde      	ittt	le
 8002560:	2330      	movle	r3, #48	; 0x30
 8002562:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002566:	f105 35ff 	addle.w	r5, r5, #4294967295
 800256a:	1b52      	subs	r2, r2, r5
 800256c:	6122      	str	r2, [r4, #16]
 800256e:	464b      	mov	r3, r9
 8002570:	4621      	mov	r1, r4
 8002572:	4640      	mov	r0, r8
 8002574:	f8cd a000 	str.w	sl, [sp]
 8002578:	aa03      	add	r2, sp, #12
 800257a:	f7ff fedf 	bl	800233c <_printf_common>
 800257e:	3001      	adds	r0, #1
 8002580:	d14c      	bne.n	800261c <_printf_i+0x200>
 8002582:	f04f 30ff 	mov.w	r0, #4294967295
 8002586:	b004      	add	sp, #16
 8002588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800258c:	4834      	ldr	r0, [pc, #208]	; (8002660 <_printf_i+0x244>)
 800258e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002592:	6829      	ldr	r1, [r5, #0]
 8002594:	6823      	ldr	r3, [r4, #0]
 8002596:	f851 6b04 	ldr.w	r6, [r1], #4
 800259a:	6029      	str	r1, [r5, #0]
 800259c:	061d      	lsls	r5, r3, #24
 800259e:	d514      	bpl.n	80025ca <_printf_i+0x1ae>
 80025a0:	07df      	lsls	r7, r3, #31
 80025a2:	bf44      	itt	mi
 80025a4:	f043 0320 	orrmi.w	r3, r3, #32
 80025a8:	6023      	strmi	r3, [r4, #0]
 80025aa:	b91e      	cbnz	r6, 80025b4 <_printf_i+0x198>
 80025ac:	6823      	ldr	r3, [r4, #0]
 80025ae:	f023 0320 	bic.w	r3, r3, #32
 80025b2:	6023      	str	r3, [r4, #0]
 80025b4:	2310      	movs	r3, #16
 80025b6:	e7af      	b.n	8002518 <_printf_i+0xfc>
 80025b8:	6823      	ldr	r3, [r4, #0]
 80025ba:	f043 0320 	orr.w	r3, r3, #32
 80025be:	6023      	str	r3, [r4, #0]
 80025c0:	2378      	movs	r3, #120	; 0x78
 80025c2:	4828      	ldr	r0, [pc, #160]	; (8002664 <_printf_i+0x248>)
 80025c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80025c8:	e7e3      	b.n	8002592 <_printf_i+0x176>
 80025ca:	0659      	lsls	r1, r3, #25
 80025cc:	bf48      	it	mi
 80025ce:	b2b6      	uxthmi	r6, r6
 80025d0:	e7e6      	b.n	80025a0 <_printf_i+0x184>
 80025d2:	4615      	mov	r5, r2
 80025d4:	e7bb      	b.n	800254e <_printf_i+0x132>
 80025d6:	682b      	ldr	r3, [r5, #0]
 80025d8:	6826      	ldr	r6, [r4, #0]
 80025da:	1d18      	adds	r0, r3, #4
 80025dc:	6961      	ldr	r1, [r4, #20]
 80025de:	6028      	str	r0, [r5, #0]
 80025e0:	0635      	lsls	r5, r6, #24
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	d501      	bpl.n	80025ea <_printf_i+0x1ce>
 80025e6:	6019      	str	r1, [r3, #0]
 80025e8:	e002      	b.n	80025f0 <_printf_i+0x1d4>
 80025ea:	0670      	lsls	r0, r6, #25
 80025ec:	d5fb      	bpl.n	80025e6 <_printf_i+0x1ca>
 80025ee:	8019      	strh	r1, [r3, #0]
 80025f0:	2300      	movs	r3, #0
 80025f2:	4615      	mov	r5, r2
 80025f4:	6123      	str	r3, [r4, #16]
 80025f6:	e7ba      	b.n	800256e <_printf_i+0x152>
 80025f8:	682b      	ldr	r3, [r5, #0]
 80025fa:	2100      	movs	r1, #0
 80025fc:	1d1a      	adds	r2, r3, #4
 80025fe:	602a      	str	r2, [r5, #0]
 8002600:	681d      	ldr	r5, [r3, #0]
 8002602:	6862      	ldr	r2, [r4, #4]
 8002604:	4628      	mov	r0, r5
 8002606:	f000 f82f 	bl	8002668 <memchr>
 800260a:	b108      	cbz	r0, 8002610 <_printf_i+0x1f4>
 800260c:	1b40      	subs	r0, r0, r5
 800260e:	6060      	str	r0, [r4, #4]
 8002610:	6863      	ldr	r3, [r4, #4]
 8002612:	6123      	str	r3, [r4, #16]
 8002614:	2300      	movs	r3, #0
 8002616:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800261a:	e7a8      	b.n	800256e <_printf_i+0x152>
 800261c:	462a      	mov	r2, r5
 800261e:	4649      	mov	r1, r9
 8002620:	4640      	mov	r0, r8
 8002622:	6923      	ldr	r3, [r4, #16]
 8002624:	47d0      	blx	sl
 8002626:	3001      	adds	r0, #1
 8002628:	d0ab      	beq.n	8002582 <_printf_i+0x166>
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	079b      	lsls	r3, r3, #30
 800262e:	d413      	bmi.n	8002658 <_printf_i+0x23c>
 8002630:	68e0      	ldr	r0, [r4, #12]
 8002632:	9b03      	ldr	r3, [sp, #12]
 8002634:	4298      	cmp	r0, r3
 8002636:	bfb8      	it	lt
 8002638:	4618      	movlt	r0, r3
 800263a:	e7a4      	b.n	8002586 <_printf_i+0x16a>
 800263c:	2301      	movs	r3, #1
 800263e:	4632      	mov	r2, r6
 8002640:	4649      	mov	r1, r9
 8002642:	4640      	mov	r0, r8
 8002644:	47d0      	blx	sl
 8002646:	3001      	adds	r0, #1
 8002648:	d09b      	beq.n	8002582 <_printf_i+0x166>
 800264a:	3501      	adds	r5, #1
 800264c:	68e3      	ldr	r3, [r4, #12]
 800264e:	9903      	ldr	r1, [sp, #12]
 8002650:	1a5b      	subs	r3, r3, r1
 8002652:	42ab      	cmp	r3, r5
 8002654:	dcf2      	bgt.n	800263c <_printf_i+0x220>
 8002656:	e7eb      	b.n	8002630 <_printf_i+0x214>
 8002658:	2500      	movs	r5, #0
 800265a:	f104 0619 	add.w	r6, r4, #25
 800265e:	e7f5      	b.n	800264c <_printf_i+0x230>
 8002660:	0805cff2 	.word	0x0805cff2
 8002664:	0805d003 	.word	0x0805d003

08002668 <memchr>:
 8002668:	4603      	mov	r3, r0
 800266a:	b510      	push	{r4, lr}
 800266c:	b2c9      	uxtb	r1, r1
 800266e:	4402      	add	r2, r0
 8002670:	4293      	cmp	r3, r2
 8002672:	4618      	mov	r0, r3
 8002674:	d101      	bne.n	800267a <memchr+0x12>
 8002676:	2000      	movs	r0, #0
 8002678:	e003      	b.n	8002682 <memchr+0x1a>
 800267a:	7804      	ldrb	r4, [r0, #0]
 800267c:	3301      	adds	r3, #1
 800267e:	428c      	cmp	r4, r1
 8002680:	d1f6      	bne.n	8002670 <memchr+0x8>
 8002682:	bd10      	pop	{r4, pc}

08002684 <memcpy>:
 8002684:	440a      	add	r2, r1
 8002686:	4291      	cmp	r1, r2
 8002688:	f100 33ff 	add.w	r3, r0, #4294967295
 800268c:	d100      	bne.n	8002690 <memcpy+0xc>
 800268e:	4770      	bx	lr
 8002690:	b510      	push	{r4, lr}
 8002692:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002696:	4291      	cmp	r1, r2
 8002698:	f803 4f01 	strb.w	r4, [r3, #1]!
 800269c:	d1f9      	bne.n	8002692 <memcpy+0xe>
 800269e:	bd10      	pop	{r4, pc}

080026a0 <memmove>:
 80026a0:	4288      	cmp	r0, r1
 80026a2:	b510      	push	{r4, lr}
 80026a4:	eb01 0402 	add.w	r4, r1, r2
 80026a8:	d902      	bls.n	80026b0 <memmove+0x10>
 80026aa:	4284      	cmp	r4, r0
 80026ac:	4623      	mov	r3, r4
 80026ae:	d807      	bhi.n	80026c0 <memmove+0x20>
 80026b0:	1e43      	subs	r3, r0, #1
 80026b2:	42a1      	cmp	r1, r4
 80026b4:	d008      	beq.n	80026c8 <memmove+0x28>
 80026b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80026ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80026be:	e7f8      	b.n	80026b2 <memmove+0x12>
 80026c0:	4601      	mov	r1, r0
 80026c2:	4402      	add	r2, r0
 80026c4:	428a      	cmp	r2, r1
 80026c6:	d100      	bne.n	80026ca <memmove+0x2a>
 80026c8:	bd10      	pop	{r4, pc}
 80026ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80026ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80026d2:	e7f7      	b.n	80026c4 <memmove+0x24>

080026d4 <_free_r>:
 80026d4:	b538      	push	{r3, r4, r5, lr}
 80026d6:	4605      	mov	r5, r0
 80026d8:	2900      	cmp	r1, #0
 80026da:	d040      	beq.n	800275e <_free_r+0x8a>
 80026dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026e0:	1f0c      	subs	r4, r1, #4
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	bfb8      	it	lt
 80026e6:	18e4      	addlt	r4, r4, r3
 80026e8:	f000 f910 	bl	800290c <__malloc_lock>
 80026ec:	4a1c      	ldr	r2, [pc, #112]	; (8002760 <_free_r+0x8c>)
 80026ee:	6813      	ldr	r3, [r2, #0]
 80026f0:	b933      	cbnz	r3, 8002700 <_free_r+0x2c>
 80026f2:	6063      	str	r3, [r4, #4]
 80026f4:	6014      	str	r4, [r2, #0]
 80026f6:	4628      	mov	r0, r5
 80026f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80026fc:	f000 b90c 	b.w	8002918 <__malloc_unlock>
 8002700:	42a3      	cmp	r3, r4
 8002702:	d908      	bls.n	8002716 <_free_r+0x42>
 8002704:	6820      	ldr	r0, [r4, #0]
 8002706:	1821      	adds	r1, r4, r0
 8002708:	428b      	cmp	r3, r1
 800270a:	bf01      	itttt	eq
 800270c:	6819      	ldreq	r1, [r3, #0]
 800270e:	685b      	ldreq	r3, [r3, #4]
 8002710:	1809      	addeq	r1, r1, r0
 8002712:	6021      	streq	r1, [r4, #0]
 8002714:	e7ed      	b.n	80026f2 <_free_r+0x1e>
 8002716:	461a      	mov	r2, r3
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	b10b      	cbz	r3, 8002720 <_free_r+0x4c>
 800271c:	42a3      	cmp	r3, r4
 800271e:	d9fa      	bls.n	8002716 <_free_r+0x42>
 8002720:	6811      	ldr	r1, [r2, #0]
 8002722:	1850      	adds	r0, r2, r1
 8002724:	42a0      	cmp	r0, r4
 8002726:	d10b      	bne.n	8002740 <_free_r+0x6c>
 8002728:	6820      	ldr	r0, [r4, #0]
 800272a:	4401      	add	r1, r0
 800272c:	1850      	adds	r0, r2, r1
 800272e:	4283      	cmp	r3, r0
 8002730:	6011      	str	r1, [r2, #0]
 8002732:	d1e0      	bne.n	80026f6 <_free_r+0x22>
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	4401      	add	r1, r0
 800273a:	6011      	str	r1, [r2, #0]
 800273c:	6053      	str	r3, [r2, #4]
 800273e:	e7da      	b.n	80026f6 <_free_r+0x22>
 8002740:	d902      	bls.n	8002748 <_free_r+0x74>
 8002742:	230c      	movs	r3, #12
 8002744:	602b      	str	r3, [r5, #0]
 8002746:	e7d6      	b.n	80026f6 <_free_r+0x22>
 8002748:	6820      	ldr	r0, [r4, #0]
 800274a:	1821      	adds	r1, r4, r0
 800274c:	428b      	cmp	r3, r1
 800274e:	bf01      	itttt	eq
 8002750:	6819      	ldreq	r1, [r3, #0]
 8002752:	685b      	ldreq	r3, [r3, #4]
 8002754:	1809      	addeq	r1, r1, r0
 8002756:	6021      	streq	r1, [r4, #0]
 8002758:	6063      	str	r3, [r4, #4]
 800275a:	6054      	str	r4, [r2, #4]
 800275c:	e7cb      	b.n	80026f6 <_free_r+0x22>
 800275e:	bd38      	pop	{r3, r4, r5, pc}
 8002760:	2000b990 	.word	0x2000b990

08002764 <sbrk_aligned>:
 8002764:	b570      	push	{r4, r5, r6, lr}
 8002766:	4e0e      	ldr	r6, [pc, #56]	; (80027a0 <sbrk_aligned+0x3c>)
 8002768:	460c      	mov	r4, r1
 800276a:	6831      	ldr	r1, [r6, #0]
 800276c:	4605      	mov	r5, r0
 800276e:	b911      	cbnz	r1, 8002776 <sbrk_aligned+0x12>
 8002770:	f000 f8bc 	bl	80028ec <_sbrk_r>
 8002774:	6030      	str	r0, [r6, #0]
 8002776:	4621      	mov	r1, r4
 8002778:	4628      	mov	r0, r5
 800277a:	f000 f8b7 	bl	80028ec <_sbrk_r>
 800277e:	1c43      	adds	r3, r0, #1
 8002780:	d00a      	beq.n	8002798 <sbrk_aligned+0x34>
 8002782:	1cc4      	adds	r4, r0, #3
 8002784:	f024 0403 	bic.w	r4, r4, #3
 8002788:	42a0      	cmp	r0, r4
 800278a:	d007      	beq.n	800279c <sbrk_aligned+0x38>
 800278c:	1a21      	subs	r1, r4, r0
 800278e:	4628      	mov	r0, r5
 8002790:	f000 f8ac 	bl	80028ec <_sbrk_r>
 8002794:	3001      	adds	r0, #1
 8002796:	d101      	bne.n	800279c <sbrk_aligned+0x38>
 8002798:	f04f 34ff 	mov.w	r4, #4294967295
 800279c:	4620      	mov	r0, r4
 800279e:	bd70      	pop	{r4, r5, r6, pc}
 80027a0:	2000b994 	.word	0x2000b994

080027a4 <_malloc_r>:
 80027a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027a8:	1ccd      	adds	r5, r1, #3
 80027aa:	f025 0503 	bic.w	r5, r5, #3
 80027ae:	3508      	adds	r5, #8
 80027b0:	2d0c      	cmp	r5, #12
 80027b2:	bf38      	it	cc
 80027b4:	250c      	movcc	r5, #12
 80027b6:	2d00      	cmp	r5, #0
 80027b8:	4607      	mov	r7, r0
 80027ba:	db01      	blt.n	80027c0 <_malloc_r+0x1c>
 80027bc:	42a9      	cmp	r1, r5
 80027be:	d905      	bls.n	80027cc <_malloc_r+0x28>
 80027c0:	230c      	movs	r3, #12
 80027c2:	2600      	movs	r6, #0
 80027c4:	603b      	str	r3, [r7, #0]
 80027c6:	4630      	mov	r0, r6
 80027c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027cc:	4e2e      	ldr	r6, [pc, #184]	; (8002888 <_malloc_r+0xe4>)
 80027ce:	f000 f89d 	bl	800290c <__malloc_lock>
 80027d2:	6833      	ldr	r3, [r6, #0]
 80027d4:	461c      	mov	r4, r3
 80027d6:	bb34      	cbnz	r4, 8002826 <_malloc_r+0x82>
 80027d8:	4629      	mov	r1, r5
 80027da:	4638      	mov	r0, r7
 80027dc:	f7ff ffc2 	bl	8002764 <sbrk_aligned>
 80027e0:	1c43      	adds	r3, r0, #1
 80027e2:	4604      	mov	r4, r0
 80027e4:	d14d      	bne.n	8002882 <_malloc_r+0xde>
 80027e6:	6834      	ldr	r4, [r6, #0]
 80027e8:	4626      	mov	r6, r4
 80027ea:	2e00      	cmp	r6, #0
 80027ec:	d140      	bne.n	8002870 <_malloc_r+0xcc>
 80027ee:	6823      	ldr	r3, [r4, #0]
 80027f0:	4631      	mov	r1, r6
 80027f2:	4638      	mov	r0, r7
 80027f4:	eb04 0803 	add.w	r8, r4, r3
 80027f8:	f000 f878 	bl	80028ec <_sbrk_r>
 80027fc:	4580      	cmp	r8, r0
 80027fe:	d13a      	bne.n	8002876 <_malloc_r+0xd2>
 8002800:	6821      	ldr	r1, [r4, #0]
 8002802:	3503      	adds	r5, #3
 8002804:	1a6d      	subs	r5, r5, r1
 8002806:	f025 0503 	bic.w	r5, r5, #3
 800280a:	3508      	adds	r5, #8
 800280c:	2d0c      	cmp	r5, #12
 800280e:	bf38      	it	cc
 8002810:	250c      	movcc	r5, #12
 8002812:	4638      	mov	r0, r7
 8002814:	4629      	mov	r1, r5
 8002816:	f7ff ffa5 	bl	8002764 <sbrk_aligned>
 800281a:	3001      	adds	r0, #1
 800281c:	d02b      	beq.n	8002876 <_malloc_r+0xd2>
 800281e:	6823      	ldr	r3, [r4, #0]
 8002820:	442b      	add	r3, r5
 8002822:	6023      	str	r3, [r4, #0]
 8002824:	e00e      	b.n	8002844 <_malloc_r+0xa0>
 8002826:	6822      	ldr	r2, [r4, #0]
 8002828:	1b52      	subs	r2, r2, r5
 800282a:	d41e      	bmi.n	800286a <_malloc_r+0xc6>
 800282c:	2a0b      	cmp	r2, #11
 800282e:	d916      	bls.n	800285e <_malloc_r+0xba>
 8002830:	1961      	adds	r1, r4, r5
 8002832:	42a3      	cmp	r3, r4
 8002834:	6025      	str	r5, [r4, #0]
 8002836:	bf18      	it	ne
 8002838:	6059      	strne	r1, [r3, #4]
 800283a:	6863      	ldr	r3, [r4, #4]
 800283c:	bf08      	it	eq
 800283e:	6031      	streq	r1, [r6, #0]
 8002840:	5162      	str	r2, [r4, r5]
 8002842:	604b      	str	r3, [r1, #4]
 8002844:	4638      	mov	r0, r7
 8002846:	f104 060b 	add.w	r6, r4, #11
 800284a:	f000 f865 	bl	8002918 <__malloc_unlock>
 800284e:	f026 0607 	bic.w	r6, r6, #7
 8002852:	1d23      	adds	r3, r4, #4
 8002854:	1af2      	subs	r2, r6, r3
 8002856:	d0b6      	beq.n	80027c6 <_malloc_r+0x22>
 8002858:	1b9b      	subs	r3, r3, r6
 800285a:	50a3      	str	r3, [r4, r2]
 800285c:	e7b3      	b.n	80027c6 <_malloc_r+0x22>
 800285e:	6862      	ldr	r2, [r4, #4]
 8002860:	42a3      	cmp	r3, r4
 8002862:	bf0c      	ite	eq
 8002864:	6032      	streq	r2, [r6, #0]
 8002866:	605a      	strne	r2, [r3, #4]
 8002868:	e7ec      	b.n	8002844 <_malloc_r+0xa0>
 800286a:	4623      	mov	r3, r4
 800286c:	6864      	ldr	r4, [r4, #4]
 800286e:	e7b2      	b.n	80027d6 <_malloc_r+0x32>
 8002870:	4634      	mov	r4, r6
 8002872:	6876      	ldr	r6, [r6, #4]
 8002874:	e7b9      	b.n	80027ea <_malloc_r+0x46>
 8002876:	230c      	movs	r3, #12
 8002878:	4638      	mov	r0, r7
 800287a:	603b      	str	r3, [r7, #0]
 800287c:	f000 f84c 	bl	8002918 <__malloc_unlock>
 8002880:	e7a1      	b.n	80027c6 <_malloc_r+0x22>
 8002882:	6025      	str	r5, [r4, #0]
 8002884:	e7de      	b.n	8002844 <_malloc_r+0xa0>
 8002886:	bf00      	nop
 8002888:	2000b990 	.word	0x2000b990

0800288c <_realloc_r>:
 800288c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002890:	4680      	mov	r8, r0
 8002892:	4614      	mov	r4, r2
 8002894:	460e      	mov	r6, r1
 8002896:	b921      	cbnz	r1, 80028a2 <_realloc_r+0x16>
 8002898:	4611      	mov	r1, r2
 800289a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800289e:	f7ff bf81 	b.w	80027a4 <_malloc_r>
 80028a2:	b92a      	cbnz	r2, 80028b0 <_realloc_r+0x24>
 80028a4:	f7ff ff16 	bl	80026d4 <_free_r>
 80028a8:	4625      	mov	r5, r4
 80028aa:	4628      	mov	r0, r5
 80028ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028b0:	f000 f838 	bl	8002924 <_malloc_usable_size_r>
 80028b4:	4284      	cmp	r4, r0
 80028b6:	4607      	mov	r7, r0
 80028b8:	d802      	bhi.n	80028c0 <_realloc_r+0x34>
 80028ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80028be:	d812      	bhi.n	80028e6 <_realloc_r+0x5a>
 80028c0:	4621      	mov	r1, r4
 80028c2:	4640      	mov	r0, r8
 80028c4:	f7ff ff6e 	bl	80027a4 <_malloc_r>
 80028c8:	4605      	mov	r5, r0
 80028ca:	2800      	cmp	r0, #0
 80028cc:	d0ed      	beq.n	80028aa <_realloc_r+0x1e>
 80028ce:	42bc      	cmp	r4, r7
 80028d0:	4622      	mov	r2, r4
 80028d2:	4631      	mov	r1, r6
 80028d4:	bf28      	it	cs
 80028d6:	463a      	movcs	r2, r7
 80028d8:	f7ff fed4 	bl	8002684 <memcpy>
 80028dc:	4631      	mov	r1, r6
 80028de:	4640      	mov	r0, r8
 80028e0:	f7ff fef8 	bl	80026d4 <_free_r>
 80028e4:	e7e1      	b.n	80028aa <_realloc_r+0x1e>
 80028e6:	4635      	mov	r5, r6
 80028e8:	e7df      	b.n	80028aa <_realloc_r+0x1e>
	...

080028ec <_sbrk_r>:
 80028ec:	b538      	push	{r3, r4, r5, lr}
 80028ee:	2300      	movs	r3, #0
 80028f0:	4d05      	ldr	r5, [pc, #20]	; (8002908 <_sbrk_r+0x1c>)
 80028f2:	4604      	mov	r4, r0
 80028f4:	4608      	mov	r0, r1
 80028f6:	602b      	str	r3, [r5, #0]
 80028f8:	f7fe fca4 	bl	8001244 <_sbrk>
 80028fc:	1c43      	adds	r3, r0, #1
 80028fe:	d102      	bne.n	8002906 <_sbrk_r+0x1a>
 8002900:	682b      	ldr	r3, [r5, #0]
 8002902:	b103      	cbz	r3, 8002906 <_sbrk_r+0x1a>
 8002904:	6023      	str	r3, [r4, #0]
 8002906:	bd38      	pop	{r3, r4, r5, pc}
 8002908:	2000b998 	.word	0x2000b998

0800290c <__malloc_lock>:
 800290c:	4801      	ldr	r0, [pc, #4]	; (8002914 <__malloc_lock+0x8>)
 800290e:	f000 b811 	b.w	8002934 <__retarget_lock_acquire_recursive>
 8002912:	bf00      	nop
 8002914:	2000b99c 	.word	0x2000b99c

08002918 <__malloc_unlock>:
 8002918:	4801      	ldr	r0, [pc, #4]	; (8002920 <__malloc_unlock+0x8>)
 800291a:	f000 b80c 	b.w	8002936 <__retarget_lock_release_recursive>
 800291e:	bf00      	nop
 8002920:	2000b99c 	.word	0x2000b99c

08002924 <_malloc_usable_size_r>:
 8002924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002928:	1f18      	subs	r0, r3, #4
 800292a:	2b00      	cmp	r3, #0
 800292c:	bfbc      	itt	lt
 800292e:	580b      	ldrlt	r3, [r1, r0]
 8002930:	18c0      	addlt	r0, r0, r3
 8002932:	4770      	bx	lr

08002934 <__retarget_lock_acquire_recursive>:
 8002934:	4770      	bx	lr

08002936 <__retarget_lock_release_recursive>:
 8002936:	4770      	bx	lr

08002938 <_init>:
 8002938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293a:	bf00      	nop
 800293c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293e:	bc08      	pop	{r3}
 8002940:	469e      	mov	lr, r3
 8002942:	4770      	bx	lr

08002944 <_fini>:
 8002944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002946:	bf00      	nop
 8002948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800294a:	bc08      	pop	{r3}
 800294c:	469e      	mov	lr, r3
 800294e:	4770      	bx	lr
