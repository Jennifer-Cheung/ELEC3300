
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002210  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005e8ac  080023f4  080023f4  000123f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08060ca0  08060ca0  0008b880  2**0
                  CONTENTS
  4 .ARM          00000000  08060ca0  08060ca0  0008b880  2**0
                  CONTENTS
  5 .preinit_array 00000000  08060ca0  08060ca0  0008b880  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08060ca0  08060ca0  00070ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08060ca4  08060ca4  00070ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000b880  20000000  08060ca8  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000b880  0806c528  0008b880  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000b934  0806c528  0008b934  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0008b880  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b4e1  00000000  00000000  0008b8a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024b8  00000000  00000000  00096d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00005dba  00000000  00000000  00099242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000710  00000000  00000000  0009f000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001428  00000000  00000000  0009f710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019e1d  00000000  00000000  000a0b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c248  00000000  00000000  000ba955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009295b  00000000  00000000  000c6b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001594f8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000011ac  00000000  00000000  00159548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000b880 	.word	0x2000b880
 8000200:	00000000 	.word	0x00000000
 8000204:	080023dc 	.word	0x080023dc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000b884 	.word	0x2000b884
 8000220:	080023dc 	.word	0x080023dc

08000224 <Enemy_displayEnemyFacingLeft>:

const uint8_t ENEMY_WIDTH = 32;
const uint8_t ENEMY_HEIGHT = 28;
uint8_t showEnemy = 1;

void Enemy_displayEnemyFacingLeft(uint8_t fullHeight, uint16_t kirbyX, uint8_t spriteWidth, uint8_t spriteHeight, uint8_t spriteOffset, const uint16_t* frame, uint16_t xPos, uint16_t yPos) {
 8000224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000228:	4615      	mov	r5, r2
 800022a:	b087      	sub	sp, #28
 800022c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8000230:	f103 3aff 	add.w	sl, r3, #4294967295
 8000234:	9203      	str	r2, [sp, #12]
 8000236:	fb0a f205 	mul.w	r2, sl, r5
 800023a:	9f11      	ldr	r7, [sp, #68]	; 0x44
	for (int x = 0; x < spriteWidth; x++) {
 800023c:	2600      	movs	r6, #0
 800023e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8000242:	f06f 0201 	mvn.w	r2, #1
 8000246:	436a      	muls	r2, r5
 8000248:	9201      	str	r2, [sp, #4]
 800024a:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
void Enemy_displayEnemyFacingLeft(uint8_t fullHeight, uint16_t kirbyX, uint8_t spriteWidth, uint8_t spriteHeight, uint8_t spriteOffset, const uint16_t* frame, uint16_t xPos, uint16_t yPos) {
 800024e:	f8bd b048 	ldrh.w	fp, [sp, #72]	; 0x48
 8000252:	4402      	add	r2, r0
 8000254:	1ad3      	subs	r3, r2, r3
 8000256:	9102      	str	r1, [sp, #8]
 8000258:	9304      	str	r3, [sp, #16]
	for (int x = 0; x < spriteWidth; x++) {
 800025a:	42ae      	cmp	r6, r5
 800025c:	db02      	blt.n	8000264 <Enemy_displayEnemyFacingLeft+0x40>
			  color = newColor;
		  }
		  LCD_DrawDot(displayXPos, displayYPos, color);
		}
	}
}
 800025e:	b007      	add	sp, #28
 8000260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (x + xPos - kirbyX > 160) {
 8000264:	9b02      	ldr	r3, [sp, #8]
 8000266:	ebab 0303 	sub.w	r3, fp, r3
 800026a:	4433      	add	r3, r6
 800026c:	2ba0      	cmp	r3, #160	; 0xa0
 800026e:	dcf6      	bgt.n	800025e <Enemy_displayEnemyFacingLeft+0x3a>
		uint16_t displayXPos = (xPos + spriteOffset + spriteWidth - x) % 320;
 8000270:	9b03      	ldr	r3, [sp, #12]
		for (int y = spriteHeight - 1; y >= 0; y--) {
 8000272:	46b9      	mov	r9, r7
 8000274:	eb03 040b 	add.w	r4, r3, fp
		uint16_t displayXPos = (xPos + spriteOffset + spriteWidth - x) % 320;
 8000278:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800027c:	442c      	add	r4, r5
 800027e:	1ba4      	subs	r4, r4, r6
 8000280:	fb94 f0f3 	sdiv	r0, r4, r3
		for (int y = spriteHeight - 1; y >= 0; y--) {
 8000284:	46d0      	mov	r8, sl
		uint16_t displayXPos = (xPos + spriteOffset + spriteWidth - x) % 320;
 8000286:	fb03 4010 	mls	r0, r3, r0, r4
			  uint16_t newColor = platformImg[882 * (displayYPos) + (xPos + spriteOffset + spriteWidth - x)];
 800028a:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <Enemy_displayEnemyFacingLeft+0xac>)
		uint16_t displayXPos = (xPos + spriteOffset + spriteWidth - x) % 320;
 800028c:	b280      	uxth	r0, r0
		for (int y = spriteHeight - 1; y >= 0; y--) {
 800028e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8000292:	d102      	bne.n	800029a <Enemy_displayEnemyFacingLeft+0x76>
	for (int x = 0; x < spriteWidth; x++) {
 8000294:	3601      	adds	r6, #1
 8000296:	3702      	adds	r7, #2
 8000298:	e7df      	b.n	800025a <Enemy_displayEnemyFacingLeft+0x36>
		  if (color == 0x024A) {
 800029a:	f240 2c4a 	movw	ip, #586	; 0x24a
 800029e:	9a04      	ldr	r2, [sp, #16]
		  LCD_DrawDot(displayXPos, displayYPos, color);
 80002a0:	9005      	str	r0, [sp, #20]
 80002a2:	eb02 0108 	add.w	r1, r2, r8
		  uint16_t color = frame[y * spriteWidth + x];
 80002a6:	f8b9 2000 	ldrh.w	r2, [r9]
 80002aa:	b289      	uxth	r1, r1
		  if (color == 0x024A) {
 80002ac:	4562      	cmp	r2, ip
			  uint16_t newColor = platformImg[882 * (displayYPos) + (xPos + spriteOffset + spriteWidth - x)];
 80002ae:	bf02      	ittt	eq
 80002b0:	f240 3272 	movweq	r2, #882	; 0x372
 80002b4:	fb02 4201 	mlaeq	r2, r2, r1, r4
 80002b8:	f833 2012 	ldrheq.w	r2, [r3, r2, lsl #1]
		  LCD_DrawDot(displayXPos, displayYPos, color);
 80002bc:	f000 ff68 	bl	8001190 <LCD_DrawDot>
		for (int y = spriteHeight - 1; y >= 0; y--) {
 80002c0:	9b01      	ldr	r3, [sp, #4]
 80002c2:	9805      	ldr	r0, [sp, #20]
 80002c4:	4499      	add	r9, r3
 80002c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80002ca:	4b01      	ldr	r3, [pc, #4]	; (80002d0 <Enemy_displayEnemyFacingLeft+0xac>)
 80002cc:	e7df      	b.n	800028e <Enemy_displayEnemyFacingLeft+0x6a>
 80002ce:	bf00      	nop
 80002d0:	08003574 	.word	0x08003574

080002d4 <Enemy_redrawColumnLeft>:
static uint8_t boomerangSprite = 0;
static enum EnemyState state = ENEMY_IDLE;
static uint16_t HEIGHT = 6*24 - ENEMY_HEIGHT;
static uint8_t boomerangLock = 1;

void Enemy_redrawColumnLeft() {
 80002d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Redraw the first column
	for (int y = 0; y < 16; y++) {
 80002d6:	2400      	movs	r4, #0
	  uint16_t displayX = (boomerangX) % 320;
	  uint16_t displayY = HEIGHT + y;
	  uint16_t color = platformImg[882 * (displayY) + (boomerangX)];
 80002d8:	f240 3672 	movw	r6, #882	; 0x372
	  uint16_t displayX = (boomerangX) % 320;
 80002dc:	4f0d      	ldr	r7, [pc, #52]	; (8000314 <Enemy_redrawColumnLeft+0x40>)
	  uint16_t color = platformImg[882 * (displayY) + (boomerangX)];
 80002de:	4d0e      	ldr	r5, [pc, #56]	; (8000318 <Enemy_redrawColumnLeft+0x44>)
	  uint16_t displayX = (boomerangX) % 320;
 80002e0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80002e4:	8838      	ldrh	r0, [r7, #0]
	  LCD_DrawDot(displayX, displayY, color);
 80002e6:	f104 0174 	add.w	r1, r4, #116	; 0x74
	  uint16_t displayX = (boomerangX) % 320;
 80002ea:	fbb0 fcf2 	udiv	ip, r0, r2
	  uint16_t color = platformImg[882 * (displayY) + (boomerangX)];
 80002ee:	fb06 0304 	mla	r3, r6, r4, r0
	  uint16_t displayX = (boomerangX) % 320;
 80002f2:	fb02 001c 	mls	r0, r2, ip, r0
	  uint16_t color = platformImg[882 * (displayY) + (boomerangX)];
 80002f6:	f503 33c7 	add.w	r3, r3, #101888	; 0x18e00
 80002fa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
	  LCD_DrawDot(displayX, displayY, color);
 80002fe:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 8000302:	b289      	uxth	r1, r1
 8000304:	b280      	uxth	r0, r0
	for (int y = 0; y < 16; y++) {
 8000306:	3401      	adds	r4, #1
	  LCD_DrawDot(displayX, displayY, color);
 8000308:	f000 ff42 	bl	8001190 <LCD_DrawDot>
	for (int y = 0; y < 16; y++) {
 800030c:	2c10      	cmp	r4, #16
 800030e:	d1e7      	bne.n	80002e0 <Enemy_redrawColumnLeft+0xc>
	}
}
 8000310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000312:	bf00      	nop
 8000314:	20000004 	.word	0x20000004
 8000318:	08003574 	.word	0x08003574

0800031c <Enemy_redrawColumnRight>:

void Enemy_redrawColumnRight() {
 800031c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Redraw the last column
	for (int y = 0; y < 16; y++) {
 800031e:	2400      	movs	r4, #0
		uint16_t displayX = (boomerangX + 23) % 320;
		uint16_t displayY = HEIGHT + y;
		uint16_t color = platformImg[882 * (displayY) + boomerangX + 23];
 8000320:	f240 3672 	movw	r6, #882	; 0x372
		uint16_t displayX = (boomerangX + 23) % 320;
 8000324:	4f0d      	ldr	r7, [pc, #52]	; (800035c <Enemy_redrawColumnRight+0x40>)
		uint16_t color = platformImg[882 * (displayY) + boomerangX + 23];
 8000326:	4d0e      	ldr	r5, [pc, #56]	; (8000360 <Enemy_redrawColumnRight+0x44>)
		uint16_t displayX = (boomerangX + 23) % 320;
 8000328:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800032c:	8838      	ldrh	r0, [r7, #0]
		LCD_DrawDot(displayX, displayY, color);
 800032e:	f104 0174 	add.w	r1, r4, #116	; 0x74
		uint16_t color = platformImg[882 * (displayY) + boomerangX + 23];
 8000332:	fb06 0304 	mla	r3, r6, r4, r0
		uint16_t displayX = (boomerangX + 23) % 320;
 8000336:	3017      	adds	r0, #23
 8000338:	fbb0 fcf2 	udiv	ip, r0, r2
 800033c:	fb02 001c 	mls	r0, r2, ip, r0
		uint16_t color = platformImg[882 * (displayY) + boomerangX + 23];
 8000340:	f503 33c7 	add.w	r3, r3, #101888	; 0x18e00
 8000344:	f203 13bf 	addw	r3, r3, #447	; 0x1bf
		LCD_DrawDot(displayX, displayY, color);
 8000348:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 800034c:	b289      	uxth	r1, r1
 800034e:	b280      	uxth	r0, r0
	for (int y = 0; y < 16; y++) {
 8000350:	3401      	adds	r4, #1
		LCD_DrawDot(displayX, displayY, color);
 8000352:	f000 ff1d 	bl	8001190 <LCD_DrawDot>
	for (int y = 0; y < 16; y++) {
 8000356:	2c10      	cmp	r4, #16
 8000358:	d1e6      	bne.n	8000328 <Enemy_redrawColumnRight+0xc>
	}
}
 800035a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800035c:	20000004 	.word	0x20000004
 8000360:	08003574 	.word	0x08003574

08000364 <Enemy_eraseBoomerang>:

void Enemy_eraseBoomerang() {
 8000364:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int y = 0; y < 16; y++) {
		for (int x = 0; x < 23; x++) {
 8000368:	2510      	movs	r5, #16
 800036a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80003b8 <Enemy_eraseBoomerang+0x54>
			uint16_t displayX = (boomerangX + x) % 320;
 800036e:	f8df 904c 	ldr.w	r9, [pc, #76]	; 80003bc <Enemy_eraseBoomerang+0x58>
			uint16_t displayY = HEIGHT + y;
			uint16_t color = platformImg[882 * displayY + boomerangX + x];
 8000372:	f8df a04c 	ldr.w	sl, [pc, #76]	; 80003c0 <Enemy_eraseBoomerang+0x5c>
		for (int x = 0; x < 23; x++) {
 8000376:	2600      	movs	r6, #0
			uint16_t displayX = (boomerangX + x) % 320;
 8000378:	f44f 77a0 	mov.w	r7, #320	; 0x140
 800037c:	fb08 f405 	mul.w	r4, r8, r5
 8000380:	f1c5 0b84 	rsb	fp, r5, #132	; 0x84
 8000384:	f504 34e3 	add.w	r4, r4, #116224	; 0x1c600
 8000388:	fa1f fb8b 	uxth.w	fp, fp
 800038c:	34c8      	adds	r4, #200	; 0xc8
 800038e:	f8b9 0000 	ldrh.w	r0, [r9]
			LCD_DrawDot(displayX, displayY, color);
 8000392:	4659      	mov	r1, fp
			uint16_t color = platformImg[882 * displayY + boomerangX + x];
 8000394:	4430      	add	r0, r6
			uint16_t displayX = (boomerangX + x) % 320;
 8000396:	fbb0 f2f7 	udiv	r2, r0, r7
			uint16_t color = platformImg[882 * displayY + boomerangX + x];
 800039a:	1903      	adds	r3, r0, r4
			uint16_t displayX = (boomerangX + x) % 320;
 800039c:	fb07 0012 	mls	r0, r7, r2, r0
		for (int x = 0; x < 23; x++) {
 80003a0:	3601      	adds	r6, #1
			LCD_DrawDot(displayX, displayY, color);
 80003a2:	f83a 2013 	ldrh.w	r2, [sl, r3, lsl #1]
 80003a6:	b280      	uxth	r0, r0
 80003a8:	f000 fef2 	bl	8001190 <LCD_DrawDot>
		for (int x = 0; x < 23; x++) {
 80003ac:	2e17      	cmp	r6, #23
 80003ae:	d1ee      	bne.n	800038e <Enemy_eraseBoomerang+0x2a>
	for (int y = 0; y < 16; y++) {
 80003b0:	3d01      	subs	r5, #1
 80003b2:	d1e0      	bne.n	8000376 <Enemy_eraseBoomerang+0x12>
		}
	}
}
 80003b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003b8:	fffffc8e 	.word	0xfffffc8e
 80003bc:	20000004 	.word	0x20000004
 80003c0:	08003574 	.word	0x08003574

080003c4 <Enemy_eraseEnemy>:

void Enemy_eraseEnemy() {
 80003c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80003c8:	251c      	movs	r5, #28
	for (int y = 0; y < ENEMY_HEIGHT; y++) {
		for (int x = 0; x < ENEMY_WIDTH; x++) {
			uint16_t displayX = (416 + x) % 320;
 80003ca:	f44f 78a0 	mov.w	r8, #320	; 0x140
 80003ce:	4f0d      	ldr	r7, [pc, #52]	; (8000404 <Enemy_eraseEnemy+0x40>)
void Enemy_eraseEnemy() {
 80003d0:	f44f 74d0 	mov.w	r4, #416	; 0x1a0
 80003d4:	f1c5 0690 	rsb	r6, r5, #144	; 0x90
 80003d8:	b2b6      	uxth	r6, r6
			uint16_t displayX = (416 + x) % 320;
 80003da:	fbb4 f0f8 	udiv	r0, r4, r8
 80003de:	fb08 4010 	mls	r0, r8, r0, r4
			uint16_t displayY = HEIGHT + y;
			uint16_t color = platformImg[882 * displayY + 416 + x];
			LCD_DrawDot(displayX, displayY, color);
 80003e2:	f837 2014 	ldrh.w	r2, [r7, r4, lsl #1]
 80003e6:	4631      	mov	r1, r6
 80003e8:	b280      	uxth	r0, r0
		for (int x = 0; x < ENEMY_WIDTH; x++) {
 80003ea:	3401      	adds	r4, #1
			LCD_DrawDot(displayX, displayY, color);
 80003ec:	f000 fed0 	bl	8001190 <LCD_DrawDot>
		for (int x = 0; x < ENEMY_WIDTH; x++) {
 80003f0:	f5b4 7fe0 	cmp.w	r4, #448	; 0x1c0
 80003f4:	d1f1      	bne.n	80003da <Enemy_eraseEnemy+0x16>
	for (int y = 0; y < ENEMY_HEIGHT; y++) {
 80003f6:	3d01      	subs	r5, #1
 80003f8:	f207 67e4 	addw	r7, r7, #1764	; 0x6e4
 80003fc:	d1e8      	bne.n	80003d0 <Enemy_eraseEnemy+0xc>
		}
	}
}
 80003fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000402:	bf00      	nop
 8000404:	080354c4 	.word	0x080354c4

08000408 <Enemy_updateEnemy>:

void Enemy_updateEnemy(const struct Kirby* kirby) {
 8000408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t kirbyX = kirby->xPos;
 800040c:	8807      	ldrh	r7, [r0, #0]
void Enemy_updateEnemy(const struct Kirby* kirby) {
 800040e:	b085      	sub	sp, #20
	if (416 - kirbyX > 160) {
 8000410:	f5c7 73d0 	rsb	r3, r7, #416	; 0x1a0
 8000414:	2ba0      	cmp	r3, #160	; 0xa0
 8000416:	dc35      	bgt.n	8000484 <Enemy_updateEnemy+0x7c>
		return;
	}

	if (remainingTicks == 0) {
 8000418:	4e41      	ldr	r6, [pc, #260]	; (8000520 <Enemy_updateEnemy+0x118>)
 800041a:	4d42      	ldr	r5, [pc, #264]	; (8000524 <Enemy_updateEnemy+0x11c>)
 800041c:	7833      	ldrb	r3, [r6, #0]
 800041e:	b933      	cbnz	r3, 800042e <Enemy_updateEnemy+0x26>
		remainingTicks = 20;
 8000420:	2314      	movs	r3, #20
 8000422:	7033      	strb	r3, [r6, #0]
		state = !state;
 8000424:	782b      	ldrb	r3, [r5, #0]
 8000426:	fab3 f383 	clz	r3, r3
 800042a:	095b      	lsrs	r3, r3, #5
 800042c:	702b      	strb	r3, [r5, #0]
	}

	if (boomerangTicks == 0) {
 800042e:	4c3e      	ldr	r4, [pc, #248]	; (8000528 <Enemy_updateEnemy+0x120>)
 8000430:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800052c <Enemy_updateEnemy+0x124>
 8000434:	f894 8000 	ldrb.w	r8, [r4]
 8000438:	f1b8 0f00 	cmp.w	r8, #0
 800043c:	d10b      	bne.n	8000456 <Enemy_updateEnemy+0x4e>
		if (boomerangDirection == LEFT) {
 800043e:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 8000530 <Enemy_updateEnemy+0x128>
 8000442:	f04f 0b0a 	mov.w	fp, #10
 8000446:	f89a 3000 	ldrb.w	r3, [sl]
 800044a:	2b01      	cmp	r3, #1
 800044c:	d11d      	bne.n	800048a <Enemy_updateEnemy+0x82>
			boomerangDirection = RIGHT;
 800044e:	f88a 8000 	strb.w	r8, [sl]
			boomerangTicks = 10;
 8000452:	f884 b000 	strb.w	fp, [r4]
			boomerangLock = 0;
		}
	}

	if (state == ENEMY_IDLE) {
		Enemy_displayEnemyFacingLeft(ENEMY_HEIGHT, kirbyX, 25, 24, 3, ENEMY_IDLE_SPRITE, 416, HEIGHT);
 8000456:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 800045a:	2274      	movs	r2, #116	; 0x74
	if (state == ENEMY_IDLE) {
 800045c:	7829      	ldrb	r1, [r5, #0]
		Enemy_displayEnemyFacingLeft(ENEMY_HEIGHT, kirbyX, 25, 24, 3, ENEMY_IDLE_SPRITE, 416, HEIGHT);
 800045e:	e9cd 3202 	strd	r3, r2, [sp, #8]
	if (state == ENEMY_IDLE) {
 8000462:	bb01      	cbnz	r1, 80004a6 <Enemy_updateEnemy+0x9e>
		Enemy_displayEnemyFacingLeft(ENEMY_HEIGHT, kirbyX, 25, 24, 3, ENEMY_IDLE_SPRITE, 416, HEIGHT);
 8000464:	4b33      	ldr	r3, [pc, #204]	; (8000534 <Enemy_updateEnemy+0x12c>)
 8000466:	2219      	movs	r2, #25
 8000468:	9301      	str	r3, [sp, #4]
 800046a:	2303      	movs	r3, #3
 800046c:	4639      	mov	r1, r7
 800046e:	9300      	str	r3, [sp, #0]
 8000470:	201c      	movs	r0, #28
 8000472:	2318      	movs	r3, #24
 8000474:	f7ff fed6 	bl	8000224 <Enemy_displayEnemyFacingLeft>
		boomerangLock = 1;
 8000478:	2301      	movs	r3, #1
 800047a:	f889 3000 	strb.w	r3, [r9]
			Enemy_displayEnemyFacingLeft(16, kirbyX, 23, 16, 0, sprite, boomerangX, HEIGHT);
		}
		boomerangSprite = !boomerangSprite;
		boomerangTicks--;
	}
	remainingTicks--;
 800047e:	7833      	ldrb	r3, [r6, #0]
 8000480:	3b01      	subs	r3, #1
 8000482:	7033      	strb	r3, [r6, #0]
}
 8000484:	b005      	add	sp, #20
 8000486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			Enemy_eraseBoomerang();
 800048a:	f7ff ff6b 	bl	8000364 <Enemy_eraseBoomerang>
			boomerangDirection = LEFT;
 800048e:	2301      	movs	r3, #1
			boomerangX = 384;
 8000490:	f44f 72c0 	mov.w	r2, #384	; 0x180
			boomerangDirection = LEFT;
 8000494:	f88a 3000 	strb.w	r3, [sl]
			boomerangX = 384;
 8000498:	4b27      	ldr	r3, [pc, #156]	; (8000538 <Enemy_updateEnemy+0x130>)
			boomerangTicks = 10;
 800049a:	f884 b000 	strb.w	fp, [r4]
			boomerangX = 384;
 800049e:	801a      	strh	r2, [r3, #0]
			boomerangLock = 0;
 80004a0:	f889 8000 	strb.w	r8, [r9]
 80004a4:	e7d7      	b.n	8000456 <Enemy_updateEnemy+0x4e>
		Enemy_displayEnemyFacingLeft(ENEMY_HEIGHT, kirbyX, 32, 28, 0, ENEMY_ATTACKING_SPRITE, 416, HEIGHT);
 80004a6:	4b25      	ldr	r3, [pc, #148]	; (800053c <Enemy_updateEnemy+0x134>)
 80004a8:	2220      	movs	r2, #32
 80004aa:	9301      	str	r3, [sp, #4]
 80004ac:	2300      	movs	r3, #0
 80004ae:	9300      	str	r3, [sp, #0]
 80004b0:	231c      	movs	r3, #28
 80004b2:	4639      	mov	r1, r7
 80004b4:	4618      	mov	r0, r3
 80004b6:	f7ff feb5 	bl	8000224 <Enemy_displayEnemyFacingLeft>
		if (boomerangDirection == LEFT) {
 80004ba:	4b1d      	ldr	r3, [pc, #116]	; (8000530 <Enemy_updateEnemy+0x128>)
 80004bc:	4d1e      	ldr	r5, [pc, #120]	; (8000538 <Enemy_updateEnemy+0x130>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b01      	cmp	r3, #1
 80004c2:	d128      	bne.n	8000516 <Enemy_updateEnemy+0x10e>
			Enemy_redrawColumnRight();
 80004c4:	f7ff ff2a 	bl	800031c <Enemy_redrawColumnRight>
			boomerangX--;
 80004c8:	882b      	ldrh	r3, [r5, #0]
 80004ca:	3b01      	subs	r3, #1
		const uint16_t* sprite = boomerangSprite == 0 ? BOOMERANG_SPRITE_0 : BOOMERANG_SPRITE_1;
 80004cc:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8000540 <Enemy_updateEnemy+0x138>
 80004d0:	4a1c      	ldr	r2, [pc, #112]	; (8000544 <Enemy_updateEnemy+0x13c>)
 80004d2:	f898 1000 	ldrb.w	r1, [r8]
			boomerangX++;
 80004d6:	802b      	strh	r3, [r5, #0]
		const uint16_t* sprite = boomerangSprite == 0 ? BOOMERANG_SPRITE_0 : BOOMERANG_SPRITE_1;
 80004d8:	4b1b      	ldr	r3, [pc, #108]	; (8000548 <Enemy_updateEnemy+0x140>)
 80004da:	2900      	cmp	r1, #0
 80004dc:	bf18      	it	ne
 80004de:	4613      	movne	r3, r2
		if (boomerangLock) {
 80004e0:	f899 2000 	ldrb.w	r2, [r9]
 80004e4:	b162      	cbz	r2, 8000500 <Enemy_updateEnemy+0xf8>
			Enemy_displayEnemyFacingLeft(16, kirbyX, 23, 16, 0, sprite, boomerangX, HEIGHT);
 80004e6:	2274      	movs	r2, #116	; 0x74
 80004e8:	9203      	str	r2, [sp, #12]
 80004ea:	882a      	ldrh	r2, [r5, #0]
 80004ec:	4639      	mov	r1, r7
 80004ee:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80004f2:	2300      	movs	r3, #0
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	2310      	movs	r3, #16
 80004f8:	2217      	movs	r2, #23
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff fe92 	bl	8000224 <Enemy_displayEnemyFacingLeft>
		boomerangSprite = !boomerangSprite;
 8000500:	f898 3000 	ldrb.w	r3, [r8]
 8000504:	fab3 f383 	clz	r3, r3
 8000508:	095b      	lsrs	r3, r3, #5
 800050a:	f888 3000 	strb.w	r3, [r8]
		boomerangTicks--;
 800050e:	7823      	ldrb	r3, [r4, #0]
 8000510:	3b01      	subs	r3, #1
 8000512:	7023      	strb	r3, [r4, #0]
 8000514:	e7b3      	b.n	800047e <Enemy_updateEnemy+0x76>
			Enemy_redrawColumnLeft();
 8000516:	f7ff fedd 	bl	80002d4 <Enemy_redrawColumnLeft>
			boomerangX++;
 800051a:	882b      	ldrh	r3, [r5, #0]
 800051c:	3301      	adds	r3, #1
 800051e:	e7d5      	b.n	80004cc <Enemy_updateEnemy+0xc4>
 8000520:	20000006 	.word	0x20000006
 8000524:	2000b89d 	.word	0x2000b89d
 8000528:	20000002 	.word	0x20000002
 800052c:	20000001 	.word	0x20000001
 8000530:	20000000 	.word	0x20000000
 8000534:	080030c4 	.word	0x080030c4
 8000538:	20000004 	.word	0x20000004
 800053c:	080029c4 	.word	0x080029c4
 8000540:	2000b89c 	.word	0x2000b89c
 8000544:	080026e4 	.word	0x080026e4
 8000548:	08002404 	.word	0x08002404

0800054c <Kirby_movePlatform>:
/*
 * Moves the platform image one pixel off from the original position.
 *
 * uint16_t xPos: the updated x Position of the first column
 * */
void Kirby_movePlatform(uint16_t kirbyX) {
 800054c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t xPos = kirbyX - 160;
	if (currentPos < xPos) {
 8000550:	4f33      	ldr	r7, [pc, #204]	; (8000620 <Kirby_movePlatform+0xd4>)
	uint16_t xPos = kirbyX - 160;
 8000552:	f1a0 04a0 	sub.w	r4, r0, #160	; 0xa0
	if (currentPos < xPos) {
 8000556:	883b      	ldrh	r3, [r7, #0]
	uint16_t xPos = kirbyX - 160;
 8000558:	b2a4      	uxth	r4, r4
	if (currentPos < xPos) {
 800055a:	42a3      	cmp	r3, r4
 800055c:	d243      	bcs.n	80005e6 <Kirby_movePlatform+0x9a>
		// Scrolling to the right
		uint16_t targetCol = (xPos - 1) % 320;
 800055e:	f44f 75a0 	mov.w	r5, #320	; 0x140
 8000562:	1e60      	subs	r0, r4, #1
 8000564:	fb90 f3f5 	sdiv	r3, r0, r5
 8000568:	f04f 0800 	mov.w	r8, #0
 800056c:	fb05 0013 	mls	r0, r5, r3, r0
 8000570:	4e2c      	ldr	r6, [pc, #176]	; (8000624 <Kirby_movePlatform+0xd8>)
 8000572:	b285      	uxth	r5, r0
		for (uint16_t row = 0; row < 216; row++) {
 8000574:	eb06 0644 	add.w	r6, r6, r4, lsl #1
			LCD_DrawDot(targetCol, row, platformImg[882 * row + xPos + 320 - 1]);
 8000578:	f8b6 227e 	ldrh.w	r2, [r6, #638]	; 0x27e
 800057c:	fa1f f188 	uxth.w	r1, r8
 8000580:	4628      	mov	r0, r5
		for (uint16_t row = 0; row < 216; row++) {
 8000582:	f108 0801 	add.w	r8, r8, #1
			LCD_DrawDot(targetCol, row, platformImg[882 * row + xPos + 320 - 1]);
 8000586:	f000 fe03 	bl	8001190 <LCD_DrawDot>
		for (uint16_t row = 0; row < 216; row++) {
 800058a:	f1b8 0fd8 	cmp.w	r8, #216	; 0xd8
 800058e:	f206 66e4 	addw	r6, r6, #1764	; 0x6e4
 8000592:	d1f1      	bne.n	8000578 <Kirby_movePlatform+0x2c>
	}
	currentPos = xPos;


	// Vertical scroll, starting from column = xPos
	  LCD_Write_Cmd(0x33);
 8000594:	2033      	movs	r0, #51	; 0x33
	currentPos = xPos;
 8000596:	803c      	strh	r4, [r7, #0]
	  LCD_Write_Cmd(0x33);
 8000598:	f000 fc86 	bl	8000ea8 <LCD_Write_Cmd>
	  LCD_Write_Data(0x00);
 800059c:	2000      	movs	r0, #0
 800059e:	f000 fc87 	bl	8000eb0 <LCD_Write_Data>
	  LCD_Write_Data(0x00);
 80005a2:	2000      	movs	r0, #0
 80005a4:	f000 fc84 	bl	8000eb0 <LCD_Write_Data>
	  LCD_Write_Data(0x01);
 80005a8:	2001      	movs	r0, #1
 80005aa:	f000 fc81 	bl	8000eb0 <LCD_Write_Data>
	  LCD_Write_Data(0x40);
 80005ae:	2040      	movs	r0, #64	; 0x40
 80005b0:	f000 fc7e 	bl	8000eb0 <LCD_Write_Data>
	  LCD_Write_Data(0x00);
 80005b4:	2000      	movs	r0, #0
 80005b6:	f000 fc7b 	bl	8000eb0 <LCD_Write_Data>
	  LCD_Write_Data(0x00);
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 fc78 	bl	8000eb0 <LCD_Write_Data>

	  LCD_Write_Cmd(0x37);
 80005c0:	2037      	movs	r0, #55	; 0x37
 80005c2:	f000 fc71 	bl	8000ea8 <LCD_Write_Cmd>
	  LCD_Write_Data((xPos % 320) >> 8);
 80005c6:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80005ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80005ce:	fb00 4013 	mls	r0, r0, r3, r4
 80005d2:	b284      	uxth	r4, r0
 80005d4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80005d8:	f000 fc6a 	bl	8000eb0 <LCD_Write_Data>
	  LCD_Write_Data((xPos % 320) & 0xff);
 80005dc:	b2e0      	uxtb	r0, r4
}
 80005de:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	  LCD_Write_Data((xPos % 320) & 0xff);
 80005e2:	f000 bc65 	b.w	8000eb0 <LCD_Write_Data>
	} else if (currentPos > xPos) {
 80005e6:	d918      	bls.n	800061a <Kirby_movePlatform+0xce>
		uint16_t targetCol = xPos % 320;
 80005e8:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80005ec:	fbb4 f6f0 	udiv	r6, r4, r0
 80005f0:	2500      	movs	r5, #0
			LCD_DrawDot(targetCol, row, platformImg[882 * row + xPos]);
 80005f2:	f240 69e4 	movw	r9, #1764	; 0x6e4
		uint16_t targetCol = xPos % 320;
 80005f6:	fb00 4616 	mls	r6, r0, r6, r4
 80005fa:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <Kirby_movePlatform+0xd8>)
 80005fc:	b2b6      	uxth	r6, r6
		for (uint16_t row = 0; row < 216; row++) {
 80005fe:	eb03 0844 	add.w	r8, r3, r4, lsl #1
			LCD_DrawDot(targetCol, row, platformImg[882 * row + xPos]);
 8000602:	fb09 f305 	mul.w	r3, r9, r5
 8000606:	b2a9      	uxth	r1, r5
 8000608:	4630      	mov	r0, r6
 800060a:	f838 2003 	ldrh.w	r2, [r8, r3]
		for (uint16_t row = 0; row < 216; row++) {
 800060e:	3501      	adds	r5, #1
			LCD_DrawDot(targetCol, row, platformImg[882 * row + xPos]);
 8000610:	f000 fdbe 	bl	8001190 <LCD_DrawDot>
		for (uint16_t row = 0; row < 216; row++) {
 8000614:	2dd8      	cmp	r5, #216	; 0xd8
 8000616:	d1f4      	bne.n	8000602 <Kirby_movePlatform+0xb6>
 8000618:	e7bc      	b.n	8000594 <Kirby_movePlatform+0x48>
}
 800061a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800061e:	bf00      	nop
 8000620:	2000b89e 	.word	0x2000b89e
 8000624:	08003574 	.word	0x08003574

08000628 <Kirby_redrawColumnLeft>:

void Kirby_redrawColumnLeft(struct Kirby* kirby) {
 8000628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800062c:	4605      	mov	r5, r0
	// Redraw the first column
	for (int y = 0; y < KIRBY_HEIGHT; y++) {
 800062e:	2400      	movs	r4, #0
	  uint16_t displayX = (kirby->xPos) % SCREEN_WIDTH;
	  uint16_t displayY = kirby->yPos + y;
	  uint16_t color = platformImg[882 * (displayY) + (kirby->xPos)];
 8000630:	f240 3872 	movw	r8, #882	; 0x372
	  uint16_t displayX = (kirby->xPos) % SCREEN_WIDTH;
 8000634:	f44f 76a0 	mov.w	r6, #320	; 0x140
	  uint16_t color = platformImg[882 * (displayY) + (kirby->xPos)];
 8000638:	4f0a      	ldr	r7, [pc, #40]	; (8000664 <Kirby_redrawColumnLeft+0x3c>)
	  uint16_t displayX = (kirby->xPos) % SCREEN_WIDTH;
 800063a:	882b      	ldrh	r3, [r5, #0]
	  uint16_t displayY = kirby->yPos + y;
 800063c:	8869      	ldrh	r1, [r5, #2]
	  uint16_t displayX = (kirby->xPos) % SCREEN_WIDTH;
 800063e:	fbb3 f0f6 	udiv	r0, r3, r6
	  uint16_t displayY = kirby->yPos + y;
 8000642:	4421      	add	r1, r4
 8000644:	b289      	uxth	r1, r1
	  uint16_t color = platformImg[882 * (displayY) + (kirby->xPos)];
 8000646:	fb08 3201 	mla	r2, r8, r1, r3
	  uint16_t displayX = (kirby->xPos) % SCREEN_WIDTH;
 800064a:	fb06 3010 	mls	r0, r6, r0, r3
	  LCD_DrawDot(displayX, displayY, color);
 800064e:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8000652:	b280      	uxth	r0, r0
	for (int y = 0; y < KIRBY_HEIGHT; y++) {
 8000654:	3401      	adds	r4, #1
	  LCD_DrawDot(displayX, displayY, color);
 8000656:	f000 fd9b 	bl	8001190 <LCD_DrawDot>
	for (int y = 0; y < KIRBY_HEIGHT; y++) {
 800065a:	2c20      	cmp	r4, #32
 800065c:	d1ed      	bne.n	800063a <Kirby_redrawColumnLeft+0x12>
	}
}
 800065e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000662:	bf00      	nop
 8000664:	08003574 	.word	0x08003574

08000668 <Kirby_redrawColumnRight>:

void Kirby_redrawColumnRight(struct Kirby* kirby) {
 8000668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800066c:	4605      	mov	r5, r0
	// Redraw the last column
	for (int y = 0; y < KIRBY_HEIGHT; y++) {
 800066e:	2400      	movs	r4, #0
		uint16_t displayX = (kirby->xPos + KIRBY_WIDTH) % SCREEN_WIDTH;
		uint16_t displayY = kirby->yPos + y;
		uint16_t color = platformImg[882 * (displayY) + kirby->xPos + KIRBY_WIDTH];
 8000670:	f240 3872 	movw	r8, #882	; 0x372
		uint16_t displayX = (kirby->xPos + KIRBY_WIDTH) % SCREEN_WIDTH;
 8000674:	f44f 76a0 	mov.w	r6, #320	; 0x140
		uint16_t color = platformImg[882 * (displayY) + kirby->xPos + KIRBY_WIDTH];
 8000678:	4f0b      	ldr	r7, [pc, #44]	; (80006a8 <Kirby_redrawColumnRight+0x40>)
		uint16_t displayY = kirby->yPos + y;
 800067a:	8869      	ldrh	r1, [r5, #2]
		uint16_t displayX = (kirby->xPos + KIRBY_WIDTH) % SCREEN_WIDTH;
 800067c:	882b      	ldrh	r3, [r5, #0]
		uint16_t displayY = kirby->yPos + y;
 800067e:	4421      	add	r1, r4
 8000680:	b289      	uxth	r1, r1
		uint16_t color = platformImg[882 * (displayY) + kirby->xPos + KIRBY_WIDTH];
 8000682:	fb08 3201 	mla	r2, r8, r1, r3
		uint16_t displayX = (kirby->xPos + KIRBY_WIDTH) % SCREEN_WIDTH;
 8000686:	3323      	adds	r3, #35	; 0x23
 8000688:	fbb3 f0f6 	udiv	r0, r3, r6
 800068c:	fb06 3010 	mls	r0, r6, r0, r3
		uint16_t color = platformImg[882 * (displayY) + kirby->xPos + KIRBY_WIDTH];
 8000690:	3223      	adds	r2, #35	; 0x23
		LCD_DrawDot(displayX, displayY, color);
 8000692:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8000696:	b280      	uxth	r0, r0
	for (int y = 0; y < KIRBY_HEIGHT; y++) {
 8000698:	3401      	adds	r4, #1
		LCD_DrawDot(displayX, displayY, color);
 800069a:	f000 fd79 	bl	8001190 <LCD_DrawDot>
	for (int y = 0; y < KIRBY_HEIGHT; y++) {
 800069e:	2c20      	cmp	r4, #32
 80006a0:	d1eb      	bne.n	800067a <Kirby_redrawColumnRight+0x12>
	}
}
 80006a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80006a6:	bf00      	nop
 80006a8:	08003574 	.word	0x08003574

080006ac <Kirby_redrawRowUp>:

void Kirby_redrawRowUp(struct Kirby* kirby) {
 80006ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006b0:	4605      	mov	r5, r0
	for (int x = 0; x < KIRBY_WIDTH; x++) {
 80006b2:	2400      	movs	r4, #0
		uint16_t displayX = (kirby->xPos + x) % SCREEN_WIDTH;
		uint16_t displayY = kirby->yPos;
		uint16_t color = platformImg[882 * displayY + kirby->xPos + x];
 80006b4:	f240 3872 	movw	r8, #882	; 0x372
		uint16_t displayX = (kirby->xPos + x) % SCREEN_WIDTH;
 80006b8:	f44f 76a0 	mov.w	r6, #320	; 0x140
		uint16_t color = platformImg[882 * displayY + kirby->xPos + x];
 80006bc:	4f0a      	ldr	r7, [pc, #40]	; (80006e8 <Kirby_redrawRowUp+0x3c>)
		uint16_t displayX = (kirby->xPos + x) % SCREEN_WIDTH;
 80006be:	882b      	ldrh	r3, [r5, #0]
		uint16_t displayY = kirby->yPos;
 80006c0:	8869      	ldrh	r1, [r5, #2]
		uint16_t color = platformImg[882 * displayY + kirby->xPos + x];
 80006c2:	fb08 3201 	mla	r2, r8, r1, r3
		uint16_t displayX = (kirby->xPos + x) % SCREEN_WIDTH;
 80006c6:	4423      	add	r3, r4
 80006c8:	fbb3 f0f6 	udiv	r0, r3, r6
 80006cc:	fb06 3010 	mls	r0, r6, r0, r3
		uint16_t color = platformImg[882 * displayY + kirby->xPos + x];
 80006d0:	4422      	add	r2, r4
		LCD_DrawDot(displayX, displayY, color);
 80006d2:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80006d6:	b280      	uxth	r0, r0
	for (int x = 0; x < KIRBY_WIDTH; x++) {
 80006d8:	3401      	adds	r4, #1
		LCD_DrawDot(displayX, displayY, color);
 80006da:	f000 fd59 	bl	8001190 <LCD_DrawDot>
	for (int x = 0; x < KIRBY_WIDTH; x++) {
 80006de:	2c23      	cmp	r4, #35	; 0x23
 80006e0:	d1ed      	bne.n	80006be <Kirby_redrawRowUp+0x12>
	}
}
 80006e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80006e6:	bf00      	nop
 80006e8:	08003574 	.word	0x08003574

080006ec <Kirby_redrawRowDown>:

void Kirby_redrawRowDown(struct Kirby* kirby) {
 80006ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006f0:	4605      	mov	r5, r0
	for (int x = 0; x < KIRBY_WIDTH; x++) {
 80006f2:	2400      	movs	r4, #0
		uint16_t displayX = (kirby->xPos + x) % SCREEN_WIDTH;
		uint16_t displayY = kirby->yPos + KIRBY_HEIGHT - 1;
		uint16_t color = platformImg[882 * displayY + kirby->xPos + x];
 80006f4:	f240 3872 	movw	r8, #882	; 0x372
		uint16_t displayX = (kirby->xPos + x) % SCREEN_WIDTH;
 80006f8:	f44f 76a0 	mov.w	r6, #320	; 0x140
		uint16_t color = platformImg[882 * displayY + kirby->xPos + x];
 80006fc:	4f0b      	ldr	r7, [pc, #44]	; (800072c <Kirby_redrawRowDown+0x40>)
		uint16_t displayY = kirby->yPos + KIRBY_HEIGHT - 1;
 80006fe:	8869      	ldrh	r1, [r5, #2]
		uint16_t displayX = (kirby->xPos + x) % SCREEN_WIDTH;
 8000700:	882b      	ldrh	r3, [r5, #0]
		uint16_t displayY = kirby->yPos + KIRBY_HEIGHT - 1;
 8000702:	311f      	adds	r1, #31
 8000704:	b289      	uxth	r1, r1
		uint16_t color = platformImg[882 * displayY + kirby->xPos + x];
 8000706:	fb08 3201 	mla	r2, r8, r1, r3
		uint16_t displayX = (kirby->xPos + x) % SCREEN_WIDTH;
 800070a:	4423      	add	r3, r4
 800070c:	fbb3 f0f6 	udiv	r0, r3, r6
 8000710:	fb06 3010 	mls	r0, r6, r0, r3
		uint16_t color = platformImg[882 * displayY + kirby->xPos + x];
 8000714:	4422      	add	r2, r4
		LCD_DrawDot(displayX, displayY, color);
 8000716:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 800071a:	b280      	uxth	r0, r0
	for (int x = 0; x < KIRBY_WIDTH; x++) {
 800071c:	3401      	adds	r4, #1
		LCD_DrawDot(displayX, displayY, color);
 800071e:	f000 fd37 	bl	8001190 <LCD_DrawDot>
	for (int x = 0; x < KIRBY_WIDTH; x++) {
 8000722:	2c23      	cmp	r4, #35	; 0x23
 8000724:	d1eb      	bne.n	80006fe <Kirby_redrawRowDown+0x12>
	}
}
 8000726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800072a:	bf00      	nop
 800072c:	08003574 	.word	0x08003574

08000730 <Kirby_eraseSprite>:

void Kirby_eraseSprite(struct Kirby* kirby) {
 8000730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000734:	4606      	mov	r6, r0
	for (int y = 0; y < KIRBY_HEIGHT; y++) {
 8000736:	2500      	movs	r5, #0
		for (int x = 0; x < KIRBY_WIDTH; x++) {
			uint16_t displayX = (kirby->xPos + x) % SCREEN_WIDTH;
			uint16_t displayY = kirby->yPos + y;
			uint16_t color = platformImg[882 * displayY + kirby->xPos + x];
 8000738:	f240 3972 	movw	r9, #882	; 0x372
			uint16_t displayX = (kirby->xPos + x) % SCREEN_WIDTH;
 800073c:	f44f 77a0 	mov.w	r7, #320	; 0x140
			uint16_t color = platformImg[882 * displayY + kirby->xPos + x];
 8000740:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8000778 <Kirby_eraseSprite+0x48>
		for (int x = 0; x < KIRBY_WIDTH; x++) {
 8000744:	2400      	movs	r4, #0
			uint16_t displayY = kirby->yPos + y;
 8000746:	8871      	ldrh	r1, [r6, #2]
			uint16_t displayX = (kirby->xPos + x) % SCREEN_WIDTH;
 8000748:	8833      	ldrh	r3, [r6, #0]
			uint16_t displayY = kirby->yPos + y;
 800074a:	4429      	add	r1, r5
 800074c:	b289      	uxth	r1, r1
			uint16_t color = platformImg[882 * displayY + kirby->xPos + x];
 800074e:	fb09 3201 	mla	r2, r9, r1, r3
			uint16_t displayX = (kirby->xPos + x) % SCREEN_WIDTH;
 8000752:	4423      	add	r3, r4
 8000754:	fbb3 f0f7 	udiv	r0, r3, r7
 8000758:	fb07 3010 	mls	r0, r7, r0, r3
			uint16_t color = platformImg[882 * displayY + kirby->xPos + x];
 800075c:	4422      	add	r2, r4
			LCD_DrawDot(displayX, displayY, color);
 800075e:	f838 2012 	ldrh.w	r2, [r8, r2, lsl #1]
 8000762:	b280      	uxth	r0, r0
		for (int x = 0; x < KIRBY_WIDTH; x++) {
 8000764:	3401      	adds	r4, #1
			LCD_DrawDot(displayX, displayY, color);
 8000766:	f000 fd13 	bl	8001190 <LCD_DrawDot>
		for (int x = 0; x < KIRBY_WIDTH; x++) {
 800076a:	2c23      	cmp	r4, #35	; 0x23
 800076c:	d1eb      	bne.n	8000746 <Kirby_eraseSprite+0x16>
	for (int y = 0; y < KIRBY_HEIGHT; y++) {
 800076e:	3501      	adds	r5, #1
 8000770:	2d20      	cmp	r5, #32
 8000772:	d1e7      	bne.n	8000744 <Kirby_eraseSprite+0x14>
		}
	}
}
 8000774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000778:	08003574 	.word	0x08003574

0800077c <Kirby_displayKirbyFacingRight>:
//			LCD_DrawDot(displayXPos, displayYPos, color);
//		}
//	}
//}

void Kirby_displayKirbyFacingRight(uint8_t spriteWidth, uint8_t spriteHeight, uint8_t spriteOffset, uint16_t* frame, uint16_t xPos, uint16_t yPos) {
 800077c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000780:	f101 3bff 	add.w	fp, r1, #4294967295
 8000784:	fb0b f500 	mul.w	r5, fp, r0
 8000788:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800078c:	f06f 0301 	mvn.w	r3, #1
 8000790:	4604      	mov	r4, r0
	for (int x = 0; x < spriteWidth; x++) {
 8000792:	f04f 0800 	mov.w	r8, #0
void Kirby_displayKirbyFacingRight(uint8_t spriteWidth, uint8_t spriteHeight, uint8_t spriteOffset, uint16_t* frame, uint16_t xPos, uint16_t yPos) {
 8000796:	b085      	sub	sp, #20
 8000798:	4343      	muls	r3, r0
 800079a:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 800079e:	9201      	str	r2, [sp, #4]
 80007a0:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80007a4:	3620      	adds	r6, #32
 80007a6:	9202      	str	r2, [sp, #8]
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	1a76      	subs	r6, r6, r1
	for (int x = 0; x < spriteWidth; x++) {
 80007ac:	45a0      	cmp	r8, r4
 80007ae:	db02      	blt.n	80007b6 <Kirby_displayKirbyFacingRight+0x3a>
			  color = newColor;
		  }
		  LCD_DrawDot(displayXPos, displayYPos, color);
	  }
	}
}
 80007b0:	b005      	add	sp, #20
 80007b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  uint16_t displayXPos = (xPos + spriteOffset + x) % SCREEN_WIDTH;
 80007b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80007ba:	189f      	adds	r7, r3, r2
 80007bc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80007c0:	4447      	add	r7, r8
 80007c2:	fbb7 f0f3 	udiv	r0, r7, r3
	  for (int y = spriteHeight - 1; y >= 0; y--) {
 80007c6:	46aa      	mov	sl, r5
 80007c8:	46d9      	mov	r9, fp
	  uint16_t displayXPos = (xPos + spriteOffset + x) % SCREEN_WIDTH;
 80007ca:	fb03 7010 	mls	r0, r3, r0, r7
			  uint16_t newColor = platformImg[882 * (displayYPos) + (xPos + spriteOffset + x)];
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <Kirby_displayKirbyFacingRight+0x98>)
	  uint16_t displayXPos = (xPos + spriteOffset + x) % SCREEN_WIDTH;
 80007d0:	b280      	uxth	r0, r0
	  for (int y = spriteHeight - 1; y >= 0; y--) {
 80007d2:	f1b9 3fff 	cmp.w	r9, #4294967295
 80007d6:	d103      	bne.n	80007e0 <Kirby_displayKirbyFacingRight+0x64>
	for (int x = 0; x < spriteWidth; x++) {
 80007d8:	f108 0801 	add.w	r8, r8, #1
 80007dc:	3502      	adds	r5, #2
 80007de:	e7e5      	b.n	80007ac <Kirby_displayKirbyFacingRight+0x30>
		  if (color == 0x4B4E) {
 80007e0:	f644 3c4e 	movw	ip, #19278	; 0x4b4e
		  uint16_t color = frame[y * spriteWidth + x];
 80007e4:	f8ba 2000 	ldrh.w	r2, [sl]
 80007e8:	eb06 0109 	add.w	r1, r6, r9
		  if (color == 0x4B4E) {
 80007ec:	4562      	cmp	r2, ip
			  uint16_t newColor = platformImg[882 * (displayYPos) + (xPos + spriteOffset + x)];
 80007ee:	bf08      	it	eq
 80007f0:	f240 3272 	movweq	r2, #882	; 0x372
 80007f4:	b289      	uxth	r1, r1
 80007f6:	bf04      	itt	eq
 80007f8:	fb02 7201 	mlaeq	r2, r2, r1, r7
 80007fc:	f833 2012 	ldrheq.w	r2, [r3, r2, lsl #1]
		  LCD_DrawDot(displayXPos, displayYPos, color);
 8000800:	9003      	str	r0, [sp, #12]
 8000802:	f000 fcc5 	bl	8001190 <LCD_DrawDot>
	  for (int y = spriteHeight - 1; y >= 0; y--) {
 8000806:	9b00      	ldr	r3, [sp, #0]
 8000808:	9803      	ldr	r0, [sp, #12]
 800080a:	449a      	add	sl, r3
 800080c:	f109 39ff 	add.w	r9, r9, #4294967295
 8000810:	4b00      	ldr	r3, [pc, #0]	; (8000814 <Kirby_displayKirbyFacingRight+0x98>)
 8000812:	e7de      	b.n	80007d2 <Kirby_displayKirbyFacingRight+0x56>
 8000814:	08003574 	.word	0x08003574

08000818 <Kirby_displayKirbyFacingLeft>:

void Kirby_displayKirbyFacingLeft(uint8_t spriteWidth, uint8_t spriteHeight, uint8_t spriteOffset, uint16_t* frame, uint16_t xPos, uint16_t yPos) {
 8000818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800081c:	f101 3bff 	add.w	fp, r1, #4294967295
 8000820:	fb0b f600 	mul.w	r6, fp, r0
 8000824:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 8000828:	f06f 0301 	mvn.w	r3, #1
 800082c:	4605      	mov	r5, r0
	for (int x = 0; x < spriteWidth; x++) {
 800082e:	f04f 0800 	mov.w	r8, #0
void Kirby_displayKirbyFacingLeft(uint8_t spriteWidth, uint8_t spriteHeight, uint8_t spriteOffset, uint16_t* frame, uint16_t xPos, uint16_t yPos) {
 8000832:	b085      	sub	sp, #20
 8000834:	4343      	muls	r3, r0
 8000836:	f8bd 703c 	ldrh.w	r7, [sp, #60]	; 0x3c
 800083a:	9201      	str	r2, [sp, #4]
 800083c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8000840:	3720      	adds	r7, #32
 8000842:	9202      	str	r2, [sp, #8]
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	1a7f      	subs	r7, r7, r1
	for (int x = 0; x < spriteWidth; x++) {
 8000848:	45a8      	cmp	r8, r5
 800084a:	db02      	blt.n	8000852 <Kirby_displayKirbyFacingLeft+0x3a>
			  color = newColor;
		  }
		  LCD_DrawDot(displayXPos, displayYPos, color);
	  }
	}
}
 800084c:	b005      	add	sp, #20
 800084e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  uint16_t displayXPos = (xPos + spriteOffset + spriteWidth - x) % SCREEN_WIDTH;
 8000852:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8000856:	189c      	adds	r4, r3, r2
 8000858:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800085c:	442c      	add	r4, r5
 800085e:	eba4 0408 	sub.w	r4, r4, r8
 8000862:	fb94 f0f3 	sdiv	r0, r4, r3
	  for (int y = spriteHeight - 1; y >= 0; y--) {
 8000866:	46b2      	mov	sl, r6
 8000868:	46d9      	mov	r9, fp
	  uint16_t displayXPos = (xPos + spriteOffset + spriteWidth - x) % SCREEN_WIDTH;
 800086a:	fb03 4010 	mls	r0, r3, r0, r4
			  uint16_t newColor = platformImg[882 * (displayYPos) + (xPos + spriteOffset + spriteWidth - x)];
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <Kirby_displayKirbyFacingLeft+0x9c>)
	  uint16_t displayXPos = (xPos + spriteOffset + spriteWidth - x) % SCREEN_WIDTH;
 8000870:	b280      	uxth	r0, r0
	  for (int y = spriteHeight - 1; y >= 0; y--) {
 8000872:	f1b9 3fff 	cmp.w	r9, #4294967295
 8000876:	d103      	bne.n	8000880 <Kirby_displayKirbyFacingLeft+0x68>
	for (int x = 0; x < spriteWidth; x++) {
 8000878:	f108 0801 	add.w	r8, r8, #1
 800087c:	3602      	adds	r6, #2
 800087e:	e7e3      	b.n	8000848 <Kirby_displayKirbyFacingLeft+0x30>
		  if (color == 0x4B4E) {
 8000880:	f644 3c4e 	movw	ip, #19278	; 0x4b4e
		  uint16_t color = frame[y * spriteWidth + x];
 8000884:	f8ba 2000 	ldrh.w	r2, [sl]
 8000888:	eb07 0109 	add.w	r1, r7, r9
		  if (color == 0x4B4E) {
 800088c:	4562      	cmp	r2, ip
			  uint16_t newColor = platformImg[882 * (displayYPos) + (xPos + spriteOffset + spriteWidth - x)];
 800088e:	bf08      	it	eq
 8000890:	f240 3272 	movweq	r2, #882	; 0x372
 8000894:	b289      	uxth	r1, r1
 8000896:	bf04      	itt	eq
 8000898:	fb02 4201 	mlaeq	r2, r2, r1, r4
 800089c:	f833 2012 	ldrheq.w	r2, [r3, r2, lsl #1]
		  LCD_DrawDot(displayXPos, displayYPos, color);
 80008a0:	9003      	str	r0, [sp, #12]
 80008a2:	f000 fc75 	bl	8001190 <LCD_DrawDot>
	  for (int y = spriteHeight - 1; y >= 0; y--) {
 80008a6:	9b00      	ldr	r3, [sp, #0]
 80008a8:	9803      	ldr	r0, [sp, #12]
 80008aa:	449a      	add	sl, r3
 80008ac:	f109 39ff 	add.w	r9, r9, #4294967295
 80008b0:	4b00      	ldr	r3, [pc, #0]	; (80008b4 <Kirby_displayKirbyFacingLeft+0x9c>)
 80008b2:	e7de      	b.n	8000872 <Kirby_displayKirbyFacingLeft+0x5a>
 80008b4:	08003574 	.word	0x08003574

080008b8 <Kirby_isOnGround>:

void Kirby_getPointBelow(const struct Kirby* kirby, uint16_t* pointXPos, uint16_t* pointYPos) {
	uint16_t xPos = kirby->xPos;
	uint16_t yPos = kirby->yPos;
	*pointXPos = xPos + 17;
	*pointYPos = yPos + KIRBY_HEIGHT;
 80008b8:	8841      	ldrh	r1, [r0, #2]
int Kirby_isOnGround(const struct Kirby* kirby) {
 80008ba:	b510      	push	{r4, lr}
 80008bc:	4604      	mov	r4, r0
	*pointXPos = xPos + 17;
 80008be:	8800      	ldrh	r0, [r0, #0]
	*pointYPos = yPos + KIRBY_HEIGHT;
 80008c0:	3120      	adds	r1, #32
	*pointXPos = xPos + 17;
 80008c2:	3011      	adds	r0, #17
	if (Tiles_getTileType(pointX, pointY) == GROUND || kirby->xPos + 17 > 456 && kirby->xPos + 17 < 528) {
 80008c4:	b289      	uxth	r1, r1
 80008c6:	b280      	uxth	r0, r0
 80008c8:	f000 fe9e 	bl	8001608 <Tiles_getTileType>
 80008cc:	2801      	cmp	r0, #1
 80008ce:	d007      	beq.n	80008e0 <Kirby_isOnGround+0x28>
 80008d0:	8820      	ldrh	r0, [r4, #0]
 80008d2:	f5a0 70dc 	sub.w	r0, r0, #440	; 0x1b8
 80008d6:	b280      	uxth	r0, r0
 80008d8:	2846      	cmp	r0, #70	; 0x46
 80008da:	bf8c      	ite	hi
 80008dc:	2000      	movhi	r0, #0
 80008de:	2001      	movls	r0, #1
}
 80008e0:	bd10      	pop	{r4, pc}

080008e2 <Kirby_isFalling>:
int Kirby_isFalling(const struct Kirby* kirby) {
 80008e2:	b510      	push	{r4, lr}
 80008e4:	4604      	mov	r4, r0
	if (Kirby_isOnGround(kirby)) {
 80008e6:	f7ff ffe7 	bl	80008b8 <Kirby_isOnGround>
 80008ea:	b920      	cbnz	r0, 80008f6 <Kirby_isFalling+0x14>
		if (kirby->enableUp) {
 80008ec:	79a0      	ldrb	r0, [r4, #6]
 80008ee:	fab0 f080 	clz	r0, r0
 80008f2:	0940      	lsrs	r0, r0, #5
}
 80008f4:	bd10      	pop	{r4, pc}
		return 0;
 80008f6:	2000      	movs	r0, #0
 80008f8:	e7fc      	b.n	80008f4 <Kirby_isFalling+0x12>
	...

080008fc <Kirby_moveX>:
	return;
}

static uint8_t moveYLock = 1;

void Kirby_moveX(struct Kirby* kirby, enum Direction direction) {
 80008fc:	b538      	push	{r3, r4, r5, lr}
	/* Sets enableX */
	if (kirby->state == SPITTING || kirby->state == SWALLOWING) {
 80008fe:	7a43      	ldrb	r3, [r0, #9]
void Kirby_moveX(struct Kirby* kirby, enum Direction direction) {
 8000900:	4604      	mov	r4, r0
	if (kirby->state == SPITTING || kirby->state == SWALLOWING) {
 8000902:	2b01      	cmp	r3, #1
 8000904:	bf8c      	ite	hi
 8000906:	2301      	movhi	r3, #1
 8000908:	2300      	movls	r3, #0
void Kirby_moveX(struct Kirby* kirby, enum Direction direction) {
 800090a:	460d      	mov	r5, r1
	if (kirby->state == SPITTING || kirby->state == SWALLOWING) {
 800090c:	71c3      	strb	r3, [r0, #7]
		kirby->enableX = 0;
	} else {
		kirby->enableX = 1;
	}

	if (kirby->enableX) {
 800090e:	d932      	bls.n	8000976 <Kirby_moveX+0x7a>
		kirby->direction = direction;
		if (direction == LEFT) {
 8000910:	2901      	cmp	r1, #1
		kirby->direction = direction;
 8000912:	7201      	strb	r1, [r0, #8]
		if (direction == LEFT) {
 8000914:	d132      	bne.n	800097c <Kirby_moveX+0x80>
	*pointYPos = yPos + KIRBY_HEIGHT - 1;
 8000916:	8841      	ldrh	r1, [r0, #2]
	*pointXPos = xPos + 5;
 8000918:	8800      	ldrh	r0, [r0, #0]
	*pointYPos = yPos + KIRBY_HEIGHT - 1;
 800091a:	311f      	adds	r1, #31
	*pointXPos = xPos + 5;
 800091c:	3005      	adds	r0, #5
			// Checks if the left pixel is a ground tile
			uint16_t leftX = 0;
			uint16_t leftY = 0;
			Kirby_getPointLeft(kirby, &leftX, &leftY);
			if (Tiles_getTileType(leftX, leftY) == GROUND) {
 800091e:	b289      	uxth	r1, r1
 8000920:	b280      	uxth	r0, r0
 8000922:	f000 fe71 	bl	8001608 <Tiles_getTileType>
 8000926:	2801      	cmp	r0, #1
 8000928:	d025      	beq.n	8000976 <Kirby_moveX+0x7a>
				return;
			}

			// Checks the slope
			if (kirby->xPos + 17 > 456 && kirby->xPos + 17 < 528) {
 800092a:	8823      	ldrh	r3, [r4, #0]
 800092c:	f5a3 72dc 	sub.w	r2, r3, #440	; 0x1b8
 8000930:	2a46      	cmp	r2, #70	; 0x46
 8000932:	4a2e      	ldr	r2, [pc, #184]	; (80009ec <Kirby_moveX+0xf0>)
 8000934:	d820      	bhi.n	8000978 <Kirby_moveX+0x7c>
				moveYLock = 0;
 8000936:	2100      	movs	r1, #0
 8000938:	7011      	strb	r1, [r2, #0]
 800093a:	4a2d      	ldr	r2, [pc, #180]	; (80009f0 <Kirby_moveX+0xf4>)
				if ((kirby->xPos + 17 - 455) % 3 == 0) {
 800093c:	f5a3 73db 	sub.w	r3, r3, #438	; 0x1b6
				moveYLock = 0;
 8000940:	4353      	muls	r3, r2
				if ((kirby->xPos + 17 - 455) % 3 == 0) {
 8000942:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 8000946:	d805      	bhi.n	8000954 <Kirby_moveX+0x58>
					// Moves up
					Kirby_redrawRowDown(kirby);
 8000948:	4620      	mov	r0, r4
 800094a:	f7ff fecf 	bl	80006ec <Kirby_redrawRowDown>
					kirby->yPos--;
 800094e:	8863      	ldrh	r3, [r4, #2]
 8000950:	3b01      	subs	r3, #1
 8000952:	8063      	strh	r3, [r4, #2]
				}
			} else {
				moveYLock = 1;
			}

			Kirby_redrawColumnRight(kirby);
 8000954:	4620      	mov	r0, r4
 8000956:	f7ff fe87 	bl	8000668 <Kirby_redrawColumnRight>
			if (kirby->xPos > 0) {
 800095a:	8820      	ldrh	r0, [r4, #0]
 800095c:	b158      	cbz	r0, 8000976 <Kirby_moveX+0x7a>
				if (kirby->xPos > 160 && kirby->xPos < 696) {
 800095e:	f240 2216 	movw	r2, #534	; 0x216
 8000962:	f1a0 03a1 	sub.w	r3, r0, #161	; 0xa1
 8000966:	b29b      	uxth	r3, r3
 8000968:	4293      	cmp	r3, r2
 800096a:	d801      	bhi.n	8000970 <Kirby_moveX+0x74>
				  Kirby_movePlatform(kirby->xPos);
 800096c:	f7ff fdee 	bl	800054c <Kirby_movePlatform>
				}
				kirby->xPos--;
 8000970:	8823      	ldrh	r3, [r4, #0]
 8000972:	3b01      	subs	r3, #1
			Kirby_redrawColumnLeft(kirby);
			if (kirby->xPos < 829) {
			  if (kirby->xPos > 160 && kirby->xPos < 696) {
				  Kirby_movePlatform(kirby->xPos);
			  }
			  kirby->xPos++;
 8000974:	8023      	strh	r3, [r4, #0]
			}
		}
	}
}
 8000976:	bd38      	pop	{r3, r4, r5, pc}
				moveYLock = 1;
 8000978:	7015      	strb	r5, [r2, #0]
 800097a:	e7eb      	b.n	8000954 <Kirby_moveX+0x58>
		} else if (direction == RIGHT) {
 800097c:	2900      	cmp	r1, #0
 800097e:	d1fa      	bne.n	8000976 <Kirby_moveX+0x7a>
	*pointYPos = yPos + KIRBY_HEIGHT - 1;
 8000980:	8841      	ldrh	r1, [r0, #2]
	*pointXPos = xPos + KIRBY_WIDTH - 5;
 8000982:	8800      	ldrh	r0, [r0, #0]
	*pointYPos = yPos + KIRBY_HEIGHT - 1;
 8000984:	311f      	adds	r1, #31
	*pointXPos = xPos + KIRBY_WIDTH - 5;
 8000986:	301e      	adds	r0, #30
			if (Tiles_getTileType(rightX, rightY) == GROUND) {
 8000988:	b289      	uxth	r1, r1
 800098a:	b280      	uxth	r0, r0
 800098c:	f000 fe3c 	bl	8001608 <Tiles_getTileType>
 8000990:	2801      	cmp	r0, #1
 8000992:	d0f0      	beq.n	8000976 <Kirby_moveX+0x7a>
			if (kirby->xPos + 17 > 456 && kirby->xPos + 17 < 528) {
 8000994:	8823      	ldrh	r3, [r4, #0]
 8000996:	f5a3 72dc 	sub.w	r2, r3, #440	; 0x1b8
 800099a:	2a46      	cmp	r2, #70	; 0x46
 800099c:	4a13      	ldr	r2, [pc, #76]	; (80009ec <Kirby_moveX+0xf0>)
 800099e:	d821      	bhi.n	80009e4 <Kirby_moveX+0xe8>
				moveYLock = 0;
 80009a0:	7015      	strb	r5, [r2, #0]
				if ((kirby->xPos + 17 - 456) % 3 == 0) {
 80009a2:	f46f 72db 	mvn.w	r2, #438	; 0x1b6
 80009a6:	4413      	add	r3, r2
				moveYLock = 0;
 80009a8:	4a11      	ldr	r2, [pc, #68]	; (80009f0 <Kirby_moveX+0xf4>)
 80009aa:	4353      	muls	r3, r2
				if ((kirby->xPos + 17 - 456) % 3 == 0) {
 80009ac:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 80009b0:	d805      	bhi.n	80009be <Kirby_moveX+0xc2>
					Kirby_redrawRowUp(kirby);
 80009b2:	4620      	mov	r0, r4
 80009b4:	f7ff fe7a 	bl	80006ac <Kirby_redrawRowUp>
					kirby->yPos++;
 80009b8:	8863      	ldrh	r3, [r4, #2]
 80009ba:	3301      	adds	r3, #1
 80009bc:	8063      	strh	r3, [r4, #2]
			Kirby_redrawColumnLeft(kirby);
 80009be:	4620      	mov	r0, r4
 80009c0:	f7ff fe32 	bl	8000628 <Kirby_redrawColumnLeft>
			if (kirby->xPos < 829) {
 80009c4:	8820      	ldrh	r0, [r4, #0]
 80009c6:	f5b0 7f4f 	cmp.w	r0, #828	; 0x33c
 80009ca:	d8d4      	bhi.n	8000976 <Kirby_moveX+0x7a>
			  if (kirby->xPos > 160 && kirby->xPos < 696) {
 80009cc:	f240 2216 	movw	r2, #534	; 0x216
 80009d0:	f1a0 03a1 	sub.w	r3, r0, #161	; 0xa1
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d801      	bhi.n	80009de <Kirby_moveX+0xe2>
				  Kirby_movePlatform(kirby->xPos);
 80009da:	f7ff fdb7 	bl	800054c <Kirby_movePlatform>
			  kirby->xPos++;
 80009de:	8823      	ldrh	r3, [r4, #0]
 80009e0:	3301      	adds	r3, #1
 80009e2:	e7c7      	b.n	8000974 <Kirby_moveX+0x78>
				moveYLock = 1;
 80009e4:	2301      	movs	r3, #1
 80009e6:	7013      	strb	r3, [r2, #0]
 80009e8:	e7e9      	b.n	80009be <Kirby_moveX+0xc2>
 80009ea:	bf00      	nop
 80009ec:	2000b820 	.word	0x2000b820
 80009f0:	aaaaaaab 	.word	0xaaaaaaab

080009f4 <Kirby_moveY>:

void Kirby_moveY(struct Kirby* kirby) {
 80009f4:	b510      	push	{r4, lr}
	if (moveYLock) {
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <Kirby_moveY+0x3c>)
void Kirby_moveY(struct Kirby* kirby) {
 80009f8:	4604      	mov	r4, r0
	if (moveYLock) {
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	b163      	cbz	r3, 8000a18 <Kirby_moveY+0x24>
		if (Kirby_isFalling(kirby)) {
 80009fe:	f7ff ff70 	bl	80008e2 <Kirby_isFalling>
 8000a02:	b150      	cbz	r0, 8000a1a <Kirby_moveY+0x26>
			// Moves down
			Kirby_redrawRowUp(kirby);
 8000a04:	4620      	mov	r0, r4
 8000a06:	f7ff fe51 	bl	80006ac <Kirby_redrawRowUp>
			if (!Kirby_isOnGround(kirby)) {
 8000a0a:	4620      	mov	r0, r4
 8000a0c:	f7ff ff54 	bl	80008b8 <Kirby_isOnGround>
 8000a10:	b910      	cbnz	r0, 8000a18 <Kirby_moveY+0x24>
				kirby->yPos++;
 8000a12:	8863      	ldrh	r3, [r4, #2]
 8000a14:	3301      	adds	r3, #1
			}
		} else if (kirby->enableUp) {
			// Moves up
			Kirby_redrawRowDown(kirby);
			if (kirby->yPos > 0) {
				kirby->yPos--;
 8000a16:	8063      	strh	r3, [r4, #2]
			}
		}
	}
}
 8000a18:	bd10      	pop	{r4, pc}
		} else if (kirby->enableUp) {
 8000a1a:	79a3      	ldrb	r3, [r4, #6]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d0fb      	beq.n	8000a18 <Kirby_moveY+0x24>
			Kirby_redrawRowDown(kirby);
 8000a20:	4620      	mov	r0, r4
 8000a22:	f7ff fe63 	bl	80006ec <Kirby_redrawRowDown>
			if (kirby->yPos > 0) {
 8000a26:	8863      	ldrh	r3, [r4, #2]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d0f5      	beq.n	8000a18 <Kirby_moveY+0x24>
				kirby->yPos--;
 8000a2c:	3b01      	subs	r3, #1
 8000a2e:	e7f2      	b.n	8000a16 <Kirby_moveY+0x22>
 8000a30:	2000b820 	.word	0x2000b820

08000a34 <Kirby_renderSprite>:

void Kirby_renderSprite(struct Kirby* kirby) {
 8000a34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	enum Direction direction = kirby->direction;
	uint8_t* currentFrame = &kirby->currentFrame;
	uint16_t* remainingTicks = &kirby->remainingTicks;
	enum State currentState = kirby->state;
 8000a38:	7a45      	ldrb	r5, [r0, #9]
	uint8_t fallingTicks = 1;
	uint8_t spittingTicks = 1;
	uint8_t swallowedTicks = 2;
	uint8_t swallowingTicks = 1;

	if (previousState != currentState) {
 8000a3a:	7b83      	ldrb	r3, [r0, #14]
void Kirby_renderSprite(struct Kirby* kirby) {
 8000a3c:	4604      	mov	r4, r0
	if (previousState != currentState) {
 8000a3e:	42ab      	cmp	r3, r5
	enum Direction direction = kirby->direction;
 8000a40:	f890 8008 	ldrb.w	r8, [r0, #8]
	uint16_t xPos = kirby->xPos;
 8000a44:	8806      	ldrh	r6, [r0, #0]
	uint16_t yPos = kirby->yPos;
 8000a46:	8847      	ldrh	r7, [r0, #2]
	if (previousState != currentState) {
 8000a48:	d007      	beq.n	8000a5a <Kirby_renderSprite+0x26>
		*currentFrame = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	7283      	strb	r3, [r0, #10]
		Kirby_eraseSprite(kirby);
 8000a4e:	f7ff fe6f 	bl	8000730 <Kirby_eraseSprite>

		/* Initializes remaining ticks based on states */
		if (currentState == IDLE) {
 8000a52:	2d0a      	cmp	r5, #10
 8000a54:	d10e      	bne.n	8000a74 <Kirby_renderSprite+0x40>
			*remainingTicks = 250;
 8000a56:	23fa      	movs	r3, #250	; 0xfa
		} else if (currentState == FLOATING_UP) {
			*remainingTicks = floatingTicks;
		} else if (currentState == FLOATING_DOWN) {
			*remainingTicks = floatingTicks;
		} else if (currentState == JUMPING) {
			*remainingTicks = jumpingTicks;
 8000a58:	81a3      	strh	r3, [r4, #12]
			*remainingTicks = swallowedTicks;
		}
	}

	/* Renders sprite based on states */
	uint16_t* sprite = idleKeyframes[0];
 8000a5a:	4b85      	ldr	r3, [pc, #532]	; (8000c70 <Kirby_renderSprite+0x23c>)

	if (currentState == IDLE) {
 8000a5c:	2d0a      	cmp	r5, #10
	uint16_t* sprite = idleKeyframes[0];
 8000a5e:	681b      	ldr	r3, [r3, #0]
	if (currentState == IDLE) {
 8000a60:	d124      	bne.n	8000aac <Kirby_renderSprite+0x78>
//				*remainingTicks = 50;
//			}
//		}
		// Sets sprite and decrease remaining ticks
		sprite = idleKeyframes[0];
		spriteWidth = IDLE_WIDTH;
 8000a62:	4a84      	ldr	r2, [pc, #528]	; (8000c74 <Kirby_renderSprite+0x240>)
 8000a64:	7810      	ldrb	r0, [r2, #0]
		spriteHeight = IDLE_HEIGHT;
 8000a66:	4a84      	ldr	r2, [pc, #528]	; (8000c78 <Kirby_renderSprite+0x244>)
 8000a68:	7811      	ldrb	r1, [r2, #0]
		spriteOffset = IDLE_OFFSET;
 8000a6a:	4a84      	ldr	r2, [pc, #528]	; (8000c7c <Kirby_renderSprite+0x248>)
		// Sets sprite and decreases remaining ticks
		sprite = swallowingKeyframes[*currentFrame];
		*remainingTicks = *remainingTicks - 1;
		spriteWidth = SWALLOWING_WIDTH;
		spriteHeight = SWALLOWING_HEIGHT;
		spriteOffset = SWALLOWING_OFFSET;
 8000a6c:	7812      	ldrb	r2, [r2, #0]
 8000a6e:	e072      	b.n	8000b56 <Kirby_renderSprite+0x122>
			*remainingTicks = walkingTicks;
 8000a70:	2301      	movs	r3, #1
 8000a72:	e7f1      	b.n	8000a58 <Kirby_renderSprite+0x24>
		} else if (currentState == FLOATING_UP) {
 8000a74:	2d08      	cmp	r5, #8
 8000a76:	d804      	bhi.n	8000a82 <Kirby_renderSprite+0x4e>
 8000a78:	f44f 73a4 	mov.w	r3, #328	; 0x148
 8000a7c:	40eb      	lsrs	r3, r5
 8000a7e:	07db      	lsls	r3, r3, #31
 8000a80:	d4f6      	bmi.n	8000a70 <Kirby_renderSprite+0x3c>
		} else if (currentState == JUMPING) {
 8000a82:	2d02      	cmp	r5, #2
 8000a84:	d101      	bne.n	8000a8a <Kirby_renderSprite+0x56>
			*remainingTicks = jumpingTicks;
 8000a86:	230a      	movs	r3, #10
 8000a88:	e7e6      	b.n	8000a58 <Kirby_renderSprite+0x24>
		} else if (currentState == FALLING) {
 8000a8a:	2d05      	cmp	r5, #5
 8000a8c:	d0f0      	beq.n	8000a70 <Kirby_renderSprite+0x3c>
		} else if (currentState == SPITTING) {
 8000a8e:	2d00      	cmp	r5, #0
 8000a90:	d0ee      	beq.n	8000a70 <Kirby_renderSprite+0x3c>
		} else if (currentState == SWALLOWED_IDLE) {
 8000a92:	2d0b      	cmp	r5, #11
 8000a94:	d0df      	beq.n	8000a56 <Kirby_renderSprite+0x22>
		} else if (currentState == SWALLOWED_JUMP) {
 8000a96:	2d04      	cmp	r5, #4
 8000a98:	d0f5      	beq.n	8000a86 <Kirby_renderSprite+0x52>
		} else if (currentState == SWALLOWED_FALL) {
 8000a9a:	2d07      	cmp	r5, #7
 8000a9c:	d101      	bne.n	8000aa2 <Kirby_renderSprite+0x6e>
			*remainingTicks = swallowedTicks;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	e7da      	b.n	8000a58 <Kirby_renderSprite+0x24>
		} else if (currentState == SWALLOWING) {
 8000aa2:	2d01      	cmp	r5, #1
 8000aa4:	d0e4      	beq.n	8000a70 <Kirby_renderSprite+0x3c>
		} else if (currentState == SWALLOWED_WALK) {
 8000aa6:	2d09      	cmp	r5, #9
 8000aa8:	d1d7      	bne.n	8000a5a <Kirby_renderSprite+0x26>
 8000aaa:	e7f8      	b.n	8000a9e <Kirby_renderSprite+0x6a>
	} else if (currentState == WALKING) {
 8000aac:	2d08      	cmp	r5, #8
 8000aae:	d119      	bne.n	8000ae4 <Kirby_renderSprite+0xb0>
		if (*remainingTicks == 0) {
 8000ab0:	89a3      	ldrh	r3, [r4, #12]
 8000ab2:	b953      	cbnz	r3, 8000aca <Kirby_renderSprite+0x96>
			*currentFrame = (*currentFrame + 1) % 5;
 8000ab4:	2205      	movs	r2, #5
 8000ab6:	7aa3      	ldrb	r3, [r4, #10]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	fbb3 f2f2 	udiv	r2, r3, r2
 8000abe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000ac2:	1a9b      	subs	r3, r3, r2
 8000ac4:	72a3      	strb	r3, [r4, #10]
			*remainingTicks = walkingTicks;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	81a3      	strh	r3, [r4, #12]
		sprite = walkingKeyframes[*currentFrame];
 8000aca:	7aa2      	ldrb	r2, [r4, #10]
 8000acc:	4b6c      	ldr	r3, [pc, #432]	; (8000c80 <Kirby_renderSprite+0x24c>)
 8000ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
		*remainingTicks = *remainingTicks - 1;
 8000ad2:	89a2      	ldrh	r2, [r4, #12]
 8000ad4:	3a01      	subs	r2, #1
 8000ad6:	81a2      	strh	r2, [r4, #12]
		spriteWidth = WALKING_WIDTH;
 8000ad8:	4a6a      	ldr	r2, [pc, #424]	; (8000c84 <Kirby_renderSprite+0x250>)
 8000ada:	7810      	ldrb	r0, [r2, #0]
		spriteHeight = WALKING_HEIGHT;
 8000adc:	4a6a      	ldr	r2, [pc, #424]	; (8000c88 <Kirby_renderSprite+0x254>)
 8000ade:	7811      	ldrb	r1, [r2, #0]
		spriteOffset = WALKING_OFFSET;
 8000ae0:	4a6a      	ldr	r2, [pc, #424]	; (8000c8c <Kirby_renderSprite+0x258>)
 8000ae2:	e7c3      	b.n	8000a6c <Kirby_renderSprite+0x38>
	} else if (currentState == FLOATING_UP) {
 8000ae4:	2d03      	cmp	r5, #3
 8000ae6:	d118      	bne.n	8000b1a <Kirby_renderSprite+0xe6>
		if (*remainingTicks == 0) {
 8000ae8:	89a3      	ldrh	r3, [r4, #12]
 8000aea:	b94b      	cbnz	r3, 8000b00 <Kirby_renderSprite+0xcc>
			*currentFrame = (*currentFrame + 1) % 3;
 8000aec:	7aa3      	ldrb	r3, [r4, #10]
 8000aee:	3301      	adds	r3, #1
 8000af0:	fbb3 f5f5 	udiv	r5, r3, r5
 8000af4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000af8:	1b5b      	subs	r3, r3, r5
 8000afa:	72a3      	strb	r3, [r4, #10]
			*remainingTicks = floatingTicks;
 8000afc:	2301      	movs	r3, #1
 8000afe:	81a3      	strh	r3, [r4, #12]
		sprite = floatingUpKeyframes[*currentFrame];
 8000b00:	7aa2      	ldrb	r2, [r4, #10]
 8000b02:	4b63      	ldr	r3, [pc, #396]	; (8000c90 <Kirby_renderSprite+0x25c>)
 8000b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
		*remainingTicks = *remainingTicks - 1;
 8000b08:	89a2      	ldrh	r2, [r4, #12]
 8000b0a:	3a01      	subs	r2, #1
 8000b0c:	81a2      	strh	r2, [r4, #12]
		spriteWidth = FLOATING_UP_WIDTH;
 8000b0e:	4a61      	ldr	r2, [pc, #388]	; (8000c94 <Kirby_renderSprite+0x260>)
 8000b10:	7810      	ldrb	r0, [r2, #0]
		spriteHeight = FLOATING_UP_HEIGHT;
 8000b12:	4a61      	ldr	r2, [pc, #388]	; (8000c98 <Kirby_renderSprite+0x264>)
 8000b14:	7811      	ldrb	r1, [r2, #0]
		spriteOffset = FLOATING_UP_OFFSET;
 8000b16:	4a61      	ldr	r2, [pc, #388]	; (8000c9c <Kirby_renderSprite+0x268>)
 8000b18:	e7a8      	b.n	8000a6c <Kirby_renderSprite+0x38>
	} else if (currentState == FLOATING_DOWN) {
 8000b1a:	2d06      	cmp	r5, #6
 8000b1c:	d107      	bne.n	8000b2e <Kirby_renderSprite+0xfa>
		spriteWidth = FLOATING_DOWN_WIDTH;
 8000b1e:	4a60      	ldr	r2, [pc, #384]	; (8000ca0 <Kirby_renderSprite+0x26c>)
		sprite = floatingDownKeyframes[0];
 8000b20:	4b60      	ldr	r3, [pc, #384]	; (8000ca4 <Kirby_renderSprite+0x270>)
		spriteWidth = FLOATING_DOWN_WIDTH;
 8000b22:	7810      	ldrb	r0, [r2, #0]
		spriteHeight = FLOATING_DOWN_HEIGHT;
 8000b24:	4a60      	ldr	r2, [pc, #384]	; (8000ca8 <Kirby_renderSprite+0x274>)
		sprite = floatingDownKeyframes[0];
 8000b26:	681b      	ldr	r3, [r3, #0]
		spriteHeight = FLOATING_DOWN_HEIGHT;
 8000b28:	7811      	ldrb	r1, [r2, #0]
		spriteOffset = FLOATING_DOWN_OFFSET;
 8000b2a:	4a60      	ldr	r2, [pc, #384]	; (8000cac <Kirby_renderSprite+0x278>)
 8000b2c:	e79e      	b.n	8000a6c <Kirby_renderSprite+0x38>
	} else if (currentState == JUMPING) {
 8000b2e:	2d02      	cmp	r5, #2
 8000b30:	d11c      	bne.n	8000b6c <Kirby_renderSprite+0x138>
		if (*remainingTicks == 0) {
 8000b32:	89a5      	ldrh	r5, [r4, #12]
 8000b34:	b915      	cbnz	r5, 8000b3c <Kirby_renderSprite+0x108>
			*enableStateChange = 1;
 8000b36:	2301      	movs	r3, #1
			*enableUp = 0;
 8000b38:	71a5      	strb	r5, [r4, #6]
			*enableStateChange = 1;
 8000b3a:	73e3      	strb	r3, [r4, #15]
		sprite = jumpingKeyframes[*currentFrame];
 8000b3c:	7aa2      	ldrb	r2, [r4, #10]
 8000b3e:	4b5c      	ldr	r3, [pc, #368]	; (8000cb0 <Kirby_renderSprite+0x27c>)
 8000b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
		spriteWidth = JUMPING_WIDTH;
 8000b44:	4a5b      	ldr	r2, [pc, #364]	; (8000cb4 <Kirby_renderSprite+0x280>)
 8000b46:	7810      	ldrb	r0, [r2, #0]
		spriteHeight = JUMPING_HEIGHT;
 8000b48:	4a5b      	ldr	r2, [pc, #364]	; (8000cb8 <Kirby_renderSprite+0x284>)
 8000b4a:	7811      	ldrb	r1, [r2, #0]
		spriteOffset = JUMPING_OFFSET;
 8000b4c:	4a5b      	ldr	r2, [pc, #364]	; (8000cbc <Kirby_renderSprite+0x288>)
		spriteOffset = SWALLOWED_JUMP_OFFSET;
 8000b4e:	7812      	ldrb	r2, [r2, #0]
		if (*remainingTicks > 0) {
 8000b50:	b10d      	cbz	r5, 8000b56 <Kirby_renderSprite+0x122>
			*remainingTicks = *remainingTicks - 1;
 8000b52:	3d01      	subs	r5, #1
 8000b54:	81a5      	strh	r5, [r4, #12]
	}

	if (direction == LEFT) {
 8000b56:	f1b8 0f01 	cmp.w	r8, #1
		Kirby_displayKirbyFacingLeft(spriteWidth, spriteHeight, spriteOffset, sprite, xPos, yPos);
 8000b5a:	e9cd 6700 	strd	r6, r7, [sp]
	if (direction == LEFT) {
 8000b5e:	f040 80f9 	bne.w	8000d54 <Kirby_renderSprite+0x320>
		Kirby_displayKirbyFacingLeft(spriteWidth, spriteHeight, spriteOffset, sprite, xPos, yPos);
 8000b62:	f7ff fe59 	bl	8000818 <Kirby_displayKirbyFacingLeft>
	} else {
		Kirby_displayKirbyFacingRight(spriteWidth, spriteHeight, spriteOffset, sprite, xPos, yPos);
	}
}
 8000b66:	b002      	add	sp, #8
 8000b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (currentState == FALLING) {
 8000b6c:	2d05      	cmp	r5, #5
 8000b6e:	d115      	bne.n	8000b9c <Kirby_renderSprite+0x168>
		if (*remainingTicks == 0) {
 8000b70:	89a3      	ldrh	r3, [r4, #12]
 8000b72:	b933      	cbnz	r3, 8000b82 <Kirby_renderSprite+0x14e>
			*currentFrame = (*currentFrame + 1) % 5;
 8000b74:	7aa3      	ldrb	r3, [r4, #10]
			if (*currentFrame < 3) {
 8000b76:	2b02      	cmp	r3, #2
				*currentFrame = *currentFrame + 1;
 8000b78:	bf9c      	itt	ls
 8000b7a:	3301      	addls	r3, #1
 8000b7c:	72a3      	strbls	r3, [r4, #10]
			*remainingTicks = fallingTicks;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	81a3      	strh	r3, [r4, #12]
		sprite = fallingKeyframes[*currentFrame];
 8000b82:	7aa2      	ldrb	r2, [r4, #10]
 8000b84:	4b4e      	ldr	r3, [pc, #312]	; (8000cc0 <Kirby_renderSprite+0x28c>)
 8000b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
		*remainingTicks = *remainingTicks - 1;
 8000b8a:	89a2      	ldrh	r2, [r4, #12]
 8000b8c:	3a01      	subs	r2, #1
 8000b8e:	81a2      	strh	r2, [r4, #12]
		spriteWidth = FALLING_WIDTH;
 8000b90:	4a4c      	ldr	r2, [pc, #304]	; (8000cc4 <Kirby_renderSprite+0x290>)
 8000b92:	7810      	ldrb	r0, [r2, #0]
		spriteHeight = FALLING_HEIGHT;
 8000b94:	4a4c      	ldr	r2, [pc, #304]	; (8000cc8 <Kirby_renderSprite+0x294>)
 8000b96:	7811      	ldrb	r1, [r2, #0]
		spriteOffset = FALLING_OFFSET;
 8000b98:	4a4c      	ldr	r2, [pc, #304]	; (8000ccc <Kirby_renderSprite+0x298>)
 8000b9a:	e767      	b.n	8000a6c <Kirby_renderSprite+0x38>
	} else if (currentState == SPITTING) {
 8000b9c:	b9b5      	cbnz	r5, 8000bcc <Kirby_renderSprite+0x198>
		if (*remainingTicks == 0) {
 8000b9e:	89a3      	ldrh	r3, [r4, #12]
 8000ba0:	b93b      	cbnz	r3, 8000bb2 <Kirby_renderSprite+0x17e>
 8000ba2:	2201      	movs	r2, #1
			*currentFrame = (*currentFrame + 1) % 5;
 8000ba4:	7aa3      	ldrb	r3, [r4, #10]
			*remainingTicks = spittingTicks;
 8000ba6:	81a2      	strh	r2, [r4, #12]
			if (*currentFrame < 2) {
 8000ba8:	2b01      	cmp	r3, #1
				*currentFrame = *currentFrame + 1;
 8000baa:	bf9a      	itte	ls
 8000bac:	189b      	addls	r3, r3, r2
 8000bae:	72a3      	strbls	r3, [r4, #10]
				*enableStateChange = 1;
 8000bb0:	73e2      	strbhi	r2, [r4, #15]
		sprite = spittingKeyframes[*currentFrame];
 8000bb2:	7aa2      	ldrb	r2, [r4, #10]
 8000bb4:	4b46      	ldr	r3, [pc, #280]	; (8000cd0 <Kirby_renderSprite+0x29c>)
 8000bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
		*remainingTicks = *remainingTicks - 1;
 8000bba:	89a2      	ldrh	r2, [r4, #12]
 8000bbc:	3a01      	subs	r2, #1
 8000bbe:	81a2      	strh	r2, [r4, #12]
		spriteWidth = SPITTING_WIDTH;
 8000bc0:	4a44      	ldr	r2, [pc, #272]	; (8000cd4 <Kirby_renderSprite+0x2a0>)
 8000bc2:	7810      	ldrb	r0, [r2, #0]
		spriteHeight = SPITTING_HEIGHT;
 8000bc4:	4a44      	ldr	r2, [pc, #272]	; (8000cd8 <Kirby_renderSprite+0x2a4>)
 8000bc6:	7811      	ldrb	r1, [r2, #0]
		spriteOffset = SPITTING_OFFSET;
 8000bc8:	4a44      	ldr	r2, [pc, #272]	; (8000cdc <Kirby_renderSprite+0x2a8>)
 8000bca:	e74f      	b.n	8000a6c <Kirby_renderSprite+0x38>
	} else if (currentState == SWALLOWED_IDLE) {
 8000bcc:	2d0b      	cmp	r5, #11
 8000bce:	d10a      	bne.n	8000be6 <Kirby_renderSprite+0x1b2>
		*remainingTicks = *remainingTicks - 1;
 8000bd0:	89a2      	ldrh	r2, [r4, #12]
		sprite = swallowedIdleKeyframes[0];
 8000bd2:	4b43      	ldr	r3, [pc, #268]	; (8000ce0 <Kirby_renderSprite+0x2ac>)
		*remainingTicks = *remainingTicks - 1;
 8000bd4:	3a01      	subs	r2, #1
 8000bd6:	81a2      	strh	r2, [r4, #12]
		spriteWidth = SWALLOWED_IDLE_WIDTH;
 8000bd8:	4a42      	ldr	r2, [pc, #264]	; (8000ce4 <Kirby_renderSprite+0x2b0>)
		sprite = swallowedIdleKeyframes[0];
 8000bda:	681b      	ldr	r3, [r3, #0]
		spriteWidth = SWALLOWED_IDLE_WIDTH;
 8000bdc:	7810      	ldrb	r0, [r2, #0]
		spriteHeight = SWALLOWED_IDLE_HEIGHT;
 8000bde:	4a42      	ldr	r2, [pc, #264]	; (8000ce8 <Kirby_renderSprite+0x2b4>)
 8000be0:	7811      	ldrb	r1, [r2, #0]
		spriteOffset = SWALLOWED_IDLE_OFFSET;
 8000be2:	4a42      	ldr	r2, [pc, #264]	; (8000cec <Kirby_renderSprite+0x2b8>)
 8000be4:	e742      	b.n	8000a6c <Kirby_renderSprite+0x38>
	} else if (currentState == SWALLOWED_JUMP) {
 8000be6:	2d04      	cmp	r5, #4
 8000be8:	d10d      	bne.n	8000c06 <Kirby_renderSprite+0x1d2>
		if (*remainingTicks == 0) {
 8000bea:	89a5      	ldrh	r5, [r4, #12]
 8000bec:	b91d      	cbnz	r5, 8000bf6 <Kirby_renderSprite+0x1c2>
			*enableUp = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	71a3      	strb	r3, [r4, #6]
			*enableStateChange = 1;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	73e3      	strb	r3, [r4, #15]
		spriteWidth = SWALLOWED_JUMP_WIDTH;
 8000bf6:	4a3e      	ldr	r2, [pc, #248]	; (8000cf0 <Kirby_renderSprite+0x2bc>)
		sprite = swallowedJumpKeyframes[0];
 8000bf8:	4b3e      	ldr	r3, [pc, #248]	; (8000cf4 <Kirby_renderSprite+0x2c0>)
		spriteWidth = SWALLOWED_JUMP_WIDTH;
 8000bfa:	7810      	ldrb	r0, [r2, #0]
		spriteHeight = SWALLOWED_JUMP_HEIGHT;
 8000bfc:	4a3e      	ldr	r2, [pc, #248]	; (8000cf8 <Kirby_renderSprite+0x2c4>)
		sprite = swallowedJumpKeyframes[0];
 8000bfe:	681b      	ldr	r3, [r3, #0]
		spriteHeight = SWALLOWED_JUMP_HEIGHT;
 8000c00:	7811      	ldrb	r1, [r2, #0]
		spriteOffset = SWALLOWED_JUMP_OFFSET;
 8000c02:	4a3e      	ldr	r2, [pc, #248]	; (8000cfc <Kirby_renderSprite+0x2c8>)
 8000c04:	e7a3      	b.n	8000b4e <Kirby_renderSprite+0x11a>
	} else if (currentState == SWALLOWED_FALL) {
 8000c06:	2d07      	cmp	r5, #7
 8000c08:	d115      	bne.n	8000c36 <Kirby_renderSprite+0x202>
		if (*remainingTicks == 0) {
 8000c0a:	89a3      	ldrh	r3, [r4, #12]
 8000c0c:	b933      	cbnz	r3, 8000c1c <Kirby_renderSprite+0x1e8>
			*currentFrame = (*currentFrame + 1) % 5;
 8000c0e:	7aa3      	ldrb	r3, [r4, #10]
			if (*currentFrame < 2) {
 8000c10:	2b01      	cmp	r3, #1
				*currentFrame = *currentFrame + 1;
 8000c12:	bf9c      	itt	ls
 8000c14:	3301      	addls	r3, #1
 8000c16:	72a3      	strbls	r3, [r4, #10]
			*remainingTicks = swallowedTicks;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	81a3      	strh	r3, [r4, #12]
		sprite = swallowedFallKeyframes[*currentFrame];
 8000c1c:	7aa2      	ldrb	r2, [r4, #10]
 8000c1e:	4b38      	ldr	r3, [pc, #224]	; (8000d00 <Kirby_renderSprite+0x2cc>)
 8000c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
		*remainingTicks = *remainingTicks - 1;
 8000c24:	89a2      	ldrh	r2, [r4, #12]
 8000c26:	3a01      	subs	r2, #1
 8000c28:	81a2      	strh	r2, [r4, #12]
		spriteWidth = SWALLOWED_FALL_WIDTH;
 8000c2a:	4a36      	ldr	r2, [pc, #216]	; (8000d04 <Kirby_renderSprite+0x2d0>)
 8000c2c:	7810      	ldrb	r0, [r2, #0]
		spriteHeight = SWALLOWED_FALL_HEIGHT;
 8000c2e:	4a36      	ldr	r2, [pc, #216]	; (8000d08 <Kirby_renderSprite+0x2d4>)
 8000c30:	7811      	ldrb	r1, [r2, #0]
		spriteOffset = SWALLOWED_FALL_OFFSET;
 8000c32:	4a36      	ldr	r2, [pc, #216]	; (8000d0c <Kirby_renderSprite+0x2d8>)
 8000c34:	e71a      	b.n	8000a6c <Kirby_renderSprite+0x38>
	} else if (currentState == SWALLOWED_WALK) {
 8000c36:	2d09      	cmp	r5, #9
 8000c38:	d172      	bne.n	8000d20 <Kirby_renderSprite+0x2ec>
		if (*remainingTicks == 0) {
 8000c3a:	89a3      	ldrh	r3, [r4, #12]
 8000c3c:	b953      	cbnz	r3, 8000c54 <Kirby_renderSprite+0x220>
			*currentFrame = (*currentFrame + 1) % 5;
 8000c3e:	2205      	movs	r2, #5
 8000c40:	7aa3      	ldrb	r3, [r4, #10]
 8000c42:	3301      	adds	r3, #1
 8000c44:	fbb3 f2f2 	udiv	r2, r3, r2
 8000c48:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000c4c:	1a9b      	subs	r3, r3, r2
 8000c4e:	72a3      	strb	r3, [r4, #10]
			*remainingTicks = swallowedTicks;
 8000c50:	2302      	movs	r3, #2
 8000c52:	81a3      	strh	r3, [r4, #12]
		sprite = swallowedWalkKeyframes[*currentFrame];
 8000c54:	7aa2      	ldrb	r2, [r4, #10]
 8000c56:	4b2e      	ldr	r3, [pc, #184]	; (8000d10 <Kirby_renderSprite+0x2dc>)
 8000c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
		*remainingTicks = *remainingTicks - 1;
 8000c5c:	89a2      	ldrh	r2, [r4, #12]
 8000c5e:	3a01      	subs	r2, #1
 8000c60:	81a2      	strh	r2, [r4, #12]
		spriteWidth = SWALLOWED_WALK_WIDTH;
 8000c62:	4a2c      	ldr	r2, [pc, #176]	; (8000d14 <Kirby_renderSprite+0x2e0>)
 8000c64:	7810      	ldrb	r0, [r2, #0]
		spriteHeight = SWALLOWED_WALK_HEIGHT;
 8000c66:	4a2c      	ldr	r2, [pc, #176]	; (8000d18 <Kirby_renderSprite+0x2e4>)
 8000c68:	7811      	ldrb	r1, [r2, #0]
		spriteOffset = SWALLOWED_WALK_OFFSET;
 8000c6a:	4a2c      	ldr	r2, [pc, #176]	; (8000d1c <Kirby_renderSprite+0x2e8>)
 8000c6c:	e6fe      	b.n	8000a6c <Kirby_renderSprite+0x38>
 8000c6e:	bf00      	nop
 8000c70:	2000b818 	.word	0x2000b818
 8000c74:	20000013 	.word	0x20000013
 8000c78:	20000011 	.word	0x20000011
 8000c7c:	20000012 	.word	0x20000012
 8000c80:	2000b860 	.word	0x2000b860
 8000c84:	2000b7f4 	.word	0x2000b7f4
 8000c88:	2000b7f2 	.word	0x2000b7f2
 8000c8c:	2000b7f3 	.word	0x2000b7f3
 8000c90:	2000b80c 	.word	0x2000b80c
 8000c94:	20000010 	.word	0x20000010
 8000c98:	2000000e 	.word	0x2000000e
 8000c9c:	2000000f 	.word	0x2000000f
 8000ca0:	2000000d 	.word	0x2000000d
 8000ca4:	2000b808 	.word	0x2000b808
 8000ca8:	2000000b 	.word	0x2000000b
 8000cac:	2000000c 	.word	0x2000000c
 8000cb0:	2000b81c 	.word	0x2000b81c
 8000cb4:	20000016 	.word	0x20000016
 8000cb8:	20000014 	.word	0x20000014
 8000cbc:	20000015 	.word	0x20000015
 8000cc0:	2000b7f8 	.word	0x2000b7f8
 8000cc4:	2000000a 	.word	0x2000000a
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000009 	.word	0x20000009
 8000cd0:	2000b824 	.word	0x2000b824
 8000cd4:	2000b7e2 	.word	0x2000b7e2
 8000cd8:	2000b7e0 	.word	0x2000b7e0
 8000cdc:	2000b7e1 	.word	0x2000b7e1
 8000ce0:	2000b83c 	.word	0x2000b83c
 8000ce4:	2000b7e8 	.word	0x2000b7e8
 8000ce8:	2000b7e6 	.word	0x2000b7e6
 8000cec:	2000b7e7 	.word	0x2000b7e7
 8000cf0:	2000b7eb 	.word	0x2000b7eb
 8000cf4:	2000b840 	.word	0x2000b840
 8000cf8:	2000b7e9 	.word	0x2000b7e9
 8000cfc:	2000b7ea 	.word	0x2000b7ea
 8000d00:	2000b830 	.word	0x2000b830
 8000d04:	2000b7e5 	.word	0x2000b7e5
 8000d08:	2000b7e3 	.word	0x2000b7e3
 8000d0c:	2000b7e4 	.word	0x2000b7e4
 8000d10:	2000b844 	.word	0x2000b844
 8000d14:	2000b7ee 	.word	0x2000b7ee
 8000d18:	2000b7ec 	.word	0x2000b7ec
 8000d1c:	2000b7ed 	.word	0x2000b7ed
	} else if (currentState == SWALLOWING) {
 8000d20:	2d01      	cmp	r5, #1
 8000d22:	d113      	bne.n	8000d4c <Kirby_renderSprite+0x318>
		if (*remainingTicks == 0) {
 8000d24:	89a3      	ldrh	r3, [r4, #12]
 8000d26:	b923      	cbnz	r3, 8000d32 <Kirby_renderSprite+0x2fe>
			if (*currentFrame == 0) {
 8000d28:	7aa3      	ldrb	r3, [r4, #10]
 8000d2a:	b903      	cbnz	r3, 8000d2e <Kirby_renderSprite+0x2fa>
				*currentFrame = 1;
 8000d2c:	72a5      	strb	r5, [r4, #10]
			*remainingTicks = swallowingTicks;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	81a3      	strh	r3, [r4, #12]
		sprite = swallowingKeyframes[*currentFrame];
 8000d32:	7aa2      	ldrb	r2, [r4, #10]
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <Kirby_renderSprite+0x328>)
 8000d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
		*remainingTicks = *remainingTicks - 1;
 8000d3a:	89a2      	ldrh	r2, [r4, #12]
 8000d3c:	3a01      	subs	r2, #1
 8000d3e:	81a2      	strh	r2, [r4, #12]
		spriteWidth = SWALLOWING_WIDTH;
 8000d40:	4a07      	ldr	r2, [pc, #28]	; (8000d60 <Kirby_renderSprite+0x32c>)
 8000d42:	7810      	ldrb	r0, [r2, #0]
		spriteHeight = SWALLOWING_HEIGHT;
 8000d44:	4a07      	ldr	r2, [pc, #28]	; (8000d64 <Kirby_renderSprite+0x330>)
 8000d46:	7811      	ldrb	r1, [r2, #0]
		spriteOffset = SWALLOWING_OFFSET;
 8000d48:	4a07      	ldr	r2, [pc, #28]	; (8000d68 <Kirby_renderSprite+0x334>)
 8000d4a:	e68f      	b.n	8000a6c <Kirby_renderSprite+0x38>
	uint8_t spriteOffset = 0;
 8000d4c:	2200      	movs	r2, #0
	uint8_t spriteHeight = 0;
 8000d4e:	4611      	mov	r1, r2
	uint8_t spriteWidth = 0;
 8000d50:	4610      	mov	r0, r2
 8000d52:	e700      	b.n	8000b56 <Kirby_renderSprite+0x122>
		Kirby_displayKirbyFacingRight(spriteWidth, spriteHeight, spriteOffset, sprite, xPos, yPos);
 8000d54:	f7ff fd12 	bl	800077c <Kirby_displayKirbyFacingRight>
}
 8000d58:	e705      	b.n	8000b66 <Kirby_renderSprite+0x132>
 8000d5a:	bf00      	nop
 8000d5c:	2000b858 	.word	0x2000b858
 8000d60:	2000b7f1 	.word	0x2000b7f1
 8000d64:	2000b7ef 	.word	0x2000b7ef
 8000d68:	2000b7f0 	.word	0x2000b7f0

08000d6c <Kirby_onSwallow>:

void Kirby_onSwallow() {
 8000d6c:	b508      	push	{r3, lr}
	// Erases sir kibble and the boomerang
	Enemy_eraseBoomerang();
 8000d6e:	f7ff faf9 	bl	8000364 <Enemy_eraseBoomerang>
	Enemy_eraseEnemy();
 8000d72:	f7ff fb27 	bl	80003c4 <Enemy_eraseEnemy>
	showEnemy = 0;
 8000d76:	2200      	movs	r2, #0
 8000d78:	4b01      	ldr	r3, [pc, #4]	; (8000d80 <Kirby_onSwallow+0x14>)
 8000d7a:	701a      	strb	r2, [r3, #0]
}
 8000d7c:	bd08      	pop	{r3, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000007 	.word	0x20000007

08000d84 <Kirby_updateState>:
void Kirby_updateState(struct Kirby* kirby, uint8_t inputB, uint8_t inputA, uint8_t inputLeft, uint8_t inputRight) {
 8000d84:	b570      	push	{r4, r5, r6, lr}
 8000d86:	4615      	mov	r5, r2
 8000d88:	461e      	mov	r6, r3
	if (!(kirby->enableStateChange)) {
 8000d8a:	7bc2      	ldrb	r2, [r0, #15]
	kirby->previousState = kirby->state;
 8000d8c:	7a43      	ldrb	r3, [r0, #9]
void Kirby_updateState(struct Kirby* kirby, uint8_t inputB, uint8_t inputA, uint8_t inputLeft, uint8_t inputRight) {
 8000d8e:	4604      	mov	r4, r0
	kirby->previousState = kirby->state;
 8000d90:	7383      	strb	r3, [r0, #14]
	if (!(kirby->enableStateChange)) {
 8000d92:	b132      	cbz	r2, 8000da2 <Kirby_updateState+0x1e>
	if (inputB) {
 8000d94:	b149      	cbz	r1, 8000daa <Kirby_updateState+0x26>
		if (kirby->hasSwallowed) {
 8000d96:	7903      	ldrb	r3, [r0, #4]
 8000d98:	b123      	cbz	r3, 8000da4 <Kirby_updateState+0x20>
			kirby->state = SPITTING;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	7263      	strb	r3, [r4, #9]
			kirby->hasSwallowed = 0;
 8000d9e:	80a3      	strh	r3, [r4, #4]
			kirby->enableStateChange = 0;
 8000da0:	73e3      	strb	r3, [r4, #15]
}
 8000da2:	bd70      	pop	{r4, r5, r6, pc}
			kirby->state = SWALLOWING;
 8000da4:	2301      	movs	r3, #1
		kirby->state = IDLE;
 8000da6:	7263      	strb	r3, [r4, #9]
 8000da8:	e7fb      	b.n	8000da2 <Kirby_updateState+0x1e>
	} else if (kirby->previousState == FLOATING_DOWN && Kirby_isOnGround(kirby)) {
 8000daa:	2b06      	cmp	r3, #6
 8000dac:	d103      	bne.n	8000db6 <Kirby_updateState+0x32>
 8000dae:	f7ff fd83 	bl	80008b8 <Kirby_isOnGround>
 8000db2:	2800      	cmp	r0, #0
 8000db4:	d1f1      	bne.n	8000d9a <Kirby_updateState+0x16>
	if (kirby->state == SWALLOWING && kirby->currentFrame == 1 && kirby->xPos > 316) {
 8000db6:	7a63      	ldrb	r3, [r4, #9]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d109      	bne.n	8000dd0 <Kirby_updateState+0x4c>
 8000dbc:	7aa3      	ldrb	r3, [r4, #10]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d106      	bne.n	8000dd0 <Kirby_updateState+0x4c>
 8000dc2:	8822      	ldrh	r2, [r4, #0]
 8000dc4:	f5b2 7f9e 	cmp.w	r2, #316	; 0x13c
 8000dc8:	d902      	bls.n	8000dd0 <Kirby_updateState+0x4c>
		kirby->hasSwallowed = 1;
 8000dca:	7123      	strb	r3, [r4, #4]
		Kirby_onSwallow();
 8000dcc:	f7ff ffce 	bl	8000d6c <Kirby_onSwallow>
	if (inputA) {
 8000dd0:	b1d5      	cbz	r5, 8000e08 <Kirby_updateState+0x84>
		if (kirby->hasSwallowed && !(kirby->isFloating)) {
 8000dd2:	7923      	ldrb	r3, [r4, #4]
 8000dd4:	b133      	cbz	r3, 8000de4 <Kirby_updateState+0x60>
 8000dd6:	7963      	ldrb	r3, [r4, #5]
 8000dd8:	b923      	cbnz	r3, 8000de4 <Kirby_updateState+0x60>
			kirby->state = SWALLOWED_JUMP;
 8000dda:	2204      	movs	r2, #4
 8000ddc:	7262      	strb	r2, [r4, #9]
			kirby->enableUp = 1;
 8000dde:	2201      	movs	r2, #1
 8000de0:	71a2      	strb	r2, [r4, #6]
 8000de2:	e7dd      	b.n	8000da0 <Kirby_updateState+0x1c>
		} else if (Kirby_isOnGround(kirby)) {
 8000de4:	4620      	mov	r0, r4
 8000de6:	f7ff fd67 	bl	80008b8 <Kirby_isOnGround>
 8000dea:	b128      	cbz	r0, 8000df8 <Kirby_updateState+0x74>
			kirby->state = JUMPING;
 8000dec:	2302      	movs	r3, #2
 8000dee:	7263      	strb	r3, [r4, #9]
			kirby->enableUp = 1;
 8000df0:	2301      	movs	r3, #1
 8000df2:	71a3      	strb	r3, [r4, #6]
			kirby->enableStateChange = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	e7d3      	b.n	8000da0 <Kirby_updateState+0x1c>
			kirby->state = FLOATING_UP;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	7263      	strb	r3, [r4, #9]
			kirby->hasSwallowed = 1;
 8000dfc:	f240 1301 	movw	r3, #257	; 0x101
 8000e00:	80a3      	strh	r3, [r4, #4]
			kirby->enableUp = 1;
 8000e02:	2301      	movs	r3, #1
 8000e04:	71a3      	strb	r3, [r4, #6]
 8000e06:	e7cc      	b.n	8000da2 <Kirby_updateState+0x1e>
	if (Kirby_isFalling(kirby)) {
 8000e08:	4620      	mov	r0, r4
		kirby->enableUp = 0;
 8000e0a:	71a5      	strb	r5, [r4, #6]
	if (Kirby_isFalling(kirby)) {
 8000e0c:	f7ff fd69 	bl	80008e2 <Kirby_isFalling>
 8000e10:	7922      	ldrb	r2, [r4, #4]
 8000e12:	b140      	cbz	r0, 8000e26 <Kirby_updateState+0xa2>
		if (kirby->hasSwallowed == 0) {
 8000e14:	b90a      	cbnz	r2, 8000e1a <Kirby_updateState+0x96>
			kirby->state = FALLING;
 8000e16:	2305      	movs	r3, #5
 8000e18:	e7c5      	b.n	8000da6 <Kirby_updateState+0x22>
		} else if (kirby->isFloating) {
 8000e1a:	7963      	ldrb	r3, [r4, #5]
 8000e1c:	b10b      	cbz	r3, 8000e22 <Kirby_updateState+0x9e>
			kirby->state = FLOATING_DOWN;
 8000e1e:	2306      	movs	r3, #6
 8000e20:	e7c1      	b.n	8000da6 <Kirby_updateState+0x22>
			kirby->state = SWALLOWED_FALL;
 8000e22:	2307      	movs	r3, #7
 8000e24:	e7bf      	b.n	8000da6 <Kirby_updateState+0x22>
	if (inputLeft || inputRight) {
 8000e26:	f89d 3010 	ldrb.w	r3, [sp, #16]
		kirby->isFloating = 0;
 8000e2a:	7165      	strb	r5, [r4, #5]
	if (inputLeft || inputRight) {
 8000e2c:	4333      	orrs	r3, r6
 8000e2e:	d004      	beq.n	8000e3a <Kirby_updateState+0xb6>
		if (kirby->hasSwallowed) {
 8000e30:	b10a      	cbz	r2, 8000e36 <Kirby_updateState+0xb2>
			kirby->state = SWALLOWED_WALK;
 8000e32:	2309      	movs	r3, #9
 8000e34:	e7b7      	b.n	8000da6 <Kirby_updateState+0x22>
			kirby->state = WALKING;
 8000e36:	2308      	movs	r3, #8
 8000e38:	e7b5      	b.n	8000da6 <Kirby_updateState+0x22>
	if (kirby->hasSwallowed) {
 8000e3a:	b10a      	cbz	r2, 8000e40 <Kirby_updateState+0xbc>
		kirby->state = SWALLOWED_IDLE;
 8000e3c:	230b      	movs	r3, #11
 8000e3e:	e7b2      	b.n	8000da6 <Kirby_updateState+0x22>
		kirby->state = IDLE;
 8000e40:	230a      	movs	r3, #10
 8000e42:	e7b0      	b.n	8000da6 <Kirby_updateState+0x22>

08000e44 <Kirby_checkWin>:

uint8_t Kirby_checkWin(struct Kirby* kirby) {
	return kirby->xPos > 744;
 8000e44:	8800      	ldrh	r0, [r0, #0]
}
 8000e46:	f5b0 7f3a 	cmp.w	r0, #744	; 0x2e8
 8000e4a:	bf94      	ite	ls
 8000e4c:	2000      	movls	r0, #0
 8000e4e:	2001      	movhi	r0, #1
 8000e50:	4770      	bx	lr

08000e52 <Kirby_checkLose>:

uint8_t Kirby_checkLose(struct Kirby* kirby) {
	return kirby->yPos > 192;
 8000e52:	8840      	ldrh	r0, [r0, #2]
}
 8000e54:	28c0      	cmp	r0, #192	; 0xc0
 8000e56:	bf94      	ite	ls
 8000e58:	2000      	movls	r0, #0
 8000e5a:	2001      	movhi	r0, #1
 8000e5c:	4770      	bx	lr

08000e5e <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	9001      	str	r0, [sp, #4]
 8000e62:	9b01      	ldr	r3, [sp, #4]
 8000e64:	b90b      	cbnz	r3, 8000e6a <Delay+0xc>
 8000e66:	b002      	add	sp, #8
 8000e68:	4770      	bx	lr
 8000e6a:	9b01      	ldr	r3, [sp, #4]
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	9301      	str	r3, [sp, #4]
 8000e70:	e7f7      	b.n	8000e62 <Delay+0x4>
	...

08000e74 <LCD_Rst>:
}



void LCD_Rst ( void )
{			
 8000e74:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000e76:	4d0a      	ldr	r5, [pc, #40]	; (8000ea0 <LCD_Rst+0x2c>)
	Delay ( 0xAFFf<<2 ); 					   
 8000e78:	4c0a      	ldr	r4, [pc, #40]	; (8000ea4 <LCD_Rst+0x30>)
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000e7a:	4628      	mov	r0, r5
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2102      	movs	r1, #2
 8000e80:	f000 ff68 	bl	8001d54 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000e84:	4620      	mov	r0, r4
 8000e86:	f7ff ffea 	bl	8000e5e <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	2102      	movs	r1, #2
 8000e90:	f000 ff60 	bl	8001d54 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000e94:	4620      	mov	r0, r4
}
 8000e96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Delay ( 0xAFFf<<2 ); 	
 8000e9a:	f7ff bfe0 	b.w	8000e5e <Delay>
 8000e9e:	bf00      	nop
 8000ea0:	40011800 	.word	0x40011800
 8000ea4:	0002bffc 	.word	0x0002bffc

08000ea8 <LCD_Write_Cmd>:



void LCD_Write_Cmd ( uint16_t usCmd )
{
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000ea8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000eac:	8018      	strh	r0, [r3, #0]
}
 8000eae:	4770      	bx	lr

08000eb0 <LCD_Write_Data>:



void LCD_Write_Data ( uint16_t usData )
{
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000eb0:	4b01      	ldr	r3, [pc, #4]	; (8000eb8 <LCD_Write_Data+0x8>)
 8000eb2:	8018      	strh	r0, [r3, #0]
}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	60020000 	.word	0x60020000

08000ebc <LCD_REG_Config>:
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000ebc:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000ec0:	23cf      	movs	r3, #207	; 0xcf
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000ec2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	2081      	movs	r0, #129	; 0x81
 8000eca:	2730      	movs	r7, #48	; 0x30
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000ecc:	24ed      	movs	r4, #237	; 0xed
 8000ece:	8013      	strh	r3, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000ed0:	4b5c      	ldr	r3, [pc, #368]	; (8001044 <LCD_REG_Config+0x188>)
 8000ed2:	f04f 0c03 	mov.w	ip, #3
 8000ed6:	8019      	strh	r1, [r3, #0]
 8000ed8:	8018      	strh	r0, [r3, #0]
 8000eda:	801f      	strh	r7, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000edc:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000ede:	2464      	movs	r4, #100	; 0x64
 8000ee0:	801c      	strh	r4, [r3, #0]
 8000ee2:	2412      	movs	r4, #18
 8000ee4:	f8a3 c000 	strh.w	ip, [r3]
 8000ee8:	801c      	strh	r4, [r3, #0]
 8000eea:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000eec:	20e8      	movs	r0, #232	; 0xe8
 8000eee:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000ef0:	2085      	movs	r0, #133	; 0x85
 8000ef2:	f04f 0810 	mov.w	r8, #16
 8000ef6:	8018      	strh	r0, [r3, #0]
 8000ef8:	2078      	movs	r0, #120	; 0x78
 8000efa:	f8a3 8000 	strh.w	r8, [r3]
 8000efe:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000f00:	20cb      	movs	r0, #203	; 0xcb
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000f02:	f04f 0e39 	mov.w	lr, #57	; 0x39
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000f06:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000f08:	202c      	movs	r0, #44	; 0x2c
 8000f0a:	f8a3 e000 	strh.w	lr, [r3]
 8000f0e:	8018      	strh	r0, [r3, #0]
 8000f10:	2034      	movs	r0, #52	; 0x34
 8000f12:	8019      	strh	r1, [r3, #0]
 8000f14:	8018      	strh	r0, [r3, #0]
 8000f16:	2002      	movs	r0, #2
 8000f18:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000f1a:	20f7      	movs	r0, #247	; 0xf7
 8000f1c:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000f1e:	2020      	movs	r0, #32
 8000f20:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000f22:	20ea      	movs	r0, #234	; 0xea
 8000f24:	8010      	strh	r0, [r2, #0]
 8000f26:	20b1      	movs	r0, #177	; 0xb1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000f28:	8019      	strh	r1, [r3, #0]
 8000f2a:	f04f 091b 	mov.w	r9, #27
 8000f2e:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000f30:	8010      	strh	r0, [r2, #0]
 8000f32:	20b6      	movs	r0, #182	; 0xb6
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000f34:	8019      	strh	r1, [r3, #0]
 8000f36:	f8a3 9000 	strh.w	r9, [r3]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000f3a:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000f3c:	200a      	movs	r0, #10
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000f3e:	24c0      	movs	r4, #192	; 0xc0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000f40:	8018      	strh	r0, [r3, #0]
 8000f42:	20a2      	movs	r0, #162	; 0xa2
 8000f44:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000f46:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000f48:	2435      	movs	r4, #53	; 0x35
 8000f4a:	801c      	strh	r4, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000f4c:	24c1      	movs	r4, #193	; 0xc1
 8000f4e:	25c5      	movs	r5, #197	; 0xc5
 8000f50:	8014      	strh	r4, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000f52:	2411      	movs	r4, #17
 8000f54:	801c      	strh	r4, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000f56:	8015      	strh	r5, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000f58:	2545      	movs	r5, #69	; 0x45
 8000f5a:	801d      	strh	r5, [r3, #0]
 8000f5c:	801d      	strh	r5, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000f5e:	25c7      	movs	r5, #199	; 0xc7
 8000f60:	8015      	strh	r5, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000f62:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000f64:	20f2      	movs	r0, #242	; 0xf2
 8000f66:	2626      	movs	r6, #38	; 0x26
 8000f68:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000f6a:	2501      	movs	r5, #1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000f6c:	20e0      	movs	r0, #224	; 0xe0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000f6e:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000f70:	8016      	strh	r6, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000f72:	801d      	strh	r5, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000f74:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000f76:	200f      	movs	r0, #15
 8000f78:	8018      	strh	r0, [r3, #0]
 8000f7a:	801e      	strh	r6, [r3, #0]
 8000f7c:	2624      	movs	r6, #36	; 0x24
 8000f7e:	801e      	strh	r6, [r3, #0]
 8000f80:	260b      	movs	r6, #11
 8000f82:	801e      	strh	r6, [r3, #0]
 8000f84:	260e      	movs	r6, #14
 8000f86:	f04f 0a54 	mov.w	sl, #84	; 0x54
 8000f8a:	801e      	strh	r6, [r3, #0]
 8000f8c:	2609      	movs	r6, #9
 8000f8e:	801e      	strh	r6, [r3, #0]
 8000f90:	f8a3 a000 	strh.w	sl, [r3]
 8000f94:	f04f 0aa8 	mov.w	sl, #168	; 0xa8
 8000f98:	f8a3 a000 	strh.w	sl, [r3]
 8000f9c:	f04f 0a46 	mov.w	sl, #70	; 0x46
 8000fa0:	f8a3 a000 	strh.w	sl, [r3]
 8000fa4:	f04f 0a0c 	mov.w	sl, #12
 8000fa8:	f8a3 a000 	strh.w	sl, [r3]
 8000fac:	f04f 0a17 	mov.w	sl, #23
 8000fb0:	f8a3 a000 	strh.w	sl, [r3]
 8000fb4:	801e      	strh	r6, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000fb6:	f04f 0ae1 	mov.w	sl, #225	; 0xe1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000fba:	2607      	movs	r6, #7
 8000fbc:	8018      	strh	r0, [r3, #0]
 8000fbe:	801e      	strh	r6, [r3, #0]
 8000fc0:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000fc2:	f8a2 a000 	strh.w	sl, [r2]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000fc6:	f04f 0a19 	mov.w	sl, #25
 8000fca:	8019      	strh	r1, [r3, #0]
 8000fcc:	f8a3 a000 	strh.w	sl, [r3]
 8000fd0:	f8a3 9000 	strh.w	r9, [r3]
 8000fd4:	f04f 0904 	mov.w	r9, #4
 8000fd8:	f8a3 9000 	strh.w	r9, [r3]
 8000fdc:	f8a3 8000 	strh.w	r8, [r3]
 8000fe0:	801e      	strh	r6, [r3, #0]
 8000fe2:	f04f 0847 	mov.w	r8, #71	; 0x47
 8000fe6:	262a      	movs	r6, #42	; 0x2a
 8000fe8:	801e      	strh	r6, [r3, #0]
 8000fea:	f8a3 8000 	strh.w	r8, [r3]
 8000fee:	f8a3 e000 	strh.w	lr, [r3]
 8000ff2:	f8a3 c000 	strh.w	ip, [r3]
 8000ff6:	f04f 0c06 	mov.w	ip, #6
 8000ffa:	f8a3 c000 	strh.w	ip, [r3]
 8000ffe:	f8a3 c000 	strh.w	ip, [r3]
 8001002:	801f      	strh	r7, [r3, #0]
 8001004:	2738      	movs	r7, #56	; 0x38
 8001006:	801f      	strh	r7, [r3, #0]
 8001008:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800100a:	2036      	movs	r0, #54	; 0x36
 800100c:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800100e:	20c8      	movs	r0, #200	; 0xc8
 8001010:	8018      	strh	r0, [r3, #0]
 8001012:	20ef      	movs	r0, #239	; 0xef
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8001014:	8016      	strh	r6, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8001016:	8019      	strh	r1, [r3, #0]
 8001018:	8019      	strh	r1, [r3, #0]
 800101a:	8019      	strh	r1, [r3, #0]
 800101c:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800101e:	202b      	movs	r0, #43	; 0x2b
 8001020:	8010      	strh	r0, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8001022:	8019      	strh	r1, [r3, #0]
 8001024:	8019      	strh	r1, [r3, #0]
 8001026:	213f      	movs	r1, #63	; 0x3f
 8001028:	801d      	strh	r5, [r3, #0]
 800102a:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800102c:	213a      	movs	r1, #58	; 0x3a
 800102e:	8011      	strh	r1, [r2, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8001030:	2155      	movs	r1, #85	; 0x55
	LCD_Write_Cmd ( 0x3a ); 
	LCD_Write_Data ( 0x55 );
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
	Delay ( 0xAFFf<<2 );
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <LCD_REG_Config+0x18c>)
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8001034:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8001036:	8014      	strh	r4, [r2, #0]
	Delay ( 0xAFFf<<2 );
 8001038:	f7ff ff11 	bl	8000e5e <Delay>
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800103c:	2329      	movs	r3, #41	; 0x29
 800103e:	8013      	strh	r3, [r2, #0]
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
	
	
}
 8001040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001044:	60020000 	.word	0x60020000
 8001048:	0002bffc 	.word	0x0002bffc

0800104c <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 800104c:	b570      	push	{r4, r5, r6, lr}
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800104e:	f04f 46c0 	mov.w	r6, #1610612736	; 0x60000000
 8001052:	242a      	movs	r4, #42	; 0x2a
 8001054:	8034      	strh	r4, [r6, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8001056:	4c0f      	ldr	r4, [pc, #60]	; (8001094 <LCD_OpenWindow+0x48>)
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8001058:	0a05      	lsrs	r5, r0, #8
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800105a:	8025      	strh	r5, [r4, #0]
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 800105c:	b2c5      	uxtb	r5, r0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800105e:	8025      	strh	r5, [r4, #0]
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8001060:	1885      	adds	r5, r0, r2
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8001062:	3a01      	subs	r2, #1
 8001064:	4410      	add	r0, r2
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8001066:	222b      	movs	r2, #43	; 0x2b
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8001068:	3d01      	subs	r5, #1
 800106a:	f3c5 250f 	ubfx	r5, r5, #8, #16
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800106e:	b2c0      	uxtb	r0, r0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8001070:	8025      	strh	r5, [r4, #0]
 8001072:	8020      	strh	r0, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8001074:	8032      	strh	r2, [r6, #0]

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
	LCD_Write_Data ( usPAGE >> 8  );
 8001076:	0a0a      	lsrs	r2, r1, #8
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8001078:	8022      	strh	r2, [r4, #0]
	LCD_Write_Data ( usPAGE & 0xff  );
 800107a:	b2ca      	uxtb	r2, r1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800107c:	8022      	strh	r2, [r4, #0]
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 800107e:	18ca      	adds	r2, r1, r3
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8001080:	3b01      	subs	r3, #1
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8001082:	3a01      	subs	r2, #1
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8001084:	4419      	add	r1, r3
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8001086:	f3c2 220f 	ubfx	r2, r2, #8, #16
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 800108a:	b2c9      	uxtb	r1, r1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800108c:	8022      	strh	r2, [r4, #0]
 800108e:	8021      	strh	r1, [r4, #0]
	
}
 8001090:	bd70      	pop	{r4, r5, r6, pc}
 8001092:	bf00      	nop
 8001094:	60020000 	.word	0x60020000

08001098 <LCD_FillColor>:
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8001098:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800109c:	222c      	movs	r2, #44	; 0x2c
 800109e:	801a      	strh	r2, [r3, #0]
	uint32_t i = 0;
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
		
	for ( i = 0; i < usPoint; i ++ )
 80010a0:	2300      	movs	r3, #0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80010a2:	4a03      	ldr	r2, [pc, #12]	; (80010b0 <LCD_FillColor+0x18>)
	for ( i = 0; i < usPoint; i ++ )
 80010a4:	4283      	cmp	r3, r0
 80010a6:	d100      	bne.n	80010aa <LCD_FillColor+0x12>
		LCD_Write_Data ( usColor );
		
}
 80010a8:	4770      	bx	lr
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80010aa:	8011      	strh	r1, [r2, #0]
	for ( i = 0; i < usPoint; i ++ )
 80010ac:	3301      	adds	r3, #1
 80010ae:	e7f9      	b.n	80010a4 <LCD_FillColor+0xc>
 80010b0:	60020000 	.word	0x60020000

080010b4 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 80010b4:	b570      	push	{r4, r5, r6, lr}
 80010b6:	4614      	mov	r4, r2
 80010b8:	461d      	mov	r5, r3
 80010ba:	f8bd 6010 	ldrh.w	r6, [sp, #16]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80010be:	f7ff ffc5 	bl	800104c <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 80010c2:	4631      	mov	r1, r6
 80010c4:	fb05 f004 	mul.w	r0, r5, r4
	
}
 80010c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	LCD_FillColor ( usWidth * usHeight, usColor );		
 80010cc:	f7ff bfe4 	b.w	8001098 <LCD_FillColor>

080010d0 <LCD_INIT>:
{
 80010d0:	b507      	push	{r0, r1, r2, lr}
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010d8:	4809      	ldr	r0, [pc, #36]	; (8001100 <LCD_INIT+0x30>)
 80010da:	f000 fe3b 	bl	8001d54 <HAL_GPIO_WritePin>
	LCD_Rst();
 80010de:	f7ff fec9 	bl	8000e74 <LCD_Rst>
	LCD_REG_Config();
 80010e2:	f7ff feeb 	bl	8000ebc <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 80010e6:	2100      	movs	r1, #0
 80010e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ec:	22f0      	movs	r2, #240	; 0xf0
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	4608      	mov	r0, r1
 80010f2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80010f6:	f7ff ffdd 	bl	80010b4 <LCD_Clear>
}
 80010fa:	b003      	add	sp, #12
 80010fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001100:	40011400 	.word	0x40011400

08001104 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8001104:	b570      	push	{r4, r5, r6, lr}
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001106:	2310      	movs	r3, #16
{
 8001108:	4614      	mov	r4, r2
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 800110a:	2208      	movs	r2, #8
 800110c:	f7ff ff9e 	bl	800104c <LCD_OpenWindow>
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8001110:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001114:	222c      	movs	r2, #44	; 0x2c
	ucRelativePositon = cChar - ' ';
 8001116:	3c20      	subs	r4, #32
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8001118:	801a      	strh	r2, [r3, #0]
	
	LCD_Write_Cmd ( CMD_SetPixel );	
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <LCD_DrawChar+0x50>)
 800111c:	b2e4      	uxtb	r4, r4
 800111e:	eb03 1404 	add.w	r4, r3, r4, lsl #4
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8001122:	f64f 75ff 	movw	r5, #65535	; 0xffff
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8001126:	2310      	movs	r3, #16
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8001128:	261f      	movs	r6, #31
 800112a:	480b      	ldr	r0, [pc, #44]	; (8001158 <LCD_DrawChar+0x54>)
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 800112c:	2208      	movs	r2, #8
 800112e:	f814 1b01 	ldrb.w	r1, [r4], #1
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
		{
			if ( ucTemp & 0x01 )
 8001132:	f011 0f01 	tst.w	r1, #1
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001136:	f102 32ff 	add.w	r2, r2, #4294967295
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800113a:	bf14      	ite	ne
 800113c:	8006      	strhne	r6, [r0, #0]
 800113e:	8005      	strheq	r5, [r0, #0]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001140:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				LCD_Write_Data ( 0x001F );
			
			else
				LCD_Write_Data (  0xFFFF );								
			
			ucTemp >>= 1;		
 8001144:	ea4f 0151 	mov.w	r1, r1, lsr #1
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001148:	d1f3      	bne.n	8001132 <LCD_DrawChar+0x2e>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800114a:	3b01      	subs	r3, #1
 800114c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8001150:	d1ec      	bne.n	800112c <LCD_DrawChar+0x28>
			
		}
		
	}
	
}
 8001152:	bd70      	pop	{r4, r5, r6, pc}
 8001154:	080605d4 	.word	0x080605d4
 8001158:	60020000 	.word	0x60020000

0800115c <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 800115c:	b570      	push	{r4, r5, r6, lr}
 800115e:	4604      	mov	r4, r0
 8001160:	460d      	mov	r5, r1
 8001162:	1e56      	subs	r6, r2, #1
	while ( * pStr != '\0' )
 8001164:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8001168:	b902      	cbnz	r2, 800116c <LCD_DrawString+0x10>
		
		usC += WIDTH_EN_CHAR;
		
	}
	
}
 800116a:	bd70      	pop	{r4, r5, r6, pc}
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800116c:	2ce8      	cmp	r4, #232	; 0xe8
			usP += HEIGHT_EN_CHAR;
 800116e:	bf82      	ittt	hi
 8001170:	3510      	addhi	r5, #16
 8001172:	b2ad      	uxthhi	r5, r5
			usC = LCD_DispWindow_Start_COLUMN;
 8001174:	2400      	movhi	r4, #0
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001176:	f5b5 7f98 	cmp.w	r5, #304	; 0x130
			usP = LCD_DispWindow_Start_PAGE;
 800117a:	bf84      	itt	hi
 800117c:	2500      	movhi	r5, #0
			usC = LCD_DispWindow_Start_COLUMN;
 800117e:	462c      	movhi	r4, r5
		LCD_DrawChar ( usC, usP, * pStr );
 8001180:	4629      	mov	r1, r5
 8001182:	4620      	mov	r0, r4
		usC += WIDTH_EN_CHAR;
 8001184:	3408      	adds	r4, #8
		LCD_DrawChar ( usC, usP, * pStr );
 8001186:	f7ff ffbd 	bl	8001104 <LCD_DrawChar>
		usC += WIDTH_EN_CHAR;
 800118a:	b2a4      	uxth	r4, r4
 800118c:	e7ea      	b.n	8001164 <LCD_DrawString+0x8>
	...

08001190 <LCD_DrawDot>:


//Task 2
void LCD_DrawDot(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usColor)	
{	
 8001190:	b530      	push	{r4, r5, lr}
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8001192:	232a      	movs	r3, #42	; 0x2a
 8001194:	f04f 44c0 	mov.w	r4, #1610612736	; 0x60000000
 8001198:	8023      	strh	r3, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <LCD_DrawDot+0x30>)
	 *  Task 2 : Implement the LCD_DrawDot to turn on a particular dot on the LCD.
	 */

	// Column address set-----------------------------------------------------------
	LCD_Write_Cmd(0x2A);
	LCD_Write_Data(usCOLUMN >> 8);
 800119c:	0a05      	lsrs	r5, r0, #8
	LCD_Write_Data(usCOLUMN & 0xff);
 800119e:	b2c0      	uxtb	r0, r0
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80011a0:	801d      	strh	r5, [r3, #0]
 80011a2:	8018      	strh	r0, [r3, #0]
 80011a4:	801d      	strh	r5, [r3, #0]
 80011a6:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80011a8:	202b      	movs	r0, #43	; 0x2b
 80011aa:	8020      	strh	r0, [r4, #0]
	LCD_Write_Data(usCOLUMN >> 8);
	LCD_Write_Data(usCOLUMN & 0xff);

	// Page address set-------------------------------------------------------------
	LCD_Write_Cmd(0x2B);
	LCD_Write_Data(usPAGE >> 8);
 80011ac:	0a08      	lsrs	r0, r1, #8
	LCD_Write_Data(usPAGE & 0xff);
 80011ae:	b2c9      	uxtb	r1, r1
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80011b0:	8018      	strh	r0, [r3, #0]
 80011b2:	8019      	strh	r1, [r3, #0]
 80011b4:	8018      	strh	r0, [r3, #0]
 80011b6:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80011b8:	212c      	movs	r1, #44	; 0x2c
 80011ba:	8021      	strh	r1, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80011bc:	801a      	strh	r2, [r3, #0]

	// Memory write-----------------------------------------------------------------
	LCD_Write_Cmd(0x2C);
	LCD_Write_Data(usColor);
		
}
 80011be:	bd30      	pop	{r4, r5, pc}
 80011c0:	60020000 	.word	0x60020000

080011c4 <XferCpltCallback>:
}

/* USER CODE BEGIN 4 */

void XferCpltCallback(DMA_HandleTypeDef* hdma) {
	__NOP();
 80011c4:	bf00      	nop
}
 80011c6:	4770      	bx	lr

080011c8 <handleWin>:
void handleWin() {
 80011c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char string[10] = "You Win!!";
 80011ca:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <handleWin+0x20>)
 80011cc:	ab01      	add	r3, sp, #4
 80011ce:	6810      	ldr	r0, [r2, #0]
 80011d0:	6851      	ldr	r1, [r2, #4]
 80011d2:	8912      	ldrh	r2, [r2, #8]
 80011d4:	c303      	stmia	r3!, {r0, r1}
	LCD_DrawString(0, 220, string);
 80011d6:	21dc      	movs	r1, #220	; 0xdc
	char string[10] = "You Win!!";
 80011d8:	801a      	strh	r2, [r3, #0]
	LCD_DrawString(0, 220, string);
 80011da:	2000      	movs	r0, #0
 80011dc:	aa01      	add	r2, sp, #4
 80011de:	f7ff ffbd 	bl	800115c <LCD_DrawString>
}
 80011e2:	b005      	add	sp, #20
 80011e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80011e8:	08060bc4 	.word	0x08060bc4

080011ec <handleLose>:
void handleLose() {
 80011ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char string[10] = "You Lose!!";
 80011ee:	4a07      	ldr	r2, [pc, #28]	; (800120c <handleLose+0x20>)
 80011f0:	ab01      	add	r3, sp, #4
 80011f2:	6810      	ldr	r0, [r2, #0]
 80011f4:	6851      	ldr	r1, [r2, #4]
 80011f6:	8912      	ldrh	r2, [r2, #8]
 80011f8:	c303      	stmia	r3!, {r0, r1}
	LCD_DrawString(0, 220, string);
 80011fa:	21dc      	movs	r1, #220	; 0xdc
	char string[10] = "You Lose!!";
 80011fc:	801a      	strh	r2, [r3, #0]
	LCD_DrawString(0, 220, string);
 80011fe:	2000      	movs	r0, #0
 8001200:	aa01      	add	r2, sp, #4
 8001202:	f7ff ffab 	bl	800115c <LCD_DrawString>
}
 8001206:	b005      	add	sp, #20
 8001208:	f85d fb04 	ldr.w	pc, [sp], #4
 800120c:	08060bce 	.word	0x08060bce

08001210 <SystemClock_Config>:
{
 8001210:	b510      	push	{r4, lr}
 8001212:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001214:	2214      	movs	r2, #20
 8001216:	2100      	movs	r1, #0
 8001218:	a808      	add	r0, sp, #32
 800121a:	f001 f8d7 	bl	80023cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800121e:	2214      	movs	r2, #20
 8001220:	2100      	movs	r1, #0
 8001222:	a801      	add	r0, sp, #4
 8001224:	f001 f8d2 	bl	80023cc <memset>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001228:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800122a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800122e:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001230:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001234:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001238:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800123e:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001240:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001242:	f000 fd8d 	bl	8001d60 <HAL_RCC_OscConfig>
 8001246:	b108      	cbz	r0, 800124c <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001248:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800124a:	e7fe      	b.n	800124a <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124e:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001252:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001256:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001258:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800125c:	4621      	mov	r1, r4
 800125e:	a801      	add	r0, sp, #4
 8001260:	f000 ff54 	bl	800210c <HAL_RCC_ClockConfig>
 8001264:	b108      	cbz	r0, 800126a <SystemClock_Config+0x5a>
 8001266:	b672      	cpsid	i
  while (1)
 8001268:	e7fe      	b.n	8001268 <SystemClock_Config+0x58>
}
 800126a:	b010      	add	sp, #64	; 0x40
 800126c:	bd10      	pop	{r4, pc}
	...

08001270 <main>:
{
 8001270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f04f 0810 	mov.w	r8, #16
{
 8001278:	b090      	sub	sp, #64	; 0x40
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127a:	4ca1      	ldr	r4, [pc, #644]	; (8001500 <main+0x290>)
  HAL_Init();
 800127c:	f000 fa28 	bl	80016d0 <HAL_Init>
  SystemClock_Config();
 8001280:	f7ff ffc6 	bl	8001210 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	4642      	mov	r2, r8
 8001286:	2100      	movs	r1, #0
 8001288:	a809      	add	r0, sp, #36	; 0x24
 800128a:	f001 f89f 	bl	80023cc <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128e:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001292:	ea43 0308 	orr.w	r3, r3, r8
 8001296:	61a3      	str	r3, [r4, #24]
 8001298:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800129a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129e:	ea03 0308 	and.w	r3, r3, r8
 80012a2:	9304      	str	r3, [sp, #16]
 80012a4:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80012a8:	4896      	ldr	r0, [pc, #600]	; (8001504 <main+0x294>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	f043 0304 	orr.w	r3, r3, #4
 80012ae:	61a3      	str	r3, [r4, #24]
 80012b0:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b2:	2600      	movs	r6, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	9305      	str	r3, [sp, #20]
 80012ba:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012bc:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012be:	2502      	movs	r5, #2
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012c4:	61a3      	str	r3, [r4, #24]
 80012c6:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pin = Key_1_Pin;
 80012c8:	f04f 0901 	mov.w	r9, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012d0:	9306      	str	r3, [sp, #24]
 80012d2:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d4:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d6:	f04f 0a03 	mov.w	sl, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	f043 0308 	orr.w	r3, r3, #8
 80012de:	61a3      	str	r3, [r4, #24]
 80012e0:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012e2:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	f003 0308 	and.w	r3, r3, #8
 80012ea:	9307      	str	r3, [sp, #28]
 80012ec:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ee:	69a3      	ldr	r3, [r4, #24]
 80012f0:	f043 0320 	orr.w	r3, r3, #32
 80012f4:	61a3      	str	r3, [r4, #24]
 80012f6:	69a3      	ldr	r3, [r4, #24]
 80012f8:	f003 0320 	and.w	r3, r3, #32
 80012fc:	9308      	str	r3, [sp, #32]
 80012fe:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001300:	f000 fd28 	bl	8001d54 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	2102      	movs	r1, #2
 8001308:	487f      	ldr	r0, [pc, #508]	; (8001508 <main+0x298>)
 800130a:	f000 fd23 	bl	8001d54 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(Key_2_GPIO_Port, &GPIO_InitStruct);
 8001312:	487e      	ldr	r0, [pc, #504]	; (800150c <main+0x29c>)
 8001314:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001316:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800131a:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(Key_2_GPIO_Port, &GPIO_InitStruct);
 800131c:	f000 fc2c 	bl	8001b78 <HAL_GPIO_Init>
  HAL_GPIO_Init(Key_1_GPIO_Port, &GPIO_InitStruct);
 8001320:	487b      	ldr	r0, [pc, #492]	; (8001510 <main+0x2a0>)
 8001322:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001324:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001326:	e9cd 9609 	strd	r9, r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(Key_1_GPIO_Port, &GPIO_InitStruct);
 800132a:	f000 fc25 	bl	8001b78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A_Button_Pin|B_Button_Pin;
 800132e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001332:	4878      	ldr	r0, [pc, #480]	; (8001514 <main+0x2a4>)
 8001334:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001336:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800133a:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133c:	f000 fc1c 	bl	8001b78 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001340:	4870      	ldr	r0, [pc, #448]	; (8001504 <main+0x294>)
 8001342:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001344:	e9cd 7909 	strd	r7, r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800134a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800134e:	f000 fc13 	bl	8001b78 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001352:	486d      	ldr	r0, [pc, #436]	; (8001508 <main+0x298>)
 8001354:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	e9cd 5909 	strd	r5, r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800135a:	e9cd 6a0b 	strd	r6, sl, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800135e:	f000 fc0b 	bl	8001b78 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001362:	6963      	ldr	r3, [r4, #20]
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8001364:	4d6c      	ldr	r5, [pc, #432]	; (8001518 <main+0x2a8>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001366:	ea43 0309 	orr.w	r3, r3, r9
 800136a:	6163      	str	r3, [r4, #20]
 800136c:	6963      	ldr	r3, [r4, #20]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800136e:	4a6b      	ldr	r2, [pc, #428]	; (800151c <main+0x2ac>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001370:	ea03 0309 	and.w	r3, r3, r9
 8001374:	9303      	str	r3, [sp, #12]
 8001376:	9b03      	ldr	r3, [sp, #12]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001378:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800137c:	e9c5 2300 	strd	r2, r3, [r5]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8001380:	2340      	movs	r3, #64	; 0x40
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001382:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_DISABLE;
 8001386:	e9c5 3602 	strd	r3, r6, [r5, #8]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800138a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 800138e:	4628      	mov	r0, r5
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001390:	e9c5 1304 	strd	r1, r3, [r5, #16]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 8001394:	e9c5 6606 	strd	r6, r6, [r5, #24]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 8001398:	f000 fa36 	bl	8001808 <HAL_DMA_Init>
 800139c:	4604      	mov	r4, r0
 800139e:	b108      	cbz	r0, 80013a4 <main+0x134>
 80013a0:	b672      	cpsid	i
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <main+0x132>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013a4:	4602      	mov	r2, r0
 80013a6:	4601      	mov	r1, r0
 80013a8:	200b      	movs	r0, #11
 80013aa:	f000 f9d9 	bl	8001760 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013ae:	200b      	movs	r0, #11
 80013b0:	f000 fa08 	bl	80017c4 <HAL_NVIC_EnableIRQ>
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80013b4:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80013b8:	4859      	ldr	r0, [pc, #356]	; (8001520 <main+0x2b0>)
  Timing.DataSetupTime = 255;
 80013ba:	22ff      	movs	r2, #255	; 0xff
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80013bc:	6003      	str	r3, [r0, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80013be:	f503 7382 	add.w	r3, r3, #260	; 0x104
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80013c2:	e9c0 3401 	strd	r3, r4, [r0, #4]
  Timing.AddressSetupTime = 15;
 80013c6:	230f      	movs	r3, #15
  Timing.BusTurnAroundDuration = 15;
 80013c8:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  Timing.AddressHoldTime = 15;
 80013cc:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  Timing.DataLatency = 17;
 80013d0:	2311      	movs	r3, #17
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80013d2:	4622      	mov	r2, r4
 80013d4:	a909      	add	r1, sp, #36	; 0x24
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80013d6:	e9c0 4403 	strd	r4, r4, [r0, #12]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80013da:	e9c0 8405 	strd	r8, r4, [r0, #20]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80013de:	e9c0 4407 	strd	r4, r4, [r0, #28]
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80013e2:	e9c0 4709 	strd	r4, r7, [r0, #36]	; 0x24
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80013e6:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80013ea:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80013ee:	940f      	str	r4, [sp, #60]	; 0x3c
  Timing.CLKDivision = 16;
 80013f0:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  Timing.DataLatency = 17;
 80013f4:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80013f6:	f000 ff25 	bl	8002244 <HAL_SRAM_Init>
 80013fa:	4604      	mov	r4, r0
 80013fc:	b108      	cbz	r0, 8001402 <main+0x192>
 80013fe:	b672      	cpsid	i
  while (1)
 8001400:	e7fe      	b.n	8001400 <main+0x190>
  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001402:	4a48      	ldr	r2, [pc, #288]	; (8001524 <main+0x2b4>)
 8001404:	4e48      	ldr	r6, [pc, #288]	; (8001528 <main+0x2b8>)
 8001406:	69d3      	ldr	r3, [r2, #28]
	  HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel1, (uint32_t)(&platformImg[882 * y]), (uint32_t)0x60020000, 320);
 8001408:	4f48      	ldr	r7, [pc, #288]	; (800152c <main+0x2bc>)
  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 800140a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800140e:	61d3      	str	r3, [r2, #28]
  hdma_memtomem_dma1_channel1.XferCpltCallback = &XferCpltCallback;
 8001410:	4b47      	ldr	r3, [pc, #284]	; (8001530 <main+0x2c0>)
 8001412:	62ab      	str	r3, [r5, #40]	; 0x28
  LCD_INIT();
 8001414:	f7ff fe5c 	bl	80010d0 <LCD_INIT>
  LCD_Write_Cmd(0x36);
 8001418:	2036      	movs	r0, #54	; 0x36
 800141a:	f7ff fd45 	bl	8000ea8 <LCD_Write_Cmd>
  LCD_Write_Data(0x68);
 800141e:	2068      	movs	r0, #104	; 0x68
 8001420:	f7ff fd46 	bl	8000eb0 <LCD_Write_Data>
  LCD_OpenWindow(0, 0, 320, 240);
 8001424:	23f0      	movs	r3, #240	; 0xf0
 8001426:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800142a:	4621      	mov	r1, r4
 800142c:	4620      	mov	r0, r4
 800142e:	f7ff fe0d 	bl	800104c <LCD_OpenWindow>
  LCD_Write_Cmd ( CMD_SetPixel );
 8001432:	202c      	movs	r0, #44	; 0x2c
 8001434:	f7ff fd38 	bl	8000ea8 <LCD_Write_Cmd>
	  HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel1, (uint32_t)(&platformImg[882 * y]), (uint32_t)0x60020000, 320);
 8001438:	4631      	mov	r1, r6
 800143a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800143e:	463a      	mov	r2, r7
 8001440:	4628      	mov	r0, r5
 8001442:	f000 fa1f 	bl	8001884 <HAL_DMA_Start_IT>
  for (int y = 0; y < 216; y++) {
 8001446:	3401      	adds	r4, #1
	  HAL_Delay(1);
 8001448:	2001      	movs	r0, #1
 800144a:	f000 f965 	bl	8001718 <HAL_Delay>
  for (int y = 0; y < 216; y++) {
 800144e:	2cd8      	cmp	r4, #216	; 0xd8
 8001450:	f206 66e4 	addw	r6, r6, #1764	; 0x6e4
 8001454:	d1f0      	bne.n	8001438 <main+0x1c8>
  struct Kirby kirby = {
 8001456:	4b37      	ldr	r3, [pc, #220]	; (8001534 <main+0x2c4>)
 8001458:	ac09      	add	r4, sp, #36	; 0x24
 800145a:	f103 0510 	add.w	r5, r3, #16
 800145e:	4622      	mov	r2, r4
 8001460:	6818      	ldr	r0, [r3, #0]
 8001462:	6859      	ldr	r1, [r3, #4]
 8001464:	3308      	adds	r3, #8
 8001466:	c203      	stmia	r2!, {r0, r1}
 8001468:	42ab      	cmp	r3, r5
 800146a:	4614      	mov	r4, r2
 800146c:	d1f7      	bne.n	800145e <main+0x1ee>
	  inputLeft = HAL_GPIO_ReadPin(LEFT_GPIO_PORT, LEFT_GPIO_PIN);
 800146e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8001510 <main+0x2a0>
	  inputRight = HAL_GPIO_ReadPin(RIGHT_GPIO_PORT, RIGHT_GPIO_PIN);
 8001472:	f8df 9098 	ldr.w	r9, [pc, #152]	; 800150c <main+0x29c>
	  inputA = HAL_GPIO_ReadPin(A_BUTTON_GPIO_PORT, A_BUTTON_GPIO_PIN);
 8001476:	4f27      	ldr	r7, [pc, #156]	; (8001514 <main+0x2a4>)
	  inputLeft = HAL_GPIO_ReadPin(LEFT_GPIO_PORT, LEFT_GPIO_PIN);
 8001478:	2101      	movs	r1, #1
 800147a:	4640      	mov	r0, r8
 800147c:	f000 fc64 	bl	8001d48 <HAL_GPIO_ReadPin>
	  inputRight = HAL_GPIO_ReadPin(RIGHT_GPIO_PORT, RIGHT_GPIO_PIN);
 8001480:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	  inputLeft = HAL_GPIO_ReadPin(LEFT_GPIO_PORT, LEFT_GPIO_PIN);
 8001484:	4604      	mov	r4, r0
	  inputRight = HAL_GPIO_ReadPin(RIGHT_GPIO_PORT, RIGHT_GPIO_PIN);
 8001486:	4648      	mov	r0, r9
 8001488:	f000 fc5e 	bl	8001d48 <HAL_GPIO_ReadPin>
	  inputA = HAL_GPIO_ReadPin(A_BUTTON_GPIO_PORT, A_BUTTON_GPIO_PIN);
 800148c:	f44f 6180 	mov.w	r1, #1024	; 0x400
	  inputRight = HAL_GPIO_ReadPin(RIGHT_GPIO_PORT, RIGHT_GPIO_PIN);
 8001490:	4605      	mov	r5, r0
	  inputA = HAL_GPIO_ReadPin(A_BUTTON_GPIO_PORT, A_BUTTON_GPIO_PIN);
 8001492:	4638      	mov	r0, r7
 8001494:	f000 fc58 	bl	8001d48 <HAL_GPIO_ReadPin>
	  inputB = HAL_GPIO_ReadPin(B_BUTTON_GPIO_PORT, B_BUTTON_GPIO_PIN);
 8001498:	f44f 6100 	mov.w	r1, #2048	; 0x800
	  inputA = HAL_GPIO_ReadPin(A_BUTTON_GPIO_PORT, A_BUTTON_GPIO_PIN);
 800149c:	4606      	mov	r6, r0
	  inputB = HAL_GPIO_ReadPin(B_BUTTON_GPIO_PORT, B_BUTTON_GPIO_PIN);
 800149e:	4638      	mov	r0, r7
 80014a0:	f000 fc52 	bl	8001d48 <HAL_GPIO_ReadPin>
	  Kirby_updateState(&kirby, inputB, inputA, inputLeft, inputRight);
 80014a4:	4623      	mov	r3, r4
	  inputB = HAL_GPIO_ReadPin(B_BUTTON_GPIO_PORT, B_BUTTON_GPIO_PIN);
 80014a6:	4601      	mov	r1, r0
	  Kirby_updateState(&kirby, inputB, inputA, inputLeft, inputRight);
 80014a8:	4632      	mov	r2, r6
 80014aa:	9500      	str	r5, [sp, #0]
 80014ac:	a809      	add	r0, sp, #36	; 0x24
 80014ae:	f7ff fc69 	bl	8000d84 <Kirby_updateState>
	  if (inputLeft) {
 80014b2:	b1cc      	cbz	r4, 80014e8 <main+0x278>
		  Kirby_moveX(&kirby, LEFT);
 80014b4:	2101      	movs	r1, #1
		  Kirby_moveX(&kirby, RIGHT);
 80014b6:	a809      	add	r0, sp, #36	; 0x24
 80014b8:	f7ff fa20 	bl	80008fc <Kirby_moveX>
	  Kirby_moveY(&kirby);
 80014bc:	a809      	add	r0, sp, #36	; 0x24
 80014be:	f7ff fa99 	bl	80009f4 <Kirby_moveY>
	  Kirby_renderSprite(&kirby);
 80014c2:	a809      	add	r0, sp, #36	; 0x24
 80014c4:	f7ff fab6 	bl	8000a34 <Kirby_renderSprite>
	  if (showEnemy) {
 80014c8:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <main+0x2c8>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	b113      	cbz	r3, 80014d4 <main+0x264>
		  Enemy_updateEnemy(&kirby);
 80014ce:	a809      	add	r0, sp, #36	; 0x24
 80014d0:	f7fe ff9a 	bl	8000408 <Enemy_updateEnemy>
	  if (Kirby_checkWin(&kirby)) {
 80014d4:	a809      	add	r0, sp, #36	; 0x24
 80014d6:	f7ff fcb5 	bl	8000e44 <Kirby_checkWin>
 80014da:	b148      	cbz	r0, 80014f0 <main+0x280>
		  handleWin();
 80014dc:	f7ff fe74 	bl	80011c8 <handleWin>
}
 80014e0:	2000      	movs	r0, #0
 80014e2:	b010      	add	sp, #64	; 0x40
 80014e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  } else if (inputRight) {
 80014e8:	2d00      	cmp	r5, #0
 80014ea:	d0e7      	beq.n	80014bc <main+0x24c>
		  Kirby_moveX(&kirby, RIGHT);
 80014ec:	4621      	mov	r1, r4
 80014ee:	e7e2      	b.n	80014b6 <main+0x246>
	  } else if (Kirby_checkLose(&kirby)) {
 80014f0:	a809      	add	r0, sp, #36	; 0x24
 80014f2:	f7ff fcae 	bl	8000e52 <Kirby_checkLose>
 80014f6:	2800      	cmp	r0, #0
 80014f8:	d0be      	beq.n	8001478 <main+0x208>
		  handleLose();
 80014fa:	f7ff fe77 	bl	80011ec <handleLose>
		  break;
 80014fe:	e7ef      	b.n	80014e0 <main+0x270>
 8001500:	40021000 	.word	0x40021000
 8001504:	40011400 	.word	0x40011400
 8001508:	40011800 	.word	0x40011800
 800150c:	40011000 	.word	0x40011000
 8001510:	40010800 	.word	0x40010800
 8001514:	40010c00 	.word	0x40010c00
 8001518:	2000b8a0 	.word	0x2000b8a0
 800151c:	40020008 	.word	0x40020008
 8001520:	2000b8e4 	.word	0x2000b8e4
 8001524:	40010000 	.word	0x40010000
 8001528:	08003574 	.word	0x08003574
 800152c:	60020000 	.word	0x60020000
 8001530:	080011c5 	.word	0x080011c5
 8001534:	080023f4 	.word	0x080023f4
 8001538:	20000007 	.word	0x20000007

0800153c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800153c:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <HAL_MspInit+0x3c>)
{
 800153e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001540:	699a      	ldr	r2, [r3, #24]
 8001542:	f042 0201 	orr.w	r2, r2, #1
 8001546:	619a      	str	r2, [r3, #24]
 8001548:	699a      	ldr	r2, [r3, #24]
 800154a:	f002 0201 	and.w	r2, r2, #1
 800154e:	9200      	str	r2, [sp, #0]
 8001550:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	69da      	ldr	r2, [r3, #28]
 8001554:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001558:	61da      	str	r2, [r3, #28]
 800155a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800155c:	4a07      	ldr	r2, [pc, #28]	; (800157c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001562:	9301      	str	r3, [sp, #4]
 8001564:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001566:	6853      	ldr	r3, [r2, #4]
 8001568:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800156c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001570:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001572:	b002      	add	sp, #8
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40021000 	.word	0x40021000
 800157c:	40010000 	.word	0x40010000

08001580 <HAL_SRAM_MspInit>:

static void HAL_FSMC_MspInit(void){
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001580:	2300      	movs	r3, #0
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001582:	b530      	push	{r4, r5, lr}
 8001584:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001586:	9304      	str	r3, [sp, #16]
  if (FSMC_Initialized) {
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_SRAM_MspInit+0x54>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	b9fa      	cbnz	r2, 80015ce <HAL_SRAM_MspInit+0x4e>
  FSMC_Initialized = 1;
 800158e:	2201      	movs	r2, #1
 8001590:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <HAL_SRAM_MspInit+0x58>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2502      	movs	r5, #2
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001596:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001598:	2403      	movs	r4, #3
  __HAL_RCC_FSMC_CLK_ENABLE();
 800159a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800159e:	615a      	str	r2, [r3, #20]
 80015a0:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015a2:	480e      	ldr	r0, [pc, #56]	; (80015dc <HAL_SRAM_MspInit+0x5c>)
  __HAL_RCC_FSMC_CLK_ENABLE();
 80015a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a8:	9301      	str	r3, [sp, #4]
 80015aa:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	f64f 7380 	movw	r3, #65408	; 0xff80
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015b0:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	e9cd 3502 	strd	r3, r5, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015b6:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015b8:	f000 fade 	bl	8001b78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80015bc:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c0:	4807      	ldr	r0, [pc, #28]	; (80015e0 <HAL_SRAM_MspInit+0x60>)
 80015c2:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	e9cd 3502 	strd	r3, r5, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ca:	f000 fad5 	bl	8001b78 <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80015ce:	b007      	add	sp, #28
 80015d0:	bd30      	pop	{r4, r5, pc}
 80015d2:	bf00      	nop
 80015d4:	2000b92c 	.word	0x2000b92c
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40011800 	.word	0x40011800
 80015e0:	40011400 	.word	0x40011400

080015e4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <NMI_Handler>

080015e6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <HardFault_Handler>

080015e8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <MemManage_Handler>

080015ea <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <BusFault_Handler>

080015ec <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <UsageFault_Handler>

080015ee <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ee:	4770      	bx	lr

080015f0 <DebugMon_Handler>:
 80015f0:	4770      	bx	lr

080015f2 <PendSV_Handler>:
 80015f2:	4770      	bx	lr

080015f4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f4:	f000 b87e 	b.w	80016f4 <HAL_IncTick>

080015f8 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 80015f8:	4801      	ldr	r0, [pc, #4]	; (8001600 <DMA1_Channel1_IRQHandler+0x8>)
 80015fa:	f000 b97f 	b.w	80018fc <HAL_DMA_IRQHandler>
 80015fe:	bf00      	nop
 8001600:	2000b8a0 	.word	0x2000b8a0

08001604 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001604:	4770      	bx	lr
	...

08001608 <Tiles_getTileType>:
		{.xPos = 25*24, .yPos = 5*24}, {.xPos = 25*24, .yPos = 6*24}, {.xPos = 25*24, .yPos = 7*24}, {.xPos = 25*24, .yPos = 8*24}, // First big wall
		{.xPos = 28*24, .yPos = 5*24}, {.xPos = 28*24, .yPos = 6*24}, {.xPos = 28*24, .yPos = 7*24}, {.xPos = 28*24, .yPos = 8*24}, // Second big wall
		{.xPos = 29*24, .yPos = 5*24}, {.xPos = 30*24, .yPos = 5*24}, {.xPos = 31*24, .yPos = 5*24}, {.xPos = 32*24, .yPos = 5*24} // Goal patch
};

enum TileType Tiles_getTileType(uint16_t xPos, uint16_t yPos) {
 8001608:	b530      	push	{r4, r5, lr}
	/* Checks ground tiles */
	for (int i = 0; i < NUM_GROUND_TILES; i++) {
 800160a:	2500      	movs	r5, #0
 800160c:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <Tiles_getTileType+0x30>)
		uint16_t tileX = groundTiles[i].xPos;
 800160e:	881c      	ldrh	r4, [r3, #0]
		uint16_t tileY = groundTiles[i].yPos;
 8001610:	885a      	ldrh	r2, [r3, #2]
		if (xPos >= tileX && yPos >= tileY && xPos < (tileX + 24) && yPos < (tileY + 24)) {
 8001612:	4284      	cmp	r4, r0
 8001614:	d807      	bhi.n	8001626 <Tiles_getTileType+0x1e>
 8001616:	428a      	cmp	r2, r1
 8001618:	d805      	bhi.n	8001626 <Tiles_getTileType+0x1e>
 800161a:	3417      	adds	r4, #23
 800161c:	4284      	cmp	r4, r0
 800161e:	db02      	blt.n	8001626 <Tiles_getTileType+0x1e>
 8001620:	3217      	adds	r2, #23
 8001622:	428a      	cmp	r2, r1
 8001624:	da06      	bge.n	8001634 <Tiles_getTileType+0x2c>
	for (int i = 0; i < NUM_GROUND_TILES; i++) {
 8001626:	3501      	adds	r5, #1
 8001628:	2d29      	cmp	r5, #41	; 0x29
 800162a:	f103 0304 	add.w	r3, r3, #4
 800162e:	d1ee      	bne.n	800160e <Tiles_getTileType+0x6>
			return GROUND;
		}
	}

	/* Does not pass the test, remains as an air tile */
	return AIR;
 8001630:	2000      	movs	r0, #0
}
 8001632:	bd30      	pop	{r4, r5, pc}
			return GROUND;
 8001634:	2001      	movs	r0, #1
 8001636:	e7fc      	b.n	8001632 <Tiles_getTileType+0x2a>
 8001638:	08060bea 	.word	0x08060bea

0800163c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800163c:	480c      	ldr	r0, [pc, #48]	; (8001670 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800163e:	490d      	ldr	r1, [pc, #52]	; (8001674 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001640:	4a0d      	ldr	r2, [pc, #52]	; (8001678 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001644:	e002      	b.n	800164c <LoopCopyDataInit>

08001646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164a:	3304      	adds	r3, #4

0800164c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800164c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001650:	d3f9      	bcc.n	8001646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001652:	4a0a      	ldr	r2, [pc, #40]	; (800167c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001654:	4c0a      	ldr	r4, [pc, #40]	; (8001680 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001658:	e001      	b.n	800165e <LoopFillZerobss>

0800165a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800165c:	3204      	adds	r2, #4

0800165e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001660:	d3fb      	bcc.n	800165a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001662:	f7ff ffcf 	bl	8001604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001666:	f000 fe8d 	bl	8002384 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800166a:	f7ff fe01 	bl	8001270 <main>
  bx lr
 800166e:	4770      	bx	lr
  ldr r0, =_sdata
 8001670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001674:	2000b880 	.word	0x2000b880
  ldr r2, =_sidata
 8001678:	08060ca8 	.word	0x08060ca8
  ldr r2, =_sbss
 800167c:	2000b880 	.word	0x2000b880
  ldr r4, =_ebss
 8001680:	2000b934 	.word	0x2000b934

08001684 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001684:	e7fe      	b.n	8001684 <ADC1_2_IRQHandler>
	...

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <HAL_InitTick+0x3c>)
{
 800168c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800168e:	7818      	ldrb	r0, [r3, #0]
 8001690:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001694:	fbb3 f3f0 	udiv	r3, r3, r0
 8001698:	4a0b      	ldr	r2, [pc, #44]	; (80016c8 <HAL_InitTick+0x40>)
 800169a:	6810      	ldr	r0, [r2, #0]
 800169c:	fbb0 f0f3 	udiv	r0, r0, r3
 80016a0:	f000 f89e 	bl	80017e0 <HAL_SYSTICK_Config>
 80016a4:	4604      	mov	r4, r0
 80016a6:	b958      	cbnz	r0, 80016c0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a8:	2d0f      	cmp	r5, #15
 80016aa:	d809      	bhi.n	80016c0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ac:	4602      	mov	r2, r0
 80016ae:	4629      	mov	r1, r5
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f000 f854 	bl	8001760 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b8:	4620      	mov	r0, r4
 80016ba:	4b04      	ldr	r3, [pc, #16]	; (80016cc <HAL_InitTick+0x44>)
 80016bc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80016be:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80016c0:	2001      	movs	r0, #1
 80016c2:	e7fc      	b.n	80016be <HAL_InitTick+0x36>
 80016c4:	2000b878 	.word	0x2000b878
 80016c8:	2000b874 	.word	0x2000b874
 80016cc:	2000b87c 	.word	0x2000b87c

080016d0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016d0:	4a07      	ldr	r2, [pc, #28]	; (80016f0 <HAL_Init+0x20>)
{
 80016d2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016d4:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016d8:	f043 0310 	orr.w	r3, r3, #16
 80016dc:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016de:	f000 f82d 	bl	800173c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80016e2:	200f      	movs	r0, #15
 80016e4:	f7ff ffd0 	bl	8001688 <HAL_InitTick>
  HAL_MspInit();
 80016e8:	f7ff ff28 	bl	800153c <HAL_MspInit>
}
 80016ec:	2000      	movs	r0, #0
 80016ee:	bd08      	pop	{r3, pc}
 80016f0:	40022000 	.word	0x40022000

080016f4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80016f4:	4a03      	ldr	r2, [pc, #12]	; (8001704 <HAL_IncTick+0x10>)
 80016f6:	4b04      	ldr	r3, [pc, #16]	; (8001708 <HAL_IncTick+0x14>)
 80016f8:	6811      	ldr	r1, [r2, #0]
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	440b      	add	r3, r1
 80016fe:	6013      	str	r3, [r2, #0]
}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	2000b930 	.word	0x2000b930
 8001708:	2000b878 	.word	0x2000b878

0800170c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800170c:	4b01      	ldr	r3, [pc, #4]	; (8001714 <HAL_GetTick+0x8>)
 800170e:	6818      	ldr	r0, [r3, #0]
}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	2000b930 	.word	0x2000b930

08001718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001718:	b538      	push	{r3, r4, r5, lr}
 800171a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800171c:	f7ff fff6 	bl	800170c <HAL_GetTick>
 8001720:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001722:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001724:	bf1e      	ittt	ne
 8001726:	4b04      	ldrne	r3, [pc, #16]	; (8001738 <HAL_Delay+0x20>)
 8001728:	781b      	ldrbne	r3, [r3, #0]
 800172a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800172c:	f7ff ffee 	bl	800170c <HAL_GetTick>
 8001730:	1b43      	subs	r3, r0, r5
 8001732:	42a3      	cmp	r3, r4
 8001734:	d3fa      	bcc.n	800172c <HAL_Delay+0x14>
  {
  }
}
 8001736:	bd38      	pop	{r3, r4, r5, pc}
 8001738:	2000b878 	.word	0x2000b878

0800173c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800173c:	4907      	ldr	r1, [pc, #28]	; (800175c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800173e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001740:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001742:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001746:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800174a:	0412      	lsls	r2, r2, #16
 800174c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800174e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001750:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001758:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800175a:	4770      	bx	lr
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001760:	4b16      	ldr	r3, [pc, #88]	; (80017bc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001762:	b530      	push	{r4, r5, lr}
 8001764:	68dc      	ldr	r4, [r3, #12]
 8001766:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800176a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800176e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001770:	2b04      	cmp	r3, #4
 8001772:	bf28      	it	cs
 8001774:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001776:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177c:	bf98      	it	ls
 800177e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001784:	bf88      	it	hi
 8001786:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	ea21 0303 	bic.w	r3, r1, r3
 800178c:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800178e:	fa05 f404 	lsl.w	r4, r5, r4
 8001792:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001796:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179c:	bfac      	ite	ge
 800179e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a2:	4a07      	ldrlt	r2, [pc, #28]	; (80017c0 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	bfab      	itete	ge
 80017ac:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b8:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80017ba:	bd30      	pop	{r4, r5, pc}
 80017bc:	e000ed00 	.word	0xe000ed00
 80017c0:	e000ed14 	.word	0xe000ed14

080017c4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80017c4:	2800      	cmp	r0, #0
 80017c6:	db08      	blt.n	80017da <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017c8:	2301      	movs	r3, #1
 80017ca:	0942      	lsrs	r2, r0, #5
 80017cc:	f000 001f 	and.w	r0, r0, #31
 80017d0:	fa03 f000 	lsl.w	r0, r3, r0
 80017d4:	4b01      	ldr	r3, [pc, #4]	; (80017dc <HAL_NVIC_EnableIRQ+0x18>)
 80017d6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80017da:	4770      	bx	lr
 80017dc:	e000e100 	.word	0xe000e100

080017e0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e0:	3801      	subs	r0, #1
 80017e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80017e6:	d20b      	bcs.n	8001800 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ec:	21f0      	movs	r1, #240	; 0xf0
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017fa:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017fe:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001800:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001808:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800180a:	2800      	cmp	r0, #0
 800180c:	d030      	beq.n	8001870 <HAL_DMA_Init+0x68>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800180e:	6801      	ldr	r1, [r0, #0]
 8001810:	4b18      	ldr	r3, [pc, #96]	; (8001874 <HAL_DMA_Init+0x6c>)
 8001812:	2414      	movs	r4, #20
 8001814:	4299      	cmp	r1, r3
 8001816:	d823      	bhi.n	8001860 <HAL_DMA_Init+0x58>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001818:	4a17      	ldr	r2, [pc, #92]	; (8001878 <HAL_DMA_Init+0x70>)
    hdma->DmaBaseAddress = DMA1;
 800181a:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800181e:	440a      	add	r2, r1
 8001820:	fbb2 f2f4 	udiv	r2, r2, r4
 8001824:	0092      	lsls	r2, r2, #2
 8001826:	6402      	str	r2, [r0, #64]	; 0x40
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 8001828:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800182a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 800182e:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001830:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 8001832:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001834:	4323      	orrs	r3, r4
 8001836:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001838:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800183c:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800183e:	6944      	ldr	r4, [r0, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001840:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001844:	4323      	orrs	r3, r4
 8001846:	6984      	ldr	r4, [r0, #24]
 8001848:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800184a:	69c4      	ldr	r4, [r0, #28]
 800184c:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800184e:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001850:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001852:	f44f 7280 	mov.w	r2, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001856:	2300      	movs	r3, #0
  hdma->Lock = HAL_UNLOCKED;
 8001858:	8402      	strh	r2, [r0, #32]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800185a:	6383      	str	r3, [r0, #56]	; 0x38

  return HAL_OK;
 800185c:	4618      	mov	r0, r3
}
 800185e:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_DMA_Init+0x74>)
 8001862:	440b      	add	r3, r1
 8001864:	fbb3 f3f4 	udiv	r3, r3, r4
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <HAL_DMA_Init+0x78>)
 800186e:	e7db      	b.n	8001828 <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 8001870:	2001      	movs	r0, #1
 8001872:	e7f4      	b.n	800185e <HAL_DMA_Init+0x56>
 8001874:	40020407 	.word	0x40020407
 8001878:	bffdfff8 	.word	0xbffdfff8
 800187c:	bffdfbf8 	.word	0xbffdfbf8
 8001880:	40020400 	.word	0x40020400

08001884 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001884:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001886:	f890 4020 	ldrb.w	r4, [r0, #32]
 800188a:	2c01      	cmp	r4, #1
 800188c:	d034      	beq.n	80018f8 <HAL_DMA_Start_IT+0x74>
 800188e:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001890:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001894:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001898:	42a5      	cmp	r5, r4
 800189a:	f04f 0600 	mov.w	r6, #0
 800189e:	f04f 0402 	mov.w	r4, #2
 80018a2:	d127      	bne.n	80018f4 <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018a4:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018a8:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018aa:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80018ac:	6826      	ldr	r6, [r4, #0]
 80018ae:	f026 0601 	bic.w	r6, r6, #1
 80018b2:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018b4:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 80018b8:	40bd      	lsls	r5, r7
 80018ba:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018bc:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018be:	6843      	ldr	r3, [r0, #4]
 80018c0:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 80018c2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018c4:	bf0b      	itete	eq
 80018c6:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80018c8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80018ca:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80018cc:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80018ce:	b14b      	cbz	r3, 80018e4 <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018d0:	6823      	ldr	r3, [r4, #0]
 80018d2:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 80018d6:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018d8:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80018da:	6823      	ldr	r3, [r4, #0]
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6023      	str	r3, [r4, #0]
}
 80018e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018e4:	6823      	ldr	r3, [r4, #0]
 80018e6:	f023 0304 	bic.w	r3, r3, #4
 80018ea:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018ec:	6823      	ldr	r3, [r4, #0]
 80018ee:	f043 030a 	orr.w	r3, r3, #10
 80018f2:	e7f0      	b.n	80018d6 <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 80018f4:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80018f8:	2002      	movs	r0, #2
 80018fa:	e7f2      	b.n	80018e2 <HAL_DMA_Start_IT+0x5e>

080018fc <HAL_DMA_IRQHandler>:
{
 80018fc:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80018fe:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001900:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001902:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001904:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001906:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001908:	4095      	lsls	r5, r2
 800190a:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 800190c:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800190e:	f000 8085 	beq.w	8001a1c <HAL_DMA_IRQHandler+0x120>
 8001912:	074d      	lsls	r5, r1, #29
 8001914:	f140 8082 	bpl.w	8001a1c <HAL_DMA_IRQHandler+0x120>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	4991      	ldr	r1, [pc, #580]	; (8001b60 <HAL_DMA_IRQHandler+0x264>)
 800191c:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800191e:	bf5e      	ittt	pl
 8001920:	681a      	ldrpl	r2, [r3, #0]
 8001922:	f022 0204 	bicpl.w	r2, r2, #4
 8001926:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001928:	4a8e      	ldr	r2, [pc, #568]	; (8001b64 <HAL_DMA_IRQHandler+0x268>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d93e      	bls.n	80019ac <HAL_DMA_IRQHandler+0xb0>
 800192e:	428b      	cmp	r3, r1
 8001930:	d035      	beq.n	800199e <HAL_DMA_IRQHandler+0xa2>
 8001932:	3114      	adds	r1, #20
 8001934:	428b      	cmp	r3, r1
 8001936:	d034      	beq.n	80019a2 <HAL_DMA_IRQHandler+0xa6>
 8001938:	3114      	adds	r1, #20
 800193a:	428b      	cmp	r3, r1
 800193c:	d033      	beq.n	80019a6 <HAL_DMA_IRQHandler+0xaa>
 800193e:	3114      	adds	r1, #20
 8001940:	428b      	cmp	r3, r1
 8001942:	d020      	beq.n	8001986 <HAL_DMA_IRQHandler+0x8a>
 8001944:	3114      	adds	r1, #20
 8001946:	428b      	cmp	r3, r1
 8001948:	d020      	beq.n	800198c <HAL_DMA_IRQHandler+0x90>
 800194a:	3114      	adds	r1, #20
 800194c:	428b      	cmp	r3, r1
 800194e:	d020      	beq.n	8001992 <HAL_DMA_IRQHandler+0x96>
 8001950:	4293      	cmp	r3, r2
 8001952:	d021      	beq.n	8001998 <HAL_DMA_IRQHandler+0x9c>
 8001954:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001958:	4293      	cmp	r3, r2
 800195a:	d020      	beq.n	800199e <HAL_DMA_IRQHandler+0xa2>
 800195c:	3214      	adds	r2, #20
 800195e:	4293      	cmp	r3, r2
 8001960:	d01f      	beq.n	80019a2 <HAL_DMA_IRQHandler+0xa6>
 8001962:	3214      	adds	r2, #20
 8001964:	4293      	cmp	r3, r2
 8001966:	d01e      	beq.n	80019a6 <HAL_DMA_IRQHandler+0xaa>
 8001968:	3214      	adds	r2, #20
 800196a:	4293      	cmp	r3, r2
 800196c:	bf14      	ite	ne
 800196e:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8001972:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 8001976:	4a7c      	ldr	r2, [pc, #496]	; (8001b68 <HAL_DMA_IRQHandler+0x26c>)
 8001978:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800197a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 80ed 	beq.w	8001b5c <HAL_DMA_IRQHandler+0x260>
}
 8001982:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001984:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001986:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800198a:	e7f4      	b.n	8001976 <HAL_DMA_IRQHandler+0x7a>
 800198c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001990:	e7f1      	b.n	8001976 <HAL_DMA_IRQHandler+0x7a>
 8001992:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001996:	e7ee      	b.n	8001976 <HAL_DMA_IRQHandler+0x7a>
 8001998:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800199c:	e7eb      	b.n	8001976 <HAL_DMA_IRQHandler+0x7a>
 800199e:	2304      	movs	r3, #4
 80019a0:	e7e9      	b.n	8001976 <HAL_DMA_IRQHandler+0x7a>
 80019a2:	2340      	movs	r3, #64	; 0x40
 80019a4:	e7e7      	b.n	8001976 <HAL_DMA_IRQHandler+0x7a>
 80019a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019aa:	e7e4      	b.n	8001976 <HAL_DMA_IRQHandler+0x7a>
 80019ac:	428b      	cmp	r3, r1
 80019ae:	d02e      	beq.n	8001a0e <HAL_DMA_IRQHandler+0x112>
 80019b0:	496e      	ldr	r1, [pc, #440]	; (8001b6c <HAL_DMA_IRQHandler+0x270>)
 80019b2:	428b      	cmp	r3, r1
 80019b4:	d02d      	beq.n	8001a12 <HAL_DMA_IRQHandler+0x116>
 80019b6:	3114      	adds	r1, #20
 80019b8:	428b      	cmp	r3, r1
 80019ba:	d02c      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x11a>
 80019bc:	3114      	adds	r1, #20
 80019be:	428b      	cmp	r3, r1
 80019c0:	d019      	beq.n	80019f6 <HAL_DMA_IRQHandler+0xfa>
 80019c2:	3114      	adds	r1, #20
 80019c4:	428b      	cmp	r3, r1
 80019c6:	d019      	beq.n	80019fc <HAL_DMA_IRQHandler+0x100>
 80019c8:	3114      	adds	r1, #20
 80019ca:	428b      	cmp	r3, r1
 80019cc:	d019      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x106>
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d01a      	beq.n	8001a08 <HAL_DMA_IRQHandler+0x10c>
 80019d2:	4a67      	ldr	r2, [pc, #412]	; (8001b70 <HAL_DMA_IRQHandler+0x274>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d01a      	beq.n	8001a0e <HAL_DMA_IRQHandler+0x112>
 80019d8:	3214      	adds	r2, #20
 80019da:	4293      	cmp	r3, r2
 80019dc:	d019      	beq.n	8001a12 <HAL_DMA_IRQHandler+0x116>
 80019de:	3214      	adds	r2, #20
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d018      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x11a>
 80019e4:	3214      	adds	r2, #20
 80019e6:	4293      	cmp	r3, r2
 80019e8:	bf14      	ite	ne
 80019ea:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 80019ee:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 80019f2:	4a60      	ldr	r2, [pc, #384]	; (8001b74 <HAL_DMA_IRQHandler+0x278>)
 80019f4:	e7c0      	b.n	8001978 <HAL_DMA_IRQHandler+0x7c>
 80019f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019fa:	e7fa      	b.n	80019f2 <HAL_DMA_IRQHandler+0xf6>
 80019fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a00:	e7f7      	b.n	80019f2 <HAL_DMA_IRQHandler+0xf6>
 8001a02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a06:	e7f4      	b.n	80019f2 <HAL_DMA_IRQHandler+0xf6>
 8001a08:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a0c:	e7f1      	b.n	80019f2 <HAL_DMA_IRQHandler+0xf6>
 8001a0e:	2304      	movs	r3, #4
 8001a10:	e7ef      	b.n	80019f2 <HAL_DMA_IRQHandler+0xf6>
 8001a12:	2340      	movs	r3, #64	; 0x40
 8001a14:	e7ed      	b.n	80019f2 <HAL_DMA_IRQHandler+0xf6>
 8001a16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a1a:	e7ea      	b.n	80019f2 <HAL_DMA_IRQHandler+0xf6>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a1c:	2502      	movs	r5, #2
 8001a1e:	4095      	lsls	r5, r2
 8001a20:	4225      	tst	r5, r4
 8001a22:	f000 8087 	beq.w	8001b34 <HAL_DMA_IRQHandler+0x238>
 8001a26:	078d      	lsls	r5, r1, #30
 8001a28:	f140 8084 	bpl.w	8001b34 <HAL_DMA_IRQHandler+0x238>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	0694      	lsls	r4, r2, #26
 8001a30:	d406      	bmi.n	8001a40 <HAL_DMA_IRQHandler+0x144>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	f022 020a 	bic.w	r2, r2, #10
 8001a38:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a40:	4a48      	ldr	r2, [pc, #288]	; (8001b64 <HAL_DMA_IRQHandler+0x268>)
 8001a42:	4947      	ldr	r1, [pc, #284]	; (8001b60 <HAL_DMA_IRQHandler+0x264>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d93d      	bls.n	8001ac4 <HAL_DMA_IRQHandler+0x1c8>
 8001a48:	428b      	cmp	r3, r1
 8001a4a:	d034      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x1ba>
 8001a4c:	3114      	adds	r1, #20
 8001a4e:	428b      	cmp	r3, r1
 8001a50:	d033      	beq.n	8001aba <HAL_DMA_IRQHandler+0x1be>
 8001a52:	3114      	adds	r1, #20
 8001a54:	428b      	cmp	r3, r1
 8001a56:	d032      	beq.n	8001abe <HAL_DMA_IRQHandler+0x1c2>
 8001a58:	3114      	adds	r1, #20
 8001a5a:	428b      	cmp	r3, r1
 8001a5c:	d01f      	beq.n	8001a9e <HAL_DMA_IRQHandler+0x1a2>
 8001a5e:	3114      	adds	r1, #20
 8001a60:	428b      	cmp	r3, r1
 8001a62:	d01f      	beq.n	8001aa4 <HAL_DMA_IRQHandler+0x1a8>
 8001a64:	3114      	adds	r1, #20
 8001a66:	428b      	cmp	r3, r1
 8001a68:	d01f      	beq.n	8001aaa <HAL_DMA_IRQHandler+0x1ae>
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d020      	beq.n	8001ab0 <HAL_DMA_IRQHandler+0x1b4>
 8001a6e:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d01f      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x1ba>
 8001a76:	3214      	adds	r2, #20
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d01e      	beq.n	8001aba <HAL_DMA_IRQHandler+0x1be>
 8001a7c:	3214      	adds	r2, #20
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d01d      	beq.n	8001abe <HAL_DMA_IRQHandler+0x1c2>
 8001a82:	3214      	adds	r2, #20
 8001a84:	4293      	cmp	r3, r2
 8001a86:	bf14      	ite	ne
 8001a88:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8001a8c:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 8001a90:	4a35      	ldr	r2, [pc, #212]	; (8001b68 <HAL_DMA_IRQHandler+0x26c>)
 8001a92:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001a94:	2300      	movs	r3, #0
 8001a96:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001a9a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001a9c:	e76e      	b.n	800197c <HAL_DMA_IRQHandler+0x80>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aa2:	e7f5      	b.n	8001a90 <HAL_DMA_IRQHandler+0x194>
 8001aa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aa8:	e7f2      	b.n	8001a90 <HAL_DMA_IRQHandler+0x194>
 8001aaa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001aae:	e7ef      	b.n	8001a90 <HAL_DMA_IRQHandler+0x194>
 8001ab0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ab4:	e7ec      	b.n	8001a90 <HAL_DMA_IRQHandler+0x194>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e7ea      	b.n	8001a90 <HAL_DMA_IRQHandler+0x194>
 8001aba:	2320      	movs	r3, #32
 8001abc:	e7e8      	b.n	8001a90 <HAL_DMA_IRQHandler+0x194>
 8001abe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ac2:	e7e5      	b.n	8001a90 <HAL_DMA_IRQHandler+0x194>
 8001ac4:	428b      	cmp	r3, r1
 8001ac6:	d02e      	beq.n	8001b26 <HAL_DMA_IRQHandler+0x22a>
 8001ac8:	4928      	ldr	r1, [pc, #160]	; (8001b6c <HAL_DMA_IRQHandler+0x270>)
 8001aca:	428b      	cmp	r3, r1
 8001acc:	d02d      	beq.n	8001b2a <HAL_DMA_IRQHandler+0x22e>
 8001ace:	3114      	adds	r1, #20
 8001ad0:	428b      	cmp	r3, r1
 8001ad2:	d02c      	beq.n	8001b2e <HAL_DMA_IRQHandler+0x232>
 8001ad4:	3114      	adds	r1, #20
 8001ad6:	428b      	cmp	r3, r1
 8001ad8:	d019      	beq.n	8001b0e <HAL_DMA_IRQHandler+0x212>
 8001ada:	3114      	adds	r1, #20
 8001adc:	428b      	cmp	r3, r1
 8001ade:	d019      	beq.n	8001b14 <HAL_DMA_IRQHandler+0x218>
 8001ae0:	3114      	adds	r1, #20
 8001ae2:	428b      	cmp	r3, r1
 8001ae4:	d019      	beq.n	8001b1a <HAL_DMA_IRQHandler+0x21e>
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d01a      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x224>
 8001aea:	4a21      	ldr	r2, [pc, #132]	; (8001b70 <HAL_DMA_IRQHandler+0x274>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d01a      	beq.n	8001b26 <HAL_DMA_IRQHandler+0x22a>
 8001af0:	3214      	adds	r2, #20
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d019      	beq.n	8001b2a <HAL_DMA_IRQHandler+0x22e>
 8001af6:	3214      	adds	r2, #20
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d018      	beq.n	8001b2e <HAL_DMA_IRQHandler+0x232>
 8001afc:	3214      	adds	r2, #20
 8001afe:	4293      	cmp	r3, r2
 8001b00:	bf14      	ite	ne
 8001b02:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8001b06:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 8001b0a:	4a1a      	ldr	r2, [pc, #104]	; (8001b74 <HAL_DMA_IRQHandler+0x278>)
 8001b0c:	e7c1      	b.n	8001a92 <HAL_DMA_IRQHandler+0x196>
 8001b0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b12:	e7fa      	b.n	8001b0a <HAL_DMA_IRQHandler+0x20e>
 8001b14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b18:	e7f7      	b.n	8001b0a <HAL_DMA_IRQHandler+0x20e>
 8001b1a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b1e:	e7f4      	b.n	8001b0a <HAL_DMA_IRQHandler+0x20e>
 8001b20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b24:	e7f1      	b.n	8001b0a <HAL_DMA_IRQHandler+0x20e>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e7ef      	b.n	8001b0a <HAL_DMA_IRQHandler+0x20e>
 8001b2a:	2320      	movs	r3, #32
 8001b2c:	e7ed      	b.n	8001b0a <HAL_DMA_IRQHandler+0x20e>
 8001b2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b32:	e7ea      	b.n	8001b0a <HAL_DMA_IRQHandler+0x20e>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001b34:	2508      	movs	r5, #8
 8001b36:	4095      	lsls	r5, r2
 8001b38:	4225      	tst	r5, r4
 8001b3a:	d00f      	beq.n	8001b5c <HAL_DMA_IRQHandler+0x260>
 8001b3c:	0709      	lsls	r1, r1, #28
 8001b3e:	d50d      	bpl.n	8001b5c <HAL_DMA_IRQHandler+0x260>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b40:	6819      	ldr	r1, [r3, #0]
 8001b42:	f021 010e 	bic.w	r1, r1, #14
 8001b46:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b48:	2301      	movs	r3, #1
 8001b4a:	fa03 f202 	lsl.w	r2, r3, r2
 8001b4e:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b50:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001b52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b56:	8403      	strh	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001b58:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001b5a:	e70f      	b.n	800197c <HAL_DMA_IRQHandler+0x80>
}
 8001b5c:	bc70      	pop	{r4, r5, r6}
 8001b5e:	4770      	bx	lr
 8001b60:	40020008 	.word	0x40020008
 8001b64:	40020080 	.word	0x40020080
 8001b68:	40020400 	.word	0x40020400
 8001b6c:	4002001c 	.word	0x4002001c
 8001b70:	40020408 	.word	0x40020408
 8001b74:	40020000 	.word	0x40020000

08001b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b7c:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8001b7e:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b80:	4f6a      	ldr	r7, [pc, #424]	; (8001d2c <HAL_GPIO_Init+0x1b4>)
 8001b82:	4b6b      	ldr	r3, [pc, #428]	; (8001d30 <HAL_GPIO_Init+0x1b8>)
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b84:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8001d34 <HAL_GPIO_Init+0x1bc>
      switch (GPIO_Init->Mode)
 8001b88:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 8001d38 <HAL_GPIO_Init+0x1c0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b8c:	680c      	ldr	r4, [r1, #0]
 8001b8e:	fa34 f506 	lsrs.w	r5, r4, r6
 8001b92:	d102      	bne.n	8001b9a <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8001b94:	b003      	add	sp, #12
 8001b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8001b9a:	f04f 0801 	mov.w	r8, #1
 8001b9e:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ba2:	ea04 0508 	and.w	r5, r4, r8
    if (iocurrent == ioposition)
 8001ba6:	ea38 0404 	bics.w	r4, r8, r4
 8001baa:	f040 8081 	bne.w	8001cb0 <HAL_GPIO_Init+0x138>
      switch (GPIO_Init->Mode)
 8001bae:	684c      	ldr	r4, [r1, #4]
 8001bb0:	2c03      	cmp	r4, #3
 8001bb2:	d807      	bhi.n	8001bc4 <HAL_GPIO_Init+0x4c>
 8001bb4:	3c01      	subs	r4, #1
 8001bb6:	2c02      	cmp	r4, #2
 8001bb8:	f200 808c 	bhi.w	8001cd4 <HAL_GPIO_Init+0x15c>
 8001bbc:	e8df f004 	tbb	[pc, r4]
 8001bc0:	a29d      	.short	0xa29d
 8001bc2:	a8          	.byte	0xa8
 8001bc3:	00          	.byte	0x00
 8001bc4:	2c12      	cmp	r4, #18
 8001bc6:	f000 80a0 	beq.w	8001d0a <HAL_GPIO_Init+0x192>
 8001bca:	d873      	bhi.n	8001cb4 <HAL_GPIO_Init+0x13c>
 8001bcc:	2c11      	cmp	r4, #17
 8001bce:	f000 8096 	beq.w	8001cfe <HAL_GPIO_Init+0x186>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bd2:	2dff      	cmp	r5, #255	; 0xff
 8001bd4:	bf98      	it	ls
 8001bd6:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bd8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bdc:	bf88      	it	hi
 8001bde:	f100 0a04 	addhi.w	sl, r0, #4
 8001be2:	ea4f 0486 	mov.w	r4, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001be6:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bea:	bf88      	it	hi
 8001bec:	3c20      	subhi	r4, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bee:	fa09 fb04 	lsl.w	fp, r9, r4
 8001bf2:	ea28 080b 	bic.w	r8, r8, fp
 8001bf6:	fa02 f404 	lsl.w	r4, r2, r4
 8001bfa:	ea48 0404 	orr.w	r4, r8, r4
 8001bfe:	f8ca 4000 	str.w	r4, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c02:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001c06:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001c0a:	d051      	beq.n	8001cb0 <HAL_GPIO_Init+0x138>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c0c:	69bc      	ldr	r4, [r7, #24]
 8001c0e:	f026 0803 	bic.w	r8, r6, #3
 8001c12:	f044 0401 	orr.w	r4, r4, #1
 8001c16:	61bc      	str	r4, [r7, #24]
 8001c18:	69bc      	ldr	r4, [r7, #24]
 8001c1a:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001c1e:	f004 0401 	and.w	r4, r4, #1
 8001c22:	9401      	str	r4, [sp, #4]
 8001c24:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c28:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c2c:	9c01      	ldr	r4, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c2e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001c32:	f8d8 4008 	ldr.w	r4, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c36:	fa09 f90b 	lsl.w	r9, r9, fp
 8001c3a:	ea24 0909 	bic.w	r9, r4, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c3e:	4c3f      	ldr	r4, [pc, #252]	; (8001d3c <HAL_GPIO_Init+0x1c4>)
 8001c40:	42a0      	cmp	r0, r4
 8001c42:	d069      	beq.n	8001d18 <HAL_GPIO_Init+0x1a0>
 8001c44:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c48:	42a0      	cmp	r0, r4
 8001c4a:	d067      	beq.n	8001d1c <HAL_GPIO_Init+0x1a4>
 8001c4c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c50:	42a0      	cmp	r0, r4
 8001c52:	d065      	beq.n	8001d20 <HAL_GPIO_Init+0x1a8>
 8001c54:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c58:	42a0      	cmp	r0, r4
 8001c5a:	d063      	beq.n	8001d24 <HAL_GPIO_Init+0x1ac>
 8001c5c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c60:	42a0      	cmp	r0, r4
 8001c62:	d061      	beq.n	8001d28 <HAL_GPIO_Init+0x1b0>
 8001c64:	4560      	cmp	r0, ip
 8001c66:	bf0c      	ite	eq
 8001c68:	2405      	moveq	r4, #5
 8001c6a:	2406      	movne	r4, #6
 8001c6c:	fa04 f40b 	lsl.w	r4, r4, fp
 8001c70:	ea44 0409 	orr.w	r4, r4, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001c74:	f8c8 4008 	str.w	r4, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8001c78:	681c      	ldr	r4, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c7a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001c7e:	bf14      	ite	ne
 8001c80:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c82:	43ac      	biceq	r4, r5
 8001c84:	601c      	str	r4, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8001c86:	685c      	ldr	r4, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c88:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001c8c:	bf14      	ite	ne
 8001c8e:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c90:	43ac      	biceq	r4, r5
 8001c92:	605c      	str	r4, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c94:	689c      	ldr	r4, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c96:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c9a:	bf14      	ite	ne
 8001c9c:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c9e:	43ac      	biceq	r4, r5
 8001ca0:	609c      	str	r4, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ca2:	68dc      	ldr	r4, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ca4:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ca8:	bf14      	ite	ne
 8001caa:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cac:	43ac      	biceq	r4, r5
 8001cae:	60dc      	str	r4, [r3, #12]
	position++;
 8001cb0:	3601      	adds	r6, #1
 8001cb2:	e76b      	b.n	8001b8c <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8001cb4:	4574      	cmp	r4, lr
 8001cb6:	d00d      	beq.n	8001cd4 <HAL_GPIO_Init+0x15c>
 8001cb8:	d818      	bhi.n	8001cec <HAL_GPIO_Init+0x174>
 8001cba:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8001d40 <HAL_GPIO_Init+0x1c8>
 8001cbe:	454c      	cmp	r4, r9
 8001cc0:	d008      	beq.n	8001cd4 <HAL_GPIO_Init+0x15c>
 8001cc2:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8001cc6:	454c      	cmp	r4, r9
 8001cc8:	d004      	beq.n	8001cd4 <HAL_GPIO_Init+0x15c>
 8001cca:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8001cce:	454c      	cmp	r4, r9
 8001cd0:	f47f af7f 	bne.w	8001bd2 <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cd4:	688a      	ldr	r2, [r1, #8]
 8001cd6:	b1ea      	cbz	r2, 8001d14 <HAL_GPIO_Init+0x19c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cd8:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001cda:	bf08      	it	eq
 8001cdc:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ce0:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8001ce4:	bf18      	it	ne
 8001ce6:	f8c0 8014 	strne.w	r8, [r0, #20]
 8001cea:	e772      	b.n	8001bd2 <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 8001cec:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8001d44 <HAL_GPIO_Init+0x1cc>
 8001cf0:	454c      	cmp	r4, r9
 8001cf2:	d0ef      	beq.n	8001cd4 <HAL_GPIO_Init+0x15c>
 8001cf4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001cf8:	e7e9      	b.n	8001cce <HAL_GPIO_Init+0x156>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cfa:	68ca      	ldr	r2, [r1, #12]
          break;
 8001cfc:	e769      	b.n	8001bd2 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cfe:	68ca      	ldr	r2, [r1, #12]
 8001d00:	3204      	adds	r2, #4
          break;
 8001d02:	e766      	b.n	8001bd2 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d04:	68ca      	ldr	r2, [r1, #12]
 8001d06:	3208      	adds	r2, #8
          break;
 8001d08:	e763      	b.n	8001bd2 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d0a:	68ca      	ldr	r2, [r1, #12]
 8001d0c:	320c      	adds	r2, #12
          break;
 8001d0e:	e760      	b.n	8001bd2 <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 8001d10:	2200      	movs	r2, #0
 8001d12:	e75e      	b.n	8001bd2 <HAL_GPIO_Init+0x5a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d14:	2204      	movs	r2, #4
 8001d16:	e75c      	b.n	8001bd2 <HAL_GPIO_Init+0x5a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d18:	2400      	movs	r4, #0
 8001d1a:	e7a7      	b.n	8001c6c <HAL_GPIO_Init+0xf4>
 8001d1c:	2401      	movs	r4, #1
 8001d1e:	e7a5      	b.n	8001c6c <HAL_GPIO_Init+0xf4>
 8001d20:	2402      	movs	r4, #2
 8001d22:	e7a3      	b.n	8001c6c <HAL_GPIO_Init+0xf4>
 8001d24:	2403      	movs	r4, #3
 8001d26:	e7a1      	b.n	8001c6c <HAL_GPIO_Init+0xf4>
 8001d28:	2404      	movs	r4, #4
 8001d2a:	e79f      	b.n	8001c6c <HAL_GPIO_Init+0xf4>
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40010400 	.word	0x40010400
 8001d34:	40011c00 	.word	0x40011c00
 8001d38:	10220000 	.word	0x10220000
 8001d3c:	40010800 	.word	0x40010800
 8001d40:	10120000 	.word	0x10120000
 8001d44:	10310000 	.word	0x10310000

08001d48 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d48:	6883      	ldr	r3, [r0, #8]
 8001d4a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001d4c:	bf14      	ite	ne
 8001d4e:	2001      	movne	r0, #1
 8001d50:	2000      	moveq	r0, #0
 8001d52:	4770      	bx	lr

08001d54 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d54:	b10a      	cbz	r2, 8001d5a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d56:	6101      	str	r1, [r0, #16]
  }
}
 8001d58:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d5a:	0409      	lsls	r1, r1, #16
 8001d5c:	e7fb      	b.n	8001d56 <HAL_GPIO_WritePin+0x2>
	...

08001d60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d64:	4605      	mov	r5, r0
 8001d66:	b338      	cbz	r0, 8001db8 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d68:	6803      	ldr	r3, [r0, #0]
 8001d6a:	07db      	lsls	r3, r3, #31
 8001d6c:	d410      	bmi.n	8001d90 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6e:	682b      	ldr	r3, [r5, #0]
 8001d70:	079f      	lsls	r7, r3, #30
 8001d72:	d45e      	bmi.n	8001e32 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d74:	682b      	ldr	r3, [r5, #0]
 8001d76:	0719      	lsls	r1, r3, #28
 8001d78:	f100 8095 	bmi.w	8001ea6 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d7c:	682b      	ldr	r3, [r5, #0]
 8001d7e:	075a      	lsls	r2, r3, #29
 8001d80:	f100 80c1 	bmi.w	8001f06 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d84:	69e8      	ldr	r0, [r5, #28]
 8001d86:	2800      	cmp	r0, #0
 8001d88:	f040 812c 	bne.w	8001fe4 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	e029      	b.n	8001de4 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d90:	4c90      	ldr	r4, [pc, #576]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001d92:	6863      	ldr	r3, [r4, #4]
 8001d94:	f003 030c 	and.w	r3, r3, #12
 8001d98:	2b04      	cmp	r3, #4
 8001d9a:	d007      	beq.n	8001dac <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d9c:	6863      	ldr	r3, [r4, #4]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d10a      	bne.n	8001dbc <HAL_RCC_OscConfig+0x5c>
 8001da6:	6863      	ldr	r3, [r4, #4]
 8001da8:	03de      	lsls	r6, r3, #15
 8001daa:	d507      	bpl.n	8001dbc <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dac:	6823      	ldr	r3, [r4, #0]
 8001dae:	039c      	lsls	r4, r3, #14
 8001db0:	d5dd      	bpl.n	8001d6e <HAL_RCC_OscConfig+0xe>
 8001db2:	686b      	ldr	r3, [r5, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1da      	bne.n	8001d6e <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8001db8:	2001      	movs	r0, #1
 8001dba:	e013      	b.n	8001de4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dbc:	686b      	ldr	r3, [r5, #4]
 8001dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc2:	d112      	bne.n	8001dea <HAL_RCC_OscConfig+0x8a>
 8001dc4:	6823      	ldr	r3, [r4, #0]
 8001dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001dcc:	f7ff fc9e 	bl	800170c <HAL_GetTick>
 8001dd0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd2:	6823      	ldr	r3, [r4, #0]
 8001dd4:	0398      	lsls	r0, r3, #14
 8001dd6:	d4ca      	bmi.n	8001d6e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd8:	f7ff fc98 	bl	800170c <HAL_GetTick>
 8001ddc:	1b80      	subs	r0, r0, r6
 8001dde:	2864      	cmp	r0, #100	; 0x64
 8001de0:	d9f7      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8001de2:	2003      	movs	r0, #3
}
 8001de4:	b002      	add	sp, #8
 8001de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dea:	b99b      	cbnz	r3, 8001e14 <HAL_RCC_OscConfig+0xb4>
 8001dec:	6823      	ldr	r3, [r4, #0]
 8001dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001df2:	6023      	str	r3, [r4, #0]
 8001df4:	6823      	ldr	r3, [r4, #0]
 8001df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dfa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001dfc:	f7ff fc86 	bl	800170c <HAL_GetTick>
 8001e00:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e02:	6823      	ldr	r3, [r4, #0]
 8001e04:	0399      	lsls	r1, r3, #14
 8001e06:	d5b2      	bpl.n	8001d6e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e08:	f7ff fc80 	bl	800170c <HAL_GetTick>
 8001e0c:	1b80      	subs	r0, r0, r6
 8001e0e:	2864      	cmp	r0, #100	; 0x64
 8001e10:	d9f7      	bls.n	8001e02 <HAL_RCC_OscConfig+0xa2>
 8001e12:	e7e6      	b.n	8001de2 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e18:	6823      	ldr	r3, [r4, #0]
 8001e1a:	d103      	bne.n	8001e24 <HAL_RCC_OscConfig+0xc4>
 8001e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e20:	6023      	str	r3, [r4, #0]
 8001e22:	e7cf      	b.n	8001dc4 <HAL_RCC_OscConfig+0x64>
 8001e24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e28:	6023      	str	r3, [r4, #0]
 8001e2a:	6823      	ldr	r3, [r4, #0]
 8001e2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e30:	e7cb      	b.n	8001dca <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e32:	4c68      	ldr	r4, [pc, #416]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001e34:	6863      	ldr	r3, [r4, #4]
 8001e36:	f013 0f0c 	tst.w	r3, #12
 8001e3a:	d007      	beq.n	8001e4c <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e3c:	6863      	ldr	r3, [r4, #4]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d110      	bne.n	8001e68 <HAL_RCC_OscConfig+0x108>
 8001e46:	6863      	ldr	r3, [r4, #4]
 8001e48:	03da      	lsls	r2, r3, #15
 8001e4a:	d40d      	bmi.n	8001e68 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4c:	6823      	ldr	r3, [r4, #0]
 8001e4e:	079b      	lsls	r3, r3, #30
 8001e50:	d502      	bpl.n	8001e58 <HAL_RCC_OscConfig+0xf8>
 8001e52:	692b      	ldr	r3, [r5, #16]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d1af      	bne.n	8001db8 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e58:	6823      	ldr	r3, [r4, #0]
 8001e5a:	696a      	ldr	r2, [r5, #20]
 8001e5c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e60:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001e64:	6023      	str	r3, [r4, #0]
 8001e66:	e785      	b.n	8001d74 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e68:	692a      	ldr	r2, [r5, #16]
 8001e6a:	4b5b      	ldr	r3, [pc, #364]	; (8001fd8 <HAL_RCC_OscConfig+0x278>)
 8001e6c:	b16a      	cbz	r2, 8001e8a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8001e6e:	2201      	movs	r2, #1
 8001e70:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e72:	f7ff fc4b 	bl	800170c <HAL_GetTick>
 8001e76:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e78:	6823      	ldr	r3, [r4, #0]
 8001e7a:	079f      	lsls	r7, r3, #30
 8001e7c:	d4ec      	bmi.n	8001e58 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e7e:	f7ff fc45 	bl	800170c <HAL_GetTick>
 8001e82:	1b80      	subs	r0, r0, r6
 8001e84:	2802      	cmp	r0, #2
 8001e86:	d9f7      	bls.n	8001e78 <HAL_RCC_OscConfig+0x118>
 8001e88:	e7ab      	b.n	8001de2 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8001e8a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e8c:	f7ff fc3e 	bl	800170c <HAL_GetTick>
 8001e90:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e92:	6823      	ldr	r3, [r4, #0]
 8001e94:	0798      	lsls	r0, r3, #30
 8001e96:	f57f af6d 	bpl.w	8001d74 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9a:	f7ff fc37 	bl	800170c <HAL_GetTick>
 8001e9e:	1b80      	subs	r0, r0, r6
 8001ea0:	2802      	cmp	r0, #2
 8001ea2:	d9f6      	bls.n	8001e92 <HAL_RCC_OscConfig+0x132>
 8001ea4:	e79d      	b.n	8001de2 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ea6:	69aa      	ldr	r2, [r5, #24]
 8001ea8:	4e4a      	ldr	r6, [pc, #296]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001eaa:	4b4b      	ldr	r3, [pc, #300]	; (8001fd8 <HAL_RCC_OscConfig+0x278>)
 8001eac:	b1e2      	cbz	r2, 8001ee8 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001eb4:	f7ff fc2a 	bl	800170c <HAL_GetTick>
 8001eb8:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001ebc:	079b      	lsls	r3, r3, #30
 8001ebe:	d50d      	bpl.n	8001edc <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ec0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001ec4:	4b45      	ldr	r3, [pc, #276]	; (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ecc:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001ece:	bf00      	nop
  }
  while (Delay --);
 8001ed0:	9b01      	ldr	r3, [sp, #4]
 8001ed2:	1e5a      	subs	r2, r3, #1
 8001ed4:	9201      	str	r2, [sp, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f9      	bne.n	8001ece <HAL_RCC_OscConfig+0x16e>
 8001eda:	e74f      	b.n	8001d7c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001edc:	f7ff fc16 	bl	800170c <HAL_GetTick>
 8001ee0:	1b00      	subs	r0, r0, r4
 8001ee2:	2802      	cmp	r0, #2
 8001ee4:	d9e9      	bls.n	8001eba <HAL_RCC_OscConfig+0x15a>
 8001ee6:	e77c      	b.n	8001de2 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8001ee8:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001eec:	f7ff fc0e 	bl	800170c <HAL_GetTick>
 8001ef0:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001ef4:	079f      	lsls	r7, r3, #30
 8001ef6:	f57f af41 	bpl.w	8001d7c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001efa:	f7ff fc07 	bl	800170c <HAL_GetTick>
 8001efe:	1b00      	subs	r0, r0, r4
 8001f00:	2802      	cmp	r0, #2
 8001f02:	d9f6      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x192>
 8001f04:	e76d      	b.n	8001de2 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f06:	4c33      	ldr	r4, [pc, #204]	; (8001fd4 <HAL_RCC_OscConfig+0x274>)
 8001f08:	69e3      	ldr	r3, [r4, #28]
 8001f0a:	00d8      	lsls	r0, r3, #3
 8001f0c:	d424      	bmi.n	8001f58 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8001f0e:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f10:	69e3      	ldr	r3, [r4, #28]
 8001f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f16:	61e3      	str	r3, [r4, #28]
 8001f18:	69e3      	ldr	r3, [r4, #28]
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f22:	4e2f      	ldr	r6, [pc, #188]	; (8001fe0 <HAL_RCC_OscConfig+0x280>)
 8001f24:	6833      	ldr	r3, [r6, #0]
 8001f26:	05d9      	lsls	r1, r3, #23
 8001f28:	d518      	bpl.n	8001f5c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f2a:	68eb      	ldr	r3, [r5, #12]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d126      	bne.n	8001f7e <HAL_RCC_OscConfig+0x21e>
 8001f30:	6a23      	ldr	r3, [r4, #32]
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001f38:	f7ff fbe8 	bl	800170c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001f40:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f42:	6a23      	ldr	r3, [r4, #32]
 8001f44:	079b      	lsls	r3, r3, #30
 8001f46:	d53f      	bpl.n	8001fc8 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8001f48:	2f00      	cmp	r7, #0
 8001f4a:	f43f af1b 	beq.w	8001d84 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f4e:	69e3      	ldr	r3, [r4, #28]
 8001f50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f54:	61e3      	str	r3, [r4, #28]
 8001f56:	e715      	b.n	8001d84 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001f58:	2700      	movs	r7, #0
 8001f5a:	e7e2      	b.n	8001f22 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f5c:	6833      	ldr	r3, [r6, #0]
 8001f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f62:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001f64:	f7ff fbd2 	bl	800170c <HAL_GetTick>
 8001f68:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6a:	6833      	ldr	r3, [r6, #0]
 8001f6c:	05da      	lsls	r2, r3, #23
 8001f6e:	d4dc      	bmi.n	8001f2a <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f70:	f7ff fbcc 	bl	800170c <HAL_GetTick>
 8001f74:	eba0 0008 	sub.w	r0, r0, r8
 8001f78:	2864      	cmp	r0, #100	; 0x64
 8001f7a:	d9f6      	bls.n	8001f6a <HAL_RCC_OscConfig+0x20a>
 8001f7c:	e731      	b.n	8001de2 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f7e:	b9ab      	cbnz	r3, 8001fac <HAL_RCC_OscConfig+0x24c>
 8001f80:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f82:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f86:	f023 0301 	bic.w	r3, r3, #1
 8001f8a:	6223      	str	r3, [r4, #32]
 8001f8c:	6a23      	ldr	r3, [r4, #32]
 8001f8e:	f023 0304 	bic.w	r3, r3, #4
 8001f92:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001f94:	f7ff fbba 	bl	800170c <HAL_GetTick>
 8001f98:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f9a:	6a23      	ldr	r3, [r4, #32]
 8001f9c:	0798      	lsls	r0, r3, #30
 8001f9e:	d5d3      	bpl.n	8001f48 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa0:	f7ff fbb4 	bl	800170c <HAL_GetTick>
 8001fa4:	1b80      	subs	r0, r0, r6
 8001fa6:	4540      	cmp	r0, r8
 8001fa8:	d9f7      	bls.n	8001f9a <HAL_RCC_OscConfig+0x23a>
 8001faa:	e71a      	b.n	8001de2 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fac:	2b05      	cmp	r3, #5
 8001fae:	6a23      	ldr	r3, [r4, #32]
 8001fb0:	d103      	bne.n	8001fba <HAL_RCC_OscConfig+0x25a>
 8001fb2:	f043 0304 	orr.w	r3, r3, #4
 8001fb6:	6223      	str	r3, [r4, #32]
 8001fb8:	e7ba      	b.n	8001f30 <HAL_RCC_OscConfig+0x1d0>
 8001fba:	f023 0301 	bic.w	r3, r3, #1
 8001fbe:	6223      	str	r3, [r4, #32]
 8001fc0:	6a23      	ldr	r3, [r4, #32]
 8001fc2:	f023 0304 	bic.w	r3, r3, #4
 8001fc6:	e7b6      	b.n	8001f36 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc8:	f7ff fba0 	bl	800170c <HAL_GetTick>
 8001fcc:	1b80      	subs	r0, r0, r6
 8001fce:	4540      	cmp	r0, r8
 8001fd0:	d9b7      	bls.n	8001f42 <HAL_RCC_OscConfig+0x1e2>
 8001fd2:	e706      	b.n	8001de2 <HAL_RCC_OscConfig+0x82>
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	42420000 	.word	0x42420000
 8001fdc:	2000b874 	.word	0x2000b874
 8001fe0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fe4:	4c2a      	ldr	r4, [pc, #168]	; (8002090 <HAL_RCC_OscConfig+0x330>)
 8001fe6:	6863      	ldr	r3, [r4, #4]
 8001fe8:	f003 030c 	and.w	r3, r3, #12
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d03e      	beq.n	800206e <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	4b28      	ldr	r3, [pc, #160]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 8001ff4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001ff6:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ff8:	d12c      	bne.n	8002054 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001ffa:	f7ff fb87 	bl	800170c <HAL_GetTick>
 8001ffe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002000:	6823      	ldr	r3, [r4, #0]
 8002002:	0199      	lsls	r1, r3, #6
 8002004:	d420      	bmi.n	8002048 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002006:	6a2b      	ldr	r3, [r5, #32]
 8002008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800200c:	d105      	bne.n	800201a <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800200e:	6862      	ldr	r2, [r4, #4]
 8002010:	68a9      	ldr	r1, [r5, #8]
 8002012:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002016:	430a      	orrs	r2, r1
 8002018:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800201a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800201c:	6862      	ldr	r2, [r4, #4]
 800201e:	430b      	orrs	r3, r1
 8002020:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002024:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8002026:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002028:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800202a:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <HAL_RCC_OscConfig+0x334>)
 800202c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800202e:	f7ff fb6d 	bl	800170c <HAL_GetTick>
 8002032:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002034:	6823      	ldr	r3, [r4, #0]
 8002036:	019a      	lsls	r2, r3, #6
 8002038:	f53f aea8 	bmi.w	8001d8c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203c:	f7ff fb66 	bl	800170c <HAL_GetTick>
 8002040:	1b40      	subs	r0, r0, r5
 8002042:	2802      	cmp	r0, #2
 8002044:	d9f6      	bls.n	8002034 <HAL_RCC_OscConfig+0x2d4>
 8002046:	e6cc      	b.n	8001de2 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002048:	f7ff fb60 	bl	800170c <HAL_GetTick>
 800204c:	1b80      	subs	r0, r0, r6
 800204e:	2802      	cmp	r0, #2
 8002050:	d9d6      	bls.n	8002000 <HAL_RCC_OscConfig+0x2a0>
 8002052:	e6c6      	b.n	8001de2 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8002054:	f7ff fb5a 	bl	800170c <HAL_GetTick>
 8002058:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800205a:	6823      	ldr	r3, [r4, #0]
 800205c:	019b      	lsls	r3, r3, #6
 800205e:	f57f ae95 	bpl.w	8001d8c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002062:	f7ff fb53 	bl	800170c <HAL_GetTick>
 8002066:	1b40      	subs	r0, r0, r5
 8002068:	2802      	cmp	r0, #2
 800206a:	d9f6      	bls.n	800205a <HAL_RCC_OscConfig+0x2fa>
 800206c:	e6b9      	b.n	8001de2 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800206e:	2801      	cmp	r0, #1
 8002070:	f43f aeb8 	beq.w	8001de4 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8002074:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002076:	6a2a      	ldr	r2, [r5, #32]
 8002078:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800207c:	4291      	cmp	r1, r2
 800207e:	f47f ae9b 	bne.w	8001db8 <HAL_RCC_OscConfig+0x58>
 8002082:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002084:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002088:	4293      	cmp	r3, r2
 800208a:	f43f ae7f 	beq.w	8001d8c <HAL_RCC_OscConfig+0x2c>
 800208e:	e693      	b.n	8001db8 <HAL_RCC_OscConfig+0x58>
 8002090:	40021000 	.word	0x40021000
 8002094:	42420000 	.word	0x42420000

08002098 <HAL_RCC_GetSysClockFreq>:
{
 8002098:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800209a:	4b18      	ldr	r3, [pc, #96]	; (80020fc <HAL_RCC_GetSysClockFreq+0x64>)
{
 800209c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800209e:	ac02      	add	r4, sp, #8
 80020a0:	f103 0510 	add.w	r5, r3, #16
 80020a4:	4622      	mov	r2, r4
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	6859      	ldr	r1, [r3, #4]
 80020aa:	3308      	adds	r3, #8
 80020ac:	c203      	stmia	r2!, {r0, r1}
 80020ae:	42ab      	cmp	r3, r5
 80020b0:	4614      	mov	r4, r2
 80020b2:	d1f7      	bne.n	80020a4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020b4:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 80020b8:	4911      	ldr	r1, [pc, #68]	; (8002100 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020ba:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80020be:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80020c0:	f003 020c 	and.w	r2, r3, #12
 80020c4:	2a08      	cmp	r2, #8
 80020c6:	d117      	bne.n	80020f8 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020c8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80020cc:	3218      	adds	r2, #24
 80020ce:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020d0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020d2:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020d6:	d50c      	bpl.n	80020f2 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020d8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020da:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020dc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020e0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020e2:	3318      	adds	r3, #24
 80020e4:	446b      	add	r3, sp
 80020e6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020ea:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80020ee:	b007      	add	sp, #28
 80020f0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020f2:	4b05      	ldr	r3, [pc, #20]	; (8002108 <HAL_RCC_GetSysClockFreq+0x70>)
 80020f4:	4358      	muls	r0, r3
 80020f6:	e7fa      	b.n	80020ee <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 80020f8:	4802      	ldr	r0, [pc, #8]	; (8002104 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80020fa:	e7f8      	b.n	80020ee <HAL_RCC_GetSysClockFreq+0x56>
 80020fc:	08060c8e 	.word	0x08060c8e
 8002100:	40021000 	.word	0x40021000
 8002104:	007a1200 	.word	0x007a1200
 8002108:	003d0900 	.word	0x003d0900

0800210c <HAL_RCC_ClockConfig>:
{
 800210c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002110:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002112:	4604      	mov	r4, r0
 8002114:	b910      	cbnz	r0, 800211c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002116:	2001      	movs	r0, #1
}
 8002118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800211c:	4a44      	ldr	r2, [pc, #272]	; (8002230 <HAL_RCC_ClockConfig+0x124>)
 800211e:	6813      	ldr	r3, [r2, #0]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	428b      	cmp	r3, r1
 8002126:	d328      	bcc.n	800217a <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002128:	6821      	ldr	r1, [r4, #0]
 800212a:	078e      	lsls	r6, r1, #30
 800212c:	d430      	bmi.n	8002190 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800212e:	07ca      	lsls	r2, r1, #31
 8002130:	d443      	bmi.n	80021ba <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002132:	4a3f      	ldr	r2, [pc, #252]	; (8002230 <HAL_RCC_ClockConfig+0x124>)
 8002134:	6813      	ldr	r3, [r2, #0]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	42ab      	cmp	r3, r5
 800213c:	d865      	bhi.n	800220a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213e:	6822      	ldr	r2, [r4, #0]
 8002140:	4d3c      	ldr	r5, [pc, #240]	; (8002234 <HAL_RCC_ClockConfig+0x128>)
 8002142:	f012 0f04 	tst.w	r2, #4
 8002146:	d16c      	bne.n	8002222 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002148:	0713      	lsls	r3, r2, #28
 800214a:	d506      	bpl.n	800215a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800214c:	686b      	ldr	r3, [r5, #4]
 800214e:	6922      	ldr	r2, [r4, #16]
 8002150:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002154:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002158:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800215a:	f7ff ff9d 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 800215e:	686b      	ldr	r3, [r5, #4]
 8002160:	4a35      	ldr	r2, [pc, #212]	; (8002238 <HAL_RCC_ClockConfig+0x12c>)
 8002162:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002166:	5cd3      	ldrb	r3, [r2, r3]
 8002168:	40d8      	lsrs	r0, r3
 800216a:	4b34      	ldr	r3, [pc, #208]	; (800223c <HAL_RCC_ClockConfig+0x130>)
 800216c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800216e:	4b34      	ldr	r3, [pc, #208]	; (8002240 <HAL_RCC_ClockConfig+0x134>)
 8002170:	6818      	ldr	r0, [r3, #0]
 8002172:	f7ff fa89 	bl	8001688 <HAL_InitTick>
  return HAL_OK;
 8002176:	2000      	movs	r0, #0
 8002178:	e7ce      	b.n	8002118 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217a:	6813      	ldr	r3, [r2, #0]
 800217c:	f023 0307 	bic.w	r3, r3, #7
 8002180:	430b      	orrs	r3, r1
 8002182:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002184:	6813      	ldr	r3, [r2, #0]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	428b      	cmp	r3, r1
 800218c:	d1c3      	bne.n	8002116 <HAL_RCC_ClockConfig+0xa>
 800218e:	e7cb      	b.n	8002128 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	4b28      	ldr	r3, [pc, #160]	; (8002234 <HAL_RCC_ClockConfig+0x128>)
 8002192:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002196:	bf1e      	ittt	ne
 8002198:	685a      	ldrne	r2, [r3, #4]
 800219a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800219e:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021a2:	bf42      	ittt	mi
 80021a4:	685a      	ldrmi	r2, [r3, #4]
 80021a6:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80021aa:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	68a0      	ldr	r0, [r4, #8]
 80021b0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80021b4:	4302      	orrs	r2, r0
 80021b6:	605a      	str	r2, [r3, #4]
 80021b8:	e7b9      	b.n	800212e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ba:	6862      	ldr	r2, [r4, #4]
 80021bc:	4e1d      	ldr	r6, [pc, #116]	; (8002234 <HAL_RCC_ClockConfig+0x128>)
 80021be:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c0:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021c2:	d11a      	bne.n	80021fa <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c8:	d0a5      	beq.n	8002116 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ca:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021cc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021d0:	f023 0303 	bic.w	r3, r3, #3
 80021d4:	4313      	orrs	r3, r2
 80021d6:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80021d8:	f7ff fa98 	bl	800170c <HAL_GetTick>
 80021dc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021de:	6873      	ldr	r3, [r6, #4]
 80021e0:	6862      	ldr	r2, [r4, #4]
 80021e2:	f003 030c 	and.w	r3, r3, #12
 80021e6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80021ea:	d0a2      	beq.n	8002132 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ec:	f7ff fa8e 	bl	800170c <HAL_GetTick>
 80021f0:	1bc0      	subs	r0, r0, r7
 80021f2:	4540      	cmp	r0, r8
 80021f4:	d9f3      	bls.n	80021de <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80021f6:	2003      	movs	r0, #3
 80021f8:	e78e      	b.n	8002118 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021fa:	2a02      	cmp	r2, #2
 80021fc:	d102      	bne.n	8002204 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002202:	e7e1      	b.n	80021c8 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002204:	f013 0f02 	tst.w	r3, #2
 8002208:	e7de      	b.n	80021c8 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220a:	6813      	ldr	r3, [r2, #0]
 800220c:	f023 0307 	bic.w	r3, r3, #7
 8002210:	432b      	orrs	r3, r5
 8002212:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002214:	6813      	ldr	r3, [r2, #0]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	42ab      	cmp	r3, r5
 800221c:	f47f af7b 	bne.w	8002116 <HAL_RCC_ClockConfig+0xa>
 8002220:	e78d      	b.n	800213e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002222:	686b      	ldr	r3, [r5, #4]
 8002224:	68e1      	ldr	r1, [r4, #12]
 8002226:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800222a:	430b      	orrs	r3, r1
 800222c:	606b      	str	r3, [r5, #4]
 800222e:	e78b      	b.n	8002148 <HAL_RCC_ClockConfig+0x3c>
 8002230:	40022000 	.word	0x40022000
 8002234:	40021000 	.word	0x40021000
 8002238:	08060bd9 	.word	0x08060bd9
 800223c:	2000b874 	.word	0x2000b874
 8002240:	2000b87c 	.word	0x2000b87c

08002244 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002244:	b570      	push	{r4, r5, r6, lr}
 8002246:	460e      	mov	r6, r1
 8002248:	4615      	mov	r5, r2
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 800224a:	4604      	mov	r4, r0
 800224c:	b348      	cbz	r0, 80022a2 <HAL_SRAM_Init+0x5e>
 800224e:	6983      	ldr	r3, [r0, #24]
 8002250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002254:	d025      	beq.n	80022a2 <HAL_SRAM_Init+0x5e>
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002256:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800225a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800225e:	b91b      	cbnz	r3, 8002268 <HAL_SRAM_Init+0x24>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002260:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002264:	f7ff f98c 	bl	8001580 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002268:	f104 0108 	add.w	r1, r4, #8
 800226c:	6820      	ldr	r0, [r4, #0]
 800226e:	f000 f81b 	bl	80022a8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002272:	4631      	mov	r1, r6
 8002274:	68a2      	ldr	r2, [r4, #8]
 8002276:	6820      	ldr	r0, [r4, #0]
 8002278:	f000 f848 	bl	800230c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800227c:	4629      	mov	r1, r5
 800227e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002280:	68a2      	ldr	r2, [r4, #8]
 8002282:	6860      	ldr	r0, [r4, #4]
 8002284:	f000 f860 	bl	8002348 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002288:	6822      	ldr	r2, [r4, #0]
 800228a:	68a1      	ldr	r1, [r4, #8]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;

  return HAL_OK;
 800228c:	2000      	movs	r0, #0
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800228e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002292:	f043 0301 	orr.w	r3, r3, #1
 8002296:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  hsram->State = HAL_SRAM_STATE_READY;
 800229a:	2301      	movs	r3, #1
 800229c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 80022a0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80022a2:	2001      	movs	r0, #1
 80022a4:	e7fc      	b.n	80022a0 <HAL_SRAM_Init+0x5c>
	...

080022a8 <FSMC_NORSRAM_Init>:
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80022a8:	680a      	ldr	r2, [r1, #0]
{
 80022aa:	b570      	push	{r4, r5, r6, lr}
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80022ac:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80022b0:	684e      	ldr	r6, [r1, #4]
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80022b2:	f023 0301 	bic.w	r3, r3, #1
 80022b6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80022ba:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80022bc:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	bf0c      	ite	eq
 80022c4:	2440      	moveq	r4, #64	; 0x40
 80022c6:	2400      	movne	r4, #0
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80022c8:	4333      	orrs	r3, r6
 80022ca:	68ce      	ldr	r6, [r1, #12]
 80022cc:	4333      	orrs	r3, r6
 80022ce:	690e      	ldr	r6, [r1, #16]
 80022d0:	4333      	orrs	r3, r6
 80022d2:	694e      	ldr	r6, [r1, #20]
 80022d4:	4333      	orrs	r3, r6
 80022d6:	69ce      	ldr	r6, [r1, #28]
 80022d8:	4333      	orrs	r3, r6
 80022da:	6a0e      	ldr	r6, [r1, #32]
 80022dc:	4333      	orrs	r3, r6
 80022de:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 80022e0:	4333      	orrs	r3, r6
 80022e2:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 80022e4:	4333      	orrs	r3, r6
 80022e6:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80022e8:	4333      	orrs	r3, r6
 80022ea:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 80022ec:	4333      	orrs	r3, r6
 80022ee:	698e      	ldr	r6, [r1, #24]
 80022f0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80022f2:	4333      	orrs	r3, r6
 80022f4:	430b      	orrs	r3, r1
 80022f6:	4904      	ldr	r1, [pc, #16]	; (8002308 <FSMC_NORSRAM_Init+0x60>)
 80022f8:	4029      	ands	r1, r5
 80022fa:	430b      	orrs	r3, r1
 80022fc:	4323      	orrs	r3, r4
 80022fe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]


  return HAL_OK;
}
 8002302:	2000      	movs	r0, #0
 8002304:	bd70      	pop	{r4, r5, r6, pc}
 8002306:	bf00      	nop
 8002308:	fff00080 	.word	0xfff00080

0800230c <FSMC_NORSRAM_Timing_Init>:
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800230c:	680b      	ldr	r3, [r1, #0]
{
 800230e:	b510      	push	{r4, lr}
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8002310:	698c      	ldr	r4, [r1, #24]
 8002312:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002316:	4323      	orrs	r3, r4
 8002318:	684c      	ldr	r4, [r1, #4]
 800231a:	6850      	ldr	r0, [r2, #4]
 800231c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8002320:	688c      	ldr	r4, [r1, #8]
 8002322:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8002326:	68cc      	ldr	r4, [r1, #12]
 8002328:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800232c:	690c      	ldr	r4, [r1, #16]
 800232e:	6949      	ldr	r1, [r1, #20]
 8002330:	3c01      	subs	r4, #1
 8002332:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8002336:	3902      	subs	r1, #2
 8002338:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800233c:	f000 4140 	and.w	r1, r0, #3221225472	; 0xc0000000
 8002340:	430b      	orrs	r3, r1
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
}
 8002342:	2000      	movs	r0, #0
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8002344:	6053      	str	r3, [r2, #4]
}
 8002346:	bd10      	pop	{r4, pc}

08002348 <FSMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8002348:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
{
 800234c:	b530      	push	{r4, r5, lr}
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800234e:	d114      	bne.n	800237a <FSMC_NORSRAM_Extended_Timing_Init+0x32>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8002350:	698d      	ldr	r5, [r1, #24]
 8002352:	680b      	ldr	r3, [r1, #0]
 8002354:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8002358:	432b      	orrs	r3, r5
 800235a:	684d      	ldr	r5, [r1, #4]
 800235c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8002360:	688d      	ldr	r5, [r1, #8]
 8002362:	68c9      	ldr	r1, [r1, #12]
 8002364:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8002368:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800236c:	4904      	ldr	r1, [pc, #16]	; (8002380 <FSMC_NORSRAM_Extended_Timing_Init+0x38>)
 800236e:	4021      	ands	r1, r4
 8002370:	430b      	orrs	r3, r1
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8002372:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8002376:	2000      	movs	r0, #0
 8002378:	bd30      	pop	{r4, r5, pc}
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800237a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800237e:	e7f8      	b.n	8002372 <FSMC_NORSRAM_Extended_Timing_Init+0x2a>
 8002380:	cff00000 	.word	0xcff00000

08002384 <__libc_init_array>:
 8002384:	b570      	push	{r4, r5, r6, lr}
 8002386:	2600      	movs	r6, #0
 8002388:	4d0c      	ldr	r5, [pc, #48]	; (80023bc <__libc_init_array+0x38>)
 800238a:	4c0d      	ldr	r4, [pc, #52]	; (80023c0 <__libc_init_array+0x3c>)
 800238c:	1b64      	subs	r4, r4, r5
 800238e:	10a4      	asrs	r4, r4, #2
 8002390:	42a6      	cmp	r6, r4
 8002392:	d109      	bne.n	80023a8 <__libc_init_array+0x24>
 8002394:	f000 f822 	bl	80023dc <_init>
 8002398:	2600      	movs	r6, #0
 800239a:	4d0a      	ldr	r5, [pc, #40]	; (80023c4 <__libc_init_array+0x40>)
 800239c:	4c0a      	ldr	r4, [pc, #40]	; (80023c8 <__libc_init_array+0x44>)
 800239e:	1b64      	subs	r4, r4, r5
 80023a0:	10a4      	asrs	r4, r4, #2
 80023a2:	42a6      	cmp	r6, r4
 80023a4:	d105      	bne.n	80023b2 <__libc_init_array+0x2e>
 80023a6:	bd70      	pop	{r4, r5, r6, pc}
 80023a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80023ac:	4798      	blx	r3
 80023ae:	3601      	adds	r6, #1
 80023b0:	e7ee      	b.n	8002390 <__libc_init_array+0xc>
 80023b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80023b6:	4798      	blx	r3
 80023b8:	3601      	adds	r6, #1
 80023ba:	e7f2      	b.n	80023a2 <__libc_init_array+0x1e>
 80023bc:	08060ca0 	.word	0x08060ca0
 80023c0:	08060ca0 	.word	0x08060ca0
 80023c4:	08060ca0 	.word	0x08060ca0
 80023c8:	08060ca4 	.word	0x08060ca4

080023cc <memset>:
 80023cc:	4603      	mov	r3, r0
 80023ce:	4402      	add	r2, r0
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d100      	bne.n	80023d6 <memset+0xa>
 80023d4:	4770      	bx	lr
 80023d6:	f803 1b01 	strb.w	r1, [r3], #1
 80023da:	e7f9      	b.n	80023d0 <memset+0x4>

080023dc <_init>:
 80023dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023de:	bf00      	nop
 80023e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023e2:	bc08      	pop	{r3}
 80023e4:	469e      	mov	lr, r3
 80023e6:	4770      	bx	lr

080023e8 <_fini>:
 80023e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ea:	bf00      	nop
 80023ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ee:	bc08      	pop	{r3}
 80023f0:	469e      	mov	lr, r3
 80023f2:	4770      	bx	lr
